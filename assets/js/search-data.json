{
  
    
        "post0": {
            "title": "Data Structures Guide",
            "content": "Estimated Duration: 35 minutes | . Objectives: . Students will understand the concept of data structures, including lists, dictionaries, and 2D arrays | Students will learn how to iterate through data structures using loops | Students will be able to visualize data structures and iteration processes | Students will be able to apply their knowledge to build simulations/interactions using lists and iteration | Students will learn how to store list and dictionary content in databases | . Introduction (5 min): . Greet the class and introduce the topic of data structures and iteration. | Explain the importance of data structures in computer science and programming. | Show examples of data structures in real-life scenarios, such as grocery lists, phone contacts, or spreadsheets. | . Lesson 1: Lists and Iteration (10 min) . Explain the concept of lists and how to create and manipulate them in Python. | Show examples of list operations, such as appending, inserting, and slicing. | Introduce the concept of iteration and how to use loops to iterate through lists. | Show examples of loop structures, such as for and while loops. | Use the code example provided to demonstrate how to spin a wheel using a list and a loop. | . Lesson 2: Dictionaries and 2D Arrays (10 min) . Explain the concept of dictionaries and how to create and manipulate them in Python. | Show examples of dictionary operations, such as adding, modifying, and deleting entries. | Introduce the concept of 2D arrays and how to create and access them in Python. | Show examples of 2D array operations, such as indexing and slicing. | . Lesson 3: Simulations and Interactions (10 min) . Explain how to use lists and iteration to build simulations and interactions in Python. | Show examples of simulation scenarios, such as rolling dice and flipping coins. | Use the code example provided to demonstrate how to build a spinning wheel simulation using a list and a loop. | . Lesson 4: Storing List and Dictionary Content in Databases (5 min) . Explain the concept of databases and how to store data in them. | Show examples of database management software and tools, such as SQLite or MySQL. | Explain how to connect to a database and how to store and retrieve list and dictionary content from it. | . Conclusion (5 min): . Recap the main concepts and topics covered in the lesson. | Ask students to share their thoughts, feedback, and questions on the lesson. | Encourage students to continue practicing and exploring data structures and iteration in their own projects and applications. | . Hacks (1 point total): . (0.2 points) Students will create a visual to compare lists and dictionaries. | (0.3 points) Students will create their own lists and write code to perform specific operations on them, such as sorting, filtering, or counting elements. | (0.5 points) Students will build their own simulation or interaction using lists and iteration, such as the guessing game and dice roll. | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/04/20/team-eaar-lesson.html",
            "relUrl": "/2023/04/20/team-eaar-lesson.html",
            "date": " • Apr 20, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 3 Vocabulary (Definitions + Examples)",
            "content": "Variables: A variable is a named container that stores a value that can be changed or updated. . X = 5 print(X) . 5 . Data Types: Different types of data such as numbers, strings, booleans, and objects that can be stored in variables. . X = &quot;hello&quot; print(X) . hello . Assignment Operators: Operators that are used to assign a value to a variable. . three = 3 print(three) . 3 . Managing Complexity with Variables: Lists, 2D Lists, Dictionaries, Class: Ways of organizing data in a more complex structure. . MyList = [1,2,3,4,5] print(MyList) . [1, 2, 3, 4, 5] . Algorithms: A set of instructions for solving a problem. . Example: To find the largest number in a list, you could use a sorting algorithm. . Sequence, Selection, Iteration: Three types of control flow structures in programming. . Example: For a sequence, you could create a loop that prints out each number from 1 to 10. . Expressions, Comparison Operators, Booleans Expressions and Selection, Booleans Expressions and Iteration, Truth Tables: Expressions are used to evaluate values and comparison operators are used to compare values. . if (5 &gt; 3) is True: print(&quot;True&quot;) else: print(&quot;False&quot;) . True . Characters: Individual letters, numbers, and symbols . Characters = &quot;H&quot; print(Characters) . H . Strings: A a combination of characters Length: The number of characters in a string Concatenation: A combination of strings together . Strings = &quot;Hello World&quot; Strings2 = &quot;World Hello&quot; print(Strings) print(len(Strings)) print(Strings, Strings2) . Hello World 11 Hello World World Hello . Upper and Lower: Functions for changing the case of characters . Traversing Strings: Looping over each character in a string. . If, Elif, Else conditionals; Nested Selection Statements: Control statements that allow you to execute code based on certain conditions. . x = 5 if x &gt; 0: print(&quot;x is greater than 0&quot;) elif x == 0: print(&quot;x is equal to 0&quot;) else: print(&quot;x is less than 0&quot;) . x is greater than 0 . Python For, While loops with Range, with List: Types of loops that allow you to iterate over a range of numbers or a list of items. . import random x = random.randint(0,10) for x in range(0, 10): print(x) . 0 1 2 3 4 5 6 7 8 9 . Combining loops with conditionals to Break, Continue: Control statements that allow you to break out of a loop or skip an iteration. . x = 2 while x &lt; 10: if x == 5: break x += 1 print(x) . 5 . Procedural Abstraction: A process used to simplify complex tasks by breaking them down into smaller, easier-to-manage tasks. . Python Def Procedures: A method used to define a set of instructions to be executed when a certain procedure is called. . Parameters: Arguments that are passed to a procedure when it is called. . Return Values: A value that is returned after a procedure has been executed. . Selection: Selection is a type of control flow that allows for the execution of certain code based on certain conditions. . firstNum = int(input(&quot;Input your first number.&quot;)) secondNum = int(input(&quot;Input your second number.&quot;)) conditional = input(&quot;AND, OR, XOR?&quot;).lower() if conditional == &quot;and&quot;: print(&quot;Selection:&quot; , &quot;AND&quot;, firstNum, &quot;&amp;&quot;, secondNum, &quot;=&quot;, firstNum &amp; secondNum) elif conditional ==&quot;or&quot;: print(&quot;Selection:&quot; , &quot;OR &quot;, firstNum, &quot;|&quot;, secondNum, &quot;=&quot;, firstNum | secondNum) elif conditional ==&quot;xor&quot;: print(&quot;Selection:&quot; , &quot;XOR&quot;, firstNum, &quot;^&quot;, secondNum, &quot;=&quot;, firstNum ^ secondNum) else: print(&quot;Error&quot;) . Selection: OR 2 | 10 = 10 . Lists: Lists are data structures used to store multiple values in one variable. . Iteration: Iteration is a type of control flow that allows for the execution of certain code multiple times. . print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Ethan Tran&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 15 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot; , &quot;Bash&quot; , &quot;C&quot; , &quot;R&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs, } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Ethan Tran &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 15 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 100.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;C&#39;, &#39;R&#39;] &lt;class &#39;list&#39;&gt; length 6 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Ethan Tran&#39;, &#39;age&#39;: 15, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;C&#39;, &#39;R&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Ethan Tran &lt;class &#39;str&#39;&gt; . Logical Operator: A logical operator is a type of operator in computer science that performs a logical operation, such as a comparison or a boolean operation, on two or more values or variables. Examples of logical operators include AND, OR, NOT, XOR, and NAND. . Tru = True equals = &quot;=&quot; opposite = not(Tru) print(opposite) fun = &quot;fun&quot; awesome = fun if fun and awesome == &quot;fun&quot;: print(&quot;AND&quot;) else: print(&quot;NOT AND&quot;) . False . fun = &quot;fun&quot; awesome = fun if fun and awesome == &quot;fun&quot;: print(&quot;AND&quot;) else: print(&quot;NOT AND&quot;) . AND . import random numList = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;] ranNum = random.randrange(len(numList)) print(ranNum) if ranNum == 2 or ranNum == 5: print(&quot;OR&quot;) else: print(&quot;NOT OR&quot;) . 3 NOT OR .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%203/vocabulary/2023/04/02/unit-3-vocabulary.html",
            "relUrl": "/unit%203/vocabulary/2023/04/02/unit-3-vocabulary.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "PyGame Testing",
            "content": "import pygame import sys # Initialize Pygame pygame.init() # Set up the window window_size = (800, 600) window = pygame.display.set_mode(window_size) pygame.display.set_caption(&quot;Catch the Fish!&quot;) # define colors BLACK = ( 0, 0, 0) WHITE = (255, 255, 255) BLUE = ( 0, 0, 255) GREEN = ( 0, 255, 0) RED = (255, 0, 0) # Set up the variables needed clock = pygame.time.Clock() FPS = 30 score = 0 # The player player_size = 50 player_position = [350, 550] # The fish fish_size = 50 fish_position = [random.randint(0, window_size[0]-fish_size), 0] fish_speed = 5 # The game loop while True: for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() sys.exit() # Move the player # Get keys pressed keys = pygame.key.get_pressed() # Check if left or right arrow is pressed and move the player if keys[pygame.K_LEFT] and player_position[0] &gt; 0: player_position[0] -= 5 if keys[pygame.K_RIGHT] and player_position[0] &lt; window_size[0] - player_size: player_position[0] += 5 # Move the fish if fish_position[1] &gt;= window_size[1]: fish_position[0] = random.randint(0, window_size[0] - fish_size) fish_position[1] = 0 else: fish_position[1] += fish_speed # Check if the player caught the fish if fish_position[1] + fish_size &gt;= player_position[1]: # Check if the fish is in the same x position as the player if fish_position[0] &gt; player_position[0] and fish_position[0] &lt; player_position[0] + player_size or fish_position[0] + fish_size &gt; player_position[0] and fish_position[0] + fish_size &lt; player_position[0] + player_size: score += 1 fish_position[0] = random.randint(0, window_size[0] - fish_size) fish_position[1] = 0 # Draw the window window.fill(BLACK) pygame.draw.rect(window, WHITE, [player_position[0], player_position[1], player_size, player_size]) pygame.draw.rect(window, GREEN, [fish_position[0], fish_position[1], fish_size, fish_size]) # Display the score font = pygame.font.SysFont(&quot;Arial&quot;, 25) text = font.render(&quot;Score: &quot; + str(score), True, WHITE) window.blit(text, [window_size[0]-100, 20]) # Update the screen pygame.display.update() # Tick the clock clock.tick(FPS) . pygame 2.1.2 (SDL 2.0.18, Python 3.10.6) Hello from the pygame community. https://www.pygame.org/contribute.html . NameError Traceback (most recent call last) c: Users etran .vscode fastpages_EthanT _notebooks python_game.ipynb Cell 2 in &lt;cell line: 30&gt;() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; # The fish &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=28&#39;&gt;29&lt;/a&gt; fish_size = 50 &gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; fish_position = [random.randint(0, window_size[0]-fish_size), 0] &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=30&#39;&gt;31&lt;/a&gt; fish_speed = 5 &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=32&#39;&gt;33&lt;/a&gt; # The game loop NameError: name &#39;random&#39; is not defined . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/04/02/python_game.html",
            "relUrl": "/2023/04/02/python_game.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Object-Oriented Programming Hacks",
            "content": "Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . | Add classOf attribute to define year of graduation . | Add setter and getter for classOf | Add dob attribute to define date of birth | This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | Add instance variable for age, make sure if dob changes age changes | Add getter for age, but don&#39;t add/allow setter for age | Update and format tester function to work with changes | . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf, make): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf self._make = make @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def uid(self): return self._uid @uid.setter def uid(self, uid): self._uid = uid def is_uid(self, uid): return self._uid == uid @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string @dob.setter def dob(self, dob): if type(dob) == date: self._dob = dob #classOf @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf # Getter for car make @property def make(self): return self._make # Adding a setter function for make @make.setter def make(self, make): self._make = make @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;classOf&quot; : self.classOf, &quot;make&quot; : self.make } return dict def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result def __str__(self): return json.dumps(self.dictionary) def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob}, classOf={self._classOf}, make={self._make})&#39; def tester(users, uid, psw): result = &quot;&quot; for user in users: if user.uid == uid and user.is_password(psw): print(&quot;* &quot;, end=&quot;&quot;) result = user print(user) return result # Adding a second user if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11) , classOf=1865 , make=&quot;Ford&quot;) u2 = User(name=&#39;Ethan Tran&#39;, uid=&#39;ethan&#39;, password=&#39;ethan123&#39;, dob=date(2007, 5, 19) , classOf=2025 , make=&quot;BMW&quot;) users = [u1, u2] # Output shows a star or &quot;*&quot; due to the tester using the correct password tester(users, u2.uid, &quot;ethan123&quot;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: 1865, &#34;make&#34;: &#34;Ford&#34;} * {&#34;name&#34;: &#34;Ethan Tran&#34;, &#34;uid&#34;: &#34;ethan&#34;, &#34;dob&#34;: &#34;05-19-2007&#34;, &#34;age&#34;: 15, &#34;classOf&#34;: 2025, &#34;make&#34;: &#34;BMW&#34;} JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: 1865, &#34;make&#34;: &#34;Ford&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$PRhIHZBTIUef4gJZ$8d8568942cb27d88636af7a201be31f751afb271fccace59c0b6ab77c78db143&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_classOf&#39;: 1865, &#39;_make&#39;: &#39;Ford&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_make&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;make&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$PRhIHZBTIUef4gJZ$8d8568942cb27d88636af7a201be31f751afb271fccace59c0b6ab77c78db143,dob=1847-02-11, classOf=1865, make=Ford) . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . import json class Car: def __init__(self, make, model, price, year): # Adding instance attributes self._make = make self._model = model self._price = price self._year = year # Add getters and setters for make, model, price, year @property def make(self): return self._make @make.setter def make(self, make): self._make = make @property def model(self): return self._model @model.setter def model(self, model): self._model = model @property def price(self): return self._price @price.setter def price(self, price): self._price = price @property def year(self): return self._year @year.setter def year(self, year): self._year = year #Calculating Depreciation def calculate_depreciation(self, years): depreciation = 0.9**years * self._price return depreciation @property def dictionary(self): dict = { &quot;make&quot; : self.make, &quot;model&quot; : self.model, &quot;price&quot; : self.price, &quot;year&quot; : self.year, } return dict def __str__(self): return json.dumps(self.dictionary) if __name__ == &quot;__main__&quot;: car1 = Car(make=&quot;Lexus&quot;, model=&quot;IS 500&quot;, price=&quot;$58,000&quot;, year=&quot;2022&quot;) print(car1) . {&#34;make&#34;: &#34;Lexus&#34;, &#34;model&#34;: &#34;IS 500&#34;, &#34;price&#34;: &#34;$58,000&#34;, &#34;year&#34;: &#34;2022&#34;} .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/object%20oriented%20programming/obb/2023/04/02/obb-hacks.html",
            "relUrl": "/object%20oriented%20programming/obb/2023/04/02/obb-hacks.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Night at the Museum Trimester 2",
            "content": "My Experience . This trimester&#39;s Night at the Museum was amazing! There were many amazing sites I was able to view, along with other pieces of art from the various other exhibitions at the event. It was gratifying to present my feature and to show my team&#39;s project off to visitors. During the event, we were able to allow people to actually test out our website and describe the behind the scenes &quot;magic,&quot; which was our frontend to backend communication for various features ie. my car search and Taiyo&#39;s comments. . Presentation Photos . These are some images/highlights of the night when I was presenting our project . . Presentation to the teacher . Here is an image of when I was presenting to Mr. Mortensen at Night at the Museum . . Other CSP Groups . Here are two photos of groups that I thought had really fascinating projects - one used an API to display information on various stocks, while the other group featured a website that had many useful tools for students. One of those tools was a notes tracker by Amay Advani. This allowed notes to be saved for specific classes, these notes were then saved into a database in the their group&#39;s backend. . . Notable Fine Arts Pieces . These were some of my favorite art pieces from the event, my favorite would have to be the painting of Ken Block&#39;s &quot;Hoonipigasus&quot; Porsche 911. . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/n@m/final/2023/04/02/night-at-museum.html",
            "relUrl": "/n@m/final/2023/04/02/night-at-museum.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "MCQ Test 3",
            "content": "My Thoughts... . Overall, I believe that I did pretty well on this MCQ. I got 4 questions wrong, and decided to go back and check the answers. This allowed me to rework each of them to understand where I may have messed up in my thinking while taking the MCQ. . This option is incorrect because in Grid II, the robot lands in the square in the middle of the grid facing right. It cannot turn right, but it can turn left. It moves forward up to the middle square of the top row, at which point it is facing up. At this point, it turns right and moves forward to the square in the upper right corner of the grid. At this point, the robot cannot move right, it cannot move left, and it cannot move forward. It thus stays in the REPEAT UNTIL loop forever, since Goal_Reached is never true. . This option is correct. In Grid I, the robot moves forward to the end of the bottom row, turns right twice, moves forward twice, turns right twice, moves forward until the end of the middle row, turns left twice, moves forward twice, turns left twice, and moves forward until Goal_Reached is true. . Incorrect, as the fourth statement assigns the value false to a. The fifth statement assigns the value false to c. . Correct. The first three statements assign values to the variables. The fourth statement assigns the value of (NOT (a OR b)) AND c to a. Since a OR b is true, NOT (a OR b) is false, so (NOT (a OR b)) AND c is false. The fifth statement assigns the value of c AND a to c. Since a is now false, c AND a is false. The last three statements display the values of the variables. . This algorithm will turn on the motor in some cases when the gate is already open, thus, this option is not correct. . Correct. The algorithm continues past the first check if the time is during business hours, the algorithm continues past the second check if the gate sensor is activated, and the algorithm continues past the third check if the gate is not open. Performing the checks in this order will ensure that the gate is opened only under the appropriate conditions. . Incorrect. This code segment leaves the robot four rows above its starting position and two rows above the gray square. . Correct. The loop that repeats four times returns the robot to its starting position. The three lines of code that follow the loop move the robot one row up and leave it facing right. When this has been repeated twice, the robot is in the gray square. . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/finals/trimester%202/collegeboard/2023/04/02/mcq-three.html",
            "relUrl": "/finals/trimester%202/collegeboard/2023/04/02/mcq-three.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "MCQ Test 4 Corrections + Reflection",
            "content": ". Reflection/Overview . Upon reflection, I feel pretty good about my performance on the test, but I recognize that there are some areas where I can improve. Missing 3 questions out of 50 means that I got a score of 47/50, which is still a very good score. However, I want to make sure that I&#39;m doing everything I can to maximize my learning and achieve my academic goals. . As I looked back at the test, I realized that the questions I missed were ones where I wasn&#39;t as confident in my knowledge of the material. In the future, I need to make sure that I&#39;m studying those areas more thoroughly so that I can feel more confident on test day. I also noticed that I rushed through some of the questions and didn&#39;t take enough time to think through my answers. Next time, I&#39;ll try to pace myself better so that I have enough time to carefully consider each question. . Overall, I&#39;m happy with my score on the test, but I know that I can do even better in the future. By identifying my weaknesses and working on them, I&#39;m confident that I&#39;ll continue to improve and reach my goals. I&#39;m also going to talk to my teacher to get some feedback on where I can improve, so that I have a better idea of what I need to focus on in the future. . . For this question, choice A is correct because when a large amount of data is transmitted over the Internet, it is divided into smaller pieces or packets to enable efficient transmission. Each packet contains a portion of the data, as well as a header that contains information about the packet, such as the sender&#39;s and receiver&#39;s IP addresses, the sequence number, and other information needed for routing the packet through the network to its destination. Once the packets arrive at their destination, they are reassembled into the original data. . . Option C is correct because a single high school’s list of student grades is not considered a large set of data. Furthermore, identifying 10 students with the highest grade point averages is not an example of finding patterns. . . Option C is correct because by utilizing 6-bit binary sequences, it is possible to identify 26 or 64 distinct items - while 7-bit binary sequences allow for the identification of 27 or 128 different items. Therefore, incorporating an additional bit in the sequence results in the ability to uniquely identify twice as many items. Option A is incorrect because including an additional binary digit enables the identification of twice as many items, rather than just two more. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cb/mcq%204/2023/04/02/mcq-4.html",
            "relUrl": "/cb/mcq%204/2023/04/02/mcq-4.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 2.3",
            "content": "Unit 2.3 Hacks . Here are my hacks for lesson 2.3 . Notes . Pandas is a popular Python library used for data manipulation and analysis. | Pandas provides a data structure called DataFrame, which is used to store tabular data. | Data analysis using Pandas involves exploring, cleaning, and processing the data to extract meaningful insights. | The ability to process data depends on both the user&#39;s capabilities and the tools they use, which underscores the importance of learning how to use tools like Pandas for data analysis. | One common task in data analysis is combining multiple data sets to extract insights from them. | Another common challenge in data analysis is dealing with incomplete or &quot;dirty&quot; data, which requires cleaning and processing before analysis can be done. | Pandas provides many functions and methods for working with DataFrames, making it a powerful tool for data analysis in Python.Pandas is a popular Python library used for data manipulation and analysis. | Pandas provides a data structure called DataFrame, which is used to store tabular data. | Data analysis using Pandas involves exploring, cleaning, and processing the data to extract meaningful insights. | The ability to process data depends on both the user&#39;s capabilities and the tools they use, which underscores the importance of learning how to use tools like Pandas for data analysis. | One common task in data analysis is combining multiple data sets to extract insights from them. | Another common challenge in data analysis is dealing with incomplete or &quot;dirty&quot; data, which requires cleaning and processing before analysis can be done. | Pandas provides many functions and methods for working with DataFrames, making it a powerful tool for data analysis in Python. | When cleaning data, look for 1. Missing Data Points 2. Invalid Data 3. Inaccurate Data | . Answers to questions . What part of the data set needs to be cleaned? | . There are a few areas that need cleaning:The &quot;Year in School&quot; column has inconsistent values. Some entries have numerical values, while others have text values such as &quot;Junior&quot; and &quot;9th Grade&quot;. To make this column consistent, the text values will need to be converted to numerical values. The &quot;Student ID&quot; column has an entry with the value &quot;nil&quot;, which is likely a mistake or missing data. This entry will need to be cleaned or removed. . From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? | . In terms of when to clean data, a good time to clean data is before analyzing or using it in any meaningful way. It is important to clean data early in the process because &quot;garbage in, garbage out&quot; means that any errors or inaccuracies in the data will propagate throughout the analysis and potentially lead to incorrect conclusions or decisions. . 2.3 College Board Quiz . I scored a 6/6 on this quiz, here are some of my takeaways... . Data can be incomplete or inconsistent, and it is important to be aware of potential errors or discrepancies when analyzing data. . | Data from different sources may need to be merged or combined in order to provide a more complete picture, but this can be challenging if there is no unique identifier to match records. . | Data may be organized differently in different contexts, which can make it difficult to process or compare data. . | Additional data may be needed to answer specific questions or analyze trends in data. . | . Questions . (1) A researcher is analyzing data about students in a school district to determine whether there is a relationship between grade point average and number of absences. The researcher plans on compiling data from several sources to create a record for each student. . Answer choices:The researcher has access to a database with the following information about each student. Last name . First name . Grade level (9, 10, 11, or 12) . Grade point average (on a 0.0 to 4.0 scale) . The researcher also has access to another database with the following information about each student. . First name . Last name . Number of absences from school . Number of late arrivals to school . Upon compiling the data, the researcher identifies a problem due to the fact that neither data source uses a unique ID number for each student. Which of the following best describes the problem caused by the lack of unique ID numbers? . Answer choices: . (A) Students who have the same name may be confused with each other. . (B) Students who have the same grade point average may be confused with each other. . (C) Students who have the same grade level may be confused with each other. . (D) Students who have the same number of absences may be confused with each other. . Correct answer:A&gt; Why? The problem caused by the lack of unique ID numbers is that students who have the same name may be confused with each other. This can lead to inaccurate data analysis as the researcher may mistakenly combine data from two different students who share the same name. . (2) A team of researchers wants to create a program to analyze the amount of pollution reported in roughly 3,000 counties across the United States. The program is intended to combine county data sets and then process the data. Which of the following is most likely to be a challenge in creating the program? . Answer choices:(A) A computer program cannot combine data from different files. (B) Different counties may organize data in different ways. . (C) The number of counties is too large for the program to process. . (D) The total number of rows of data is too large for the program to process. . Correct answer:B&gt; Why? The most likely challenge in creating the program is that different counties may organize data in different ways. This can make it difficult to combine the data and process it accurately. . (3) A student is creating a Web site that is intended to display information about a city based on a city name that a user enters in a text field. Which of the following are likely to be challenges associated with processing city names that users might provide as input? . Select two answers. . (A) Users might attempt to use the Web site to search for multiple cities. . (B) Users might enter abbreviations for the names of cities. . (C) Users might misspell the name of the city. . (D) Users might be slow at typing a city name in the text field. . Correct answers:B and C&gt; Why? The likely challenges associated with processing city names that users might provide as input are that users might enter abbreviations for the names of cities, and users might misspell the name of the city. This can make it difficult to accurately retrieve information about the intended city. . (4) A database of information about shows at a concert venue contains the following information. . Name of artist performing at the show . Date of show . Total dollar amount of all tickets sold . Which of the following additional pieces of information would be most useful in determining the artist with the greatest attendance during a particular month? . Answer choices:(A) Average ticket price (B) Length of the show in minutes . (C) Start time of the show . (D) Total dollar amount of food and drinks sold during the show . Correct answer:A&gt; Why? The additional piece of information that would be most useful in determining the artist with the greatest attendance during a particular month is the average ticket price. This information can help to determine the number of tickets sold for each artist, which can be used to compare attendance across artists. . (5) A camera mounted on the dashboard of a car captures an image of the view from the driver’s seat every second. Each image is stored as data. Along with each image, the camera also captures and stores the car’s speed, the date and time, and the car’s GPS location as metadata. Which of the following can best be determined using only the data and none of the metadata? . Answer choices:(A) The average number of hours per day that the car is in use (B) The car’s average speed on a particular day . (C) The distance the car traveled on a particular day . (D) The number of bicycles the car passed on a particular day . Correct answer:D&gt; Why? The number of bicycles the car passed on a particular day can best be determined using only the data and none of the metadata. This can be done by analyzing the images captured by the camera and counting the number of bicycles in each image. . (6) A teacher sends students an anonymous survey in order to learn more about the students’ work habits. The survey contains the following questions. . On average, how long does homework take you each night (in minutes)? . On average, how long do you study for each test (in minutes)? . Do you enjoy the subject material of this class (yes or no)? . Which of the following questions about the students who responded to the survey can the teacher answer by analyzing the survey results? . I. Do students who enjoy the subject material tend to spend more time on homework each night than the other students do? . II. Do students who spend more time on homework each night tend to spend less time studying for tests than the other students do? . III. Do students who spend more time studying for tests tend to earn higher grades in the class than the other students do? . Answer choices:(A) I only (B) III only . (C) I and II . (D) I and III . Correct answer:C Why? The teacher can answer the questions &quot;Do students who enjoy the subject material tend to spend more time on homework each night than the other students do?&quot; and &quot;Do students who spend more time on homework each night tend to spend less time studying for tests than the other students do?&quot; by analyzing the survey results. However, the teacher cannot answer the question &quot;Do students who spend more time studying for tests tend to earn higher grades in the class than the other students do?&quot; as this information was not collected in the survey. . Implementation of a data set into PBl project . The code below allows me to utilize a csv file from the US government. This file holds data for various pieces of information regarding cars from make, model, type of fuel, and more. This can be implemented into my project, as it allows me to show a variety of different information regarding cars. This data set useful as the premise of my PBL is entirely information about cars. . import pandas as pd fuel_economy_df = pd.read_csv(&quot;/home/etran/vscode/fastpages_EthanT/_notebooks/files/vehicles.csv&quot;) # Show the first 100 rows of cars and their data fuel_economy_df[[&#39;make&#39;, &#39;model&#39;, &#39;fuelType&#39;, &#39;year&#39;, &#39;cylinders&#39;, &#39;VClass&#39;, &#39;drive&#39;]].head(100) . /tmp/ipykernel_1721/1459572364.py:3: DtypeWarning: Columns (70,71,72,73,74,76,79) have mixed types. Specify dtype option on import or set low_memory=False. fuel_economy_df = pd.read_csv(&#34;/home/etran/vscode/fastpages_EthanT/_notebooks/files/vehicles.csv&#34;) . make model fuelType year cylinders VClass drive . 0 Alfa Romeo | Spider Veloce 2000 | Regular | 1985 | 4.0 | Two Seaters | Rear-Wheel Drive | . 1 Ferrari | Testarossa | Regular | 1985 | 12.0 | Two Seaters | Rear-Wheel Drive | . 2 Dodge | Charger | Regular | 1985 | 4.0 | Subcompact Cars | Front-Wheel Drive | . 3 Dodge | B150/B250 Wagon 2WD | Regular | 1985 | 8.0 | Vans | Rear-Wheel Drive | . 4 Subaru | Legacy AWD Turbo | Premium | 1993 | 4.0 | Compact Cars | 4-Wheel or All-Wheel Drive | . ... ... | ... | ... | ... | ... | ... | ... | . 95 Pontiac | Grand Prix | Regular | 1993 | 6.0 | Midsize Cars | Front-Wheel Drive | . 96 Pontiac | Grand Prix | Regular | 1993 | 6.0 | Midsize Cars | Front-Wheel Drive | . 97 Pontiac | Grand Prix | Regular | 1993 | 6.0 | Midsize Cars | Front-Wheel Drive | . 98 Pontiac | Grand Prix | Regular | 1993 | 6.0 | Midsize Cars | Front-Wheel Drive | . 99 Rolls-Royce | Brooklands/Brklnds L | Premium | 1993 | 8.0 | Midsize Cars | Rear-Wheel Drive | . 100 rows × 7 columns . num_rows, num_cols = fuel_economy_df.shape # Get the total number of rows and columns in the dataset print(f&quot;There are {num_rows} rows and {num_cols} columns in the dataset.&quot;) . There are 46024 rows and 83 columns in the dataset. . top_makes = fuel_economy_df[&#39;make&#39;].value_counts().nlargest(10) # Get the top 10 makes of vehicles by number of models in the dataset print(top_makes) . Chevrolet 4336 Ford 3744 GMC 2724 Dodge 2678 Toyota 2330 BMW 2315 Mercedes-Benz 1829 Nissan 1619 Porsche 1390 Volkswagen 1286 Name: make, dtype: int64 . fuel_cyl_counts = fuel_economy_df.groupby([&#39;fuelType&#39;, &#39;cylinders&#39;]).size() # Get the number of vehicles by fuel type and cylinder count print(fuel_cyl_counts) . fuelType cylinders CNG 4.0 21 6.0 3 8.0 36 Diesel 4.0 463 5.0 26 6.0 290 8.0 471 10.0 4 Gasoline or E85 4.0 149 6.0 438 8.0 800 Gasoline or natural gas 4.0 5 6.0 2 8.0 13 Gasoline or propane 8.0 8 Midgrade 6.0 9 8.0 146 Premium 2.0 22 3.0 108 4.0 3649 5.0 308 6.0 5308 8.0 3576 10.0 184 12.0 653 16.0 20 Premium Gas or Electricity 2.0 12 3.0 3 4.0 12 6.0 16 8.0 12 Premium and Electricity 3.0 14 4.0 87 6.0 37 8.0 15 Premium or E85 4.0 33 6.0 56 8.0 16 12.0 22 Regular 2.0 29 3.0 260 4.0 13427 5.0 442 6.0 9532 8.0 4664 10.0 8 12.0 40 Regular Gas and Electricity 4.0 73 6.0 11 Regular Gas or Electricity 4.0 4 dtype: int64 .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%202/sections%203/hacks/cb/2023/04/02/hacks-2.3.html",
            "relUrl": "/unit%202/sections%203/hacks/cb/2023/04/02/hacks-2.3.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 2.2",
            "content": "Notes/Answers to questions . What are commands you use in terminal to access files? | . cd (change directory) to navigate to a specific directory | ls to list the contents of the current directory | rm to remove a file | mv to move or rename a file | cat to display the contents of a file | What are the command you use in Windows terminal to access files? | . cd to navigate to a specific directory | dir to list the contents of the current directory | type to display the contents of a file | mkdir to create a new directory | del to remove a file | What are some of the major differences? | . The commands to access files are different between Terminal and Windows Terminal. Terminal is a command-line interface that is native to Unix-based systems such as Linux and macOS, while Windows Terminal is a command-line interface that is native to Windows. As a result, the commands used in Terminal are based on Unix commands, while the commands used in Windows Terminal are based on Windows commands. . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | . The path to an image file is critical when working with images because it determines where the image is stored on the system and how it is accessed by software applications. If the path is incorrect or the image cannot be found, this can lead to errors or issues with loading or processing the image. . How does the meta data source and label relate to Unit 5 topics? | . In Unit 5, the concept of metadata is introduced as data that describes other data. In the context of images, metadata can provide additional information about the image file, such as the date it was created, the camera used to take the photo, or the location where the photo was taken. This can be useful in data analysis or machine learning tasks, as the metadata can provide additional context for the image data. . Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . IPython is an interactive shell for Python that provides a number of advanced features, such as tab completion, syntax highlighting, and the ability to execute code from the command line. In Jupyter Notebooks, IPython can be used to create rich, interactive data visualizations using libraries such as Pandas and Matplotlib. This allows users to explore and analyze data in a more interactive and dynamic way than is possible with traditional coding environments. . Where have you been a consumer of buffering? | . As a consumer, I have experienced buffering in a variety of contexts, such as when I am streaming videos or music online, downloading large files, or transferring data between devices. I am also aware that buffering is commonly used in computer programming, where it can be used to optimize I/O operations. . From your consumer experience, what effects have you experienced from buffering? | . From my consumer experience, I have noticed that when buffering is working properly, I may not notice any significant effects. However, if the buffering is not optimized or there is a large amount of data being buffered, I have experienced lag or delays in loading content. This can be frustrating and can result in a poor user experience. . How do these effects apply to images? | . When working with images, buffering can be used to optimize I/O operations and improve performance. However, if the image file is very large or there are multiple images being loaded at once, buffering can result in lag or delays in displaying the images. This can impact the user experience, particularly if the images are being used for visual or artistic purposes. To mitigate the impact of buffering on image display, it is important to optimize the file size and resolution of the images and to use efficient buffering techniques. . Does this code seem like a series of steps are being performed? | . Yes, the code performs a series of steps to prepare a list of images, set properties of the image, scale them, convert them to Base64 and create a grey scale representation of the image. . Describe Grey Scale algorithm in English or Pseudo code? | . The Grey Scale algorithm converts each pixel of the image from RGB to grey scale by averaging the pixel values of red, green, and blue channels and then assigning this average value to all three channels. . Describe scale image? What is before and after on pixels in three images? | . The scale_image function scales the image to a base width of 320 pixels while maintaining the aspect ratio of the image. The before image is the original image, and the after image is the scaled image. . Is scale image a type of compression? If so, line it up with College Board terms described? | . Scale image can be considered a type of lossy compression, as it reduces the number of pixels in an image by resizing it, which can lead to a loss of detail and information. . 2.2 College Board Quiz . I scored a 3/3 on this quiz, here are some of my takeaways... . Lossless compression algorithms guarantee the reconstruction of original data, while lossy compression algorithms do not. This is because lossless compression algorithms reduce the size of data without losing any information, while lossy compression algorithms remove some information that is considered less important, resulting in some loss of information and quality. . | Lossy compression algorithms are typically more effective than lossless compression algorithms at reducing the size of data, resulting in faster transmission times. However, lossless compression algorithms are better for situations where it is necessary to reconstruct the original data without any loss of information. . | Lossless compression of video files is typically less effective than lossy compression because video files contain a lot of information, so it can result in larger file sizes. . | . Questions . (1) Which of the following is an advantage of a lossless compression algorithm over a lossy compression algorithm? . Answer choices:(A) A lossless compression algorithm can guarantee that compressed information is kept secure, while a lossy compression algorithm cannot. (B) A lossless compression algorithm can guarantee reconstruction of original data, while a lossy compression algorithm cannot. . (C) A lossless compression algorithm typically allows for faster transmission speeds than does a lossy compression algorithm. . (D) A lossless compression algorithm typically provides a greater reduction in the number of bits stored or transmitted than does a lossy compression algorithm. . Correct answer:B&gt; Why? A lossless compression algorithm can guarantee reconstruction of original data, while a lossy compression algorithm cannot. Lossless compression algorithms reduce the size of data without losing any information, so the original data can be reconstructed exactly. Lossy compression algorithms, on the other hand, reduce the size of data by removing some information that is considered less important, which can result in some loss of information and quality. . (2) A user wants to save a data file on an online storage site. The user wants to reduce the size of the file, if possible, and wants to be able to completely restore the file to its original version. Which of the following actions best supports the user’s needs? . Answer choices:(A) Compressing the file using a lossless compression algorithm before uploading it (B) Compressing the file using a lossy compression algorithm before uploading it . (C) Compressing the file using both lossy and lossless compression algorithms before uploading it . (D) Uploading the original file without using any compression algorithm . Correct answer:A&gt; Why? Compressing the file using a lossless compression algorithm before uploading it. This will reduce the size of the file without losing any information, so the user can restore the original file exactly as it was before compression. . (3) A programmer is developing software for a social media platform. The programmer is planning to use compression when users send attachments to other users. Which of the following is a true statement about the use of compression? . Answer choices:(A) Lossless compression of video files will generally save more space than lossy compression of video files. (B) Lossless compression of an image file will generally result in a file that is equal in size to the original file. . (C) Lossy compression of an image file generally provides a greater reduction in transmission time than lossless compression does. . (D) Sound clips compressed with lossy compression for storage on the platform can be restored to their original quality when they are played. . Correct answer:C Lossy compression of an image file generally provides a greater reduction in transmission time than lossless compression does. Lossy compression algorithms are typically more effective than lossless compression algorithms at reducing the size of data, so they can result in faster transmission times. Lossless compression of video files is typically less effective than lossy compression because video files contain a lot of information, so it can result in larger file sizes. . Numpy Grey &amp; RGB Scale Treatment . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Unknown&quot;, &#39;label&#39;: &quot;Odd Smile&quot;, &#39;file&#39;: &quot;odd_smile.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale and Color Base64 representations of Image def image_management_add_html_color(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale image[&#39;red_data&#39;] = [] image[&#39;green_data&#39;] = [] image[&#39;blue_data&#39;] = [] # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: gray_pixel = (average, average, average, pixel[3]) # PNG format else: gray_pixel = (average, average, average) image[&#39;gray_data&#39;].append(gray_pixel) image[&#39;red_data&#39;].append((pixel[0], 0, 0)) image[&#39;green_data&#39;].append((0, pixel[1], 0)) image[&#39;blue_data&#39;].append((0, 0, pixel[2])) img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) img.putdata(image[&#39;red_data&#39;]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) img.putdata(image[&#39;green_data&#39;]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) img.putdata(image[&#39;blue_data&#39;]) image[&#39;html_blue&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print(&quot; red image &quot;) image_management_add_html_color(image) display(HTML(image[&#39;html_red&#39;])) print(&quot; green image &quot;) display(HTML(image[&#39;html_green&#39;])) print(&quot; blue image &quot;) display(HTML(image[&#39;html_blue&#39;])) print() . - meta data -- Odd Smile Unknown PNG RGBA Original size: (651, 621) Scaled size: (320, 305) -- original image -- . grey image - . red image . green image . blue image . . from PIL import Image from IPython.display import display def scale_image(img): baseWidth = 150 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) red = Image.open(&#39;/home/etran/vscode/fastpages_EthanT/_notebooks/images/redcube.png&#39;) red = scale_image(red) cano = Image.open(&#39;/home/etran/vscode/fastpages_EthanT/_notebooks/images/oahu_volcano.png&#39;) cano = scale_image(cano) display(red) display(cano) . Data Compression Hacks . When it comes to data compression, the image of a pure red cube is typically more suited for lossless compression, while the image of a volcano is more likely to be compressed using lossy compression. ## Red Cube The red cube image is less complex, with minimal variation in color and texture. As a result, it can be compressed without any loss of data. Lossless compression algorithms can efficiently identify and remove any redundant data without compromising the quality of the image. Consequently, a lossless compression algorithm is more likely to be used for compressing the red cube image. ## Volcano On the other hand, the image of a volcano contains much more complexity, such as variations in color, texture, and detail. When compressing this image using lossy compression algorithms, some of this complexity will be lost in order to achieve a smaller file size. This loss of information can result in a lower quality image compared to the original. However, lossy compression algorithms are often used for photographic images because they can achieve much smaller file sizes than lossless compression algorithms, while still maintaining a high enough quality for most purposes. Therefore, the image of the volcano is more likely to be compressed using a lossy compression algorithm. . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%202/sections%202/hacks/cb/2023/04/02/hacks-2.2.html",
            "relUrl": "/unit%202/sections%202/hacks/cb/2023/04/02/hacks-2.2.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Feature Outline",
            "content": "Overview . The feature that I will use from our team’s project for the Create Performance task is the overall favoriting system of vehicles on our website. | My feature will allow users that are signed in to click a heart right beside a desired car or cars | Once they favorite a car(s) from our site’s inventory or optimal car quiz, they will be able to click the profile tab and view the cars in which they have favorited. | All of the cars that have been favorited will be stored in a database within the backend, which we plan to set up on AWS (Amazon Web Services) via a Flask server. | This feature will have use between Mati’s login system, Taiyo’s inventory system, and Luna’s “Optimal Car Quiz” | . . Row 1 - Program Purpose and Function: . Purpose: The purpose of my program is to allow users to keep track of the cars that they like the most, or fits their needs the best | Function: The function of my feature is to let users favorite cars and be able to view them via their personal profile - clicking a heart that is displayed on the top left of each car’s profile will enable this feature. | Input: The sole input required for my feature is the mouse click of the user, which they will use to favorite a given car | Output: The output of my program is the display of a given user’s favorite car or cars, which they will input through manually clicking the heart on the top left of the car’s profile. | . Row 2 - Data Abstraction: . First code segment: The first program code segment will show a user’s favorited cars within a database (I will implement the database in the future) | Second code segment: The data in the database will be used for display under our site’s “profile” page/tab. On this page, users will be able to view their unique collection of favorite cars. | Variable: The name of the variable in the list will be “favoritesCollection” | Representation: The data in the list represents the given user’s collection of favorite cars | . Row 3 - Managing Complexity: . Lists: Each user’s favorite cars will be stored in a list. These lists will be stored, managed, and retrieved from our database | Explanation: This data will be under the “favoritesCollection” variable. Without these lists, the program would not function properly, as each user&#39;s collection of favorite cars would not be properly stored - thus, the data will not be properly displayed on our website. | . Row 4 - Procedural Abstraction: . Procedure: A procedure named “add_favorite_car” will take action which takes three parameters: username, car, and the “favoritesCollection” list. The procedure appends the car to the favoritesCollection and prints a confirmation message indicating that the car was added to the user&#39;s favorite cars list. | Contribution: The procedure “add_favorite_car” contributes to the overall functionality of the program by allowing the user to add cars to their favorite cars list. This information can then be stored in a database or used for other purposes in the program. | . Row 5 - Algorithm Implementation: . This is my plan for the algorithm I plan to code and implement into my team’s website. . Iteration:The algorithm will obtain a given user’s username and their associated list of favorite cars from the database. A variable “i” will be initialized to keep track of the current car number being displayed. A for loop will then be used to iterate through each car in the favorite cars list. | Selection: An if/else statement will be used to determine if the list is empty or not. If the list is empty, print a message indicating that the user has no favorite cars. | Sequencing: Within the for loop, sequencing will be used to print the car number (i) and car name. | . Row 6 - Testing: . Call 1: Condition tested = The favorite cars list associated with &quot;user1&quot; is not empty. Result = The car names and their respective numbers are displayed for &quot;user1&quot;. | Call 2: Condition tested = The favorite cars list associated with &quot;user2&quot; is empty. Result = A message is printed indicating that &quot;user2&quot; has no favorite cars. | Explanation: The condition being tested by each call is whether the favorite cars list associated with the given username is empty or not. The result of each call is either the display of the user&#39;s favorite cars and their respective numbers or a message indicating that the user has no favorite cars. | . Video Demonstration Considerations . My video will have to show my codes input, output, and overall program functionality. This means that my code must function as intended without any mistakes or fatal errors. In my video, I will have to be logged in to an account on our website, which is a part of Mati&#39;s feature. I will need to show my feature by favoriting cars from our site&#39;s inventory and from my &quot;Optimal Car Quiz&quot; results - Luna&#39;s feature. To show that my program properly functions, I will need to go to my personal profile and show the display of my favorite cars based upon my input. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/feature/cb/outline/2023/04/02/feature-outline.html",
            "relUrl": "/feature/cb/outline/2023/04/02/feature-outline.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Notes Sections 8-10",
            "content": "1) Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . 2) Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . 3) Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop . For list operations, write expressions that use list indexing and list procedures | For algorithms involving elements of a list, write iteration statements to traverse a list | For list operations, evaluate expression that use list indexing and list procedures | For algorithms involving elements of a list, determine the result of an algorithm that includes list traversals | List procedures are implemented in accordance with the syntax rules of the programming language | Iteration Statements can be used to traverse a list . | AP EXAM provides pseudocode for loops . | Knowledge of existing algorithms that use iteration can help in constructing new algorithms | . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] potentialMin = int(nums.pop()) while len(nums) != 0: newNum = int(nums.pop()) if newNum &lt; potentialMin: potentialMin = newNum print(potentialMin, &quot;is the minimum value.&quot;) . 10 is the minimum value. . fruit = [&quot;apple&quot;, &quot;orange&quot;, &quot;strawberry&quot;, &quot;pear&quot;] i = 0 for x in fruit: print(fruit[i]) i += 1 . apple orange strawberry pear .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/hacks/turkey/tree/notes/2023/04/02/Unit-8-10-notes.html",
            "relUrl": "/hacks/turkey/tree/notes/2023/04/02/Unit-8-10-notes.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Hacks Sections 5-7",
            "content": "Notes . Boolean: A denoting a system of algebraic notation used to represent logical arguments | Relational Operators: The mathematical relationship shared between two given variables. Determines whether a statement is true or false based on the output. | Conditionals: Allow the expression of an algorithms that utilize selection to occur without the use of a programming language. | Conditional Statement: A statement that affects the sequence of control by executing certain statements depending on the value of a boolean. | . Unit 3.5 Hacks . Explain in your own words what each logical operator does NOT: Outputs the opposite of the given data and is typically used for true or false statements - has no effect on the variable. AND: Evaluates two separate conditions and determines if they are all met. OR: Checks for if only one condition is met. . | Code your own scenario that makes sense for each logical operator . | . Tru = True equals = &quot;=&quot; opposite = not(Tru) print(opposite) . False . fun = &quot;fun&quot; awesome = fun if fun and awesome == &quot;fun&quot;: print(&quot;AND&quot;) else: print(&quot;NOT AND&quot;) . AND . import random numList = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;] ranNum = random.randrange(len(numList)) print(ranNum) if ranNum == 2 or ranNum == 5: print(&quot;OR&quot;) else: print(&quot;NOT OR&quot;) . 2 OR . Unit 3.6 Hacks . 1 point for defining all the key terms in your own words. 0.5 points if you use examples that show you truly understand it. | 1 point for writing a program that uses binary conditional logic. 0.5 points if it is original and shows complexity | . 1) Selection: A construct in which the code will only run if a given condition is met. . Example: If an answer is true, then the program will run 2) Algorithm: A procedure utilized for completing mathematical operations or problem solving. | Example: An algorithm that takes in the correct and incorrect (overall points) of a test/quiz, that then displays the users&#39; score. 3) Conditional statement: When a program only runs if a set of conditions are met. | Example: a) If the basketball is not flat, the game will proceed. b) If the basketball is not broken, then the game will be able to continue. | . firstNum = int(input(&quot;Input your first number.&quot;)) secondNum = int(input(&quot;Input your second number.&quot;)) conditional = input(&quot;AND, OR, XOR?&quot;).lower() if conditional == &quot;and&quot;: print(&quot;Selection:&quot; , &quot;AND&quot;, firstNum, &quot;&amp;&quot;, secondNum, &quot;=&quot;, firstNum &amp; secondNum) elif conditional ==&quot;or&quot;: print(&quot;Selection:&quot; , &quot;OR &quot;, firstNum, &quot;|&quot;, secondNum, &quot;=&quot;, firstNum | secondNum) elif conditional ==&quot;xor&quot;: print(&quot;Selection:&quot; , &quot;XOR&quot;, firstNum, &quot;^&quot;, secondNum, &quot;=&quot;, firstNum ^ secondNum) else: print(&quot;Error&quot;) . Selection: AND 5 &amp; 10 = 0 . . color = &quot;orange&quot; item = &quot;fruit&quot; if color == &quot;orange&quot;: print(&quot;Right color, wrong item!&quot;) else: color != &quot;orange&quot; , item == &quot;fruit&quot; print(&quot;Wrong color, right item!&quot;) if color ==&quot;green&quot;: print(&quot;Wrong color, wrong item!&quot;) else: item != &quot;fruit&quot; , color != &quot;orange&quot; print(&quot;Right item, right color!&quot;) print(color) . Right color, wrong item! Right item, right color! orange . . Temperature = 85 Cloudy = True if Temperature &gt; 85: if Cloudy == True: print(&quot;Hot and cloudy!&quot;) elif Cloudy == False: print(&quot;Hot, but not cloudy!&quot;) elif Temperature &lt; 80: if Cloudy == True: print(&quot;Neither hot nor cloudy!&quot;) elif Cloudy == False: print(&quot;Neither hot nor cloudy!&quot;) . . if spice &gt; 1000: if tongue == &quot;strong!&quot;: print(&quot;Not spicy!&quot;) elif milk == &quot;present&quot;: print(&quot;Not spicy!&quot;) elif tongue == &quot;weak&quot;: print(&quot;Spicy!&quot;) else: print(&quot;Not spicy at all!&quot;) . Create a piece of code that displays four statements instead of three. Try to do more if you can. . make = &quot;BMW&quot; model = &quot;M4 Competition&quot; year = &quot;2022&quot; if make == &quot;BMW&quot;: print(make) if model == &quot;M4 Competition&quot;: print(model) if year == &quot;2022&quot;: print(year) print(&quot;Nice car!&quot;) . BMW M4 Competition 2022 Nice car! . Make piece of code that gives three different recommendations for possible classes to take at a school based on two different conditions. These conditions could be if the student likes STEM or not. . STEM = True MISC = True if STEM: print(&quot;Algebra, AP CSP, AP Biology&quot;) elif PE: print(&quot;Art, Racket sports, Photography&quot;) else: print(&quot;PE&quot;) . Algebra, AP CSP, AP Biology .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/hacks/turkey/post%20tree/notes/2023/04/02/Section_5_7_Hacks.html",
            "relUrl": "/hacks/turkey/post%20tree/notes/2023/04/02/Section_5_7_Hacks.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Hacks Unit 3 Sections 9-11",
            "content": "Notes . 1) Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm This may allow for the coding process to be more efficient and effective . 2) Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration Algorithms with selection only go through certain functions if certain things are true or false . 3) Why use algorithms? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . Hacks 3.9.1 . 1) Why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? . It is vital to know that algorithms that appear different are capable of performing the same functions, and that algorithms that look the same may have different results. This is because it allows for creativity when coding, leading to finding new or different ways of solving the same issue(s). | . 2) For the converted conditional to boolean conversion . isSunny = True isRainy = False if isSunny == True: print(&quot;No umbrella necessary!&quot;) else: if isRainy == True: print(&quot;Might want an umbrella!&quot;) else: print(&quot;No umbrella necessary!&quot;) . No umbrella necessary! . isSunny = False isRainy = True # setting variables here (same as above to make comparison easier) puddles = not(isSunny) and isRainy if isRainy == False: print(&quot;Puddles!&quot;) if isSunny == True: print(&quot;No puddles!&quot;) . Hacks 3.9.2 . Develop your own complex algorithm using a flowchart and natural language, then code it! | Requirements: | Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . . 1) Once the code starts, the starting amount of money is set to $10. . 2) The variable, spendMoney, is set to True. . 3) While spendMoney remains true, $1 is deducted from the money variable. . 4) Once the variable, money, reaches a value of 0, spendMoney is set to False and the string, &quot;You&#39;re out of money!&quot; is printed. . 5) End . money = 10 spendMoney = True while(spendMoney == True): money -= 1 if money == 0: spendMoney == False print(&quot;You&#39;re out of money!&quot;) . You&#39;re out of money! . Hacks 3.9.3 . Fix the number guessing game | . 1) Make a flow chart for the algorithm number guessing game . 2) Make a function that gets the user guess . 3) Modify the existing search function to give more encouraging feedback . . import random #sets variables for the game num_guesses = 0 user_guess = -1 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(0,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 0 and 100.&quot;) print(number) #Write a function that gets a guess from the user using input() def guess(): num = input(&quot;Input your guess&quot;) #add something here return num #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;Too low, try again! :)&quot;) #change this lower_bound = guess return lower_bound, upper_bound elif int(guess) &gt; int(number): print(&quot;Too high, try again! :D&quot;) #change this upper_bound = guess return lower_bound, upper_bound else: upper_bound, lower_bound = guess, guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 0 and 100. 92 You guessed 10. Too low, try again! :) Guess a number between 10 and 100. You guessed 99. Too high, try again! :D Guess a number between 10 and 99. You guessed 92. You guessed the number in 3 guesses! . Hacks 3.11 . 1) calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 92, 43, 74, 66, 30, 12, 1 7, 13, 96, 111, 33, 84, 60 . Answer: Below . . 2) Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? Set 1: 80, Set 2: 74, Set 3: 96 . Answer: Set 1: 80, Set 2: 74, Set 3: 96 . . 3) Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . Answer: C . . numListOne = [12,14,44,57,79,80,99] numListTwo = [92,43,74,66,30,12,1] numListThree = [7,13,96,111,33,84,60] numLists = [numListOne, numListTwo, numListThree] for x in range(len(numLists)): numLists[x].sort() middle = int(len(numLists[x])/2) print(&quot;Middle Index of List #&quot;,x+1,&quot;is&quot;,numLists[x][middle]) . Middle Index of List # 1 is 57 Middle Index of List # 2 is 43 Middle Index of List # 3 is 60 .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%203/sections%209-11/notes%20hacks/2023/04/02/Section-9_11_Hacks.html",
            "relUrl": "/unit%203/sections%209-11/notes%20hacks/2023/04/02/Section-9_11_Hacks.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Performance Task 1",
            "content": "Submission 1 . My Scoring Table (1st Comment) . | College Board Scoring Guide . | . My Score: 5/6 . College Board&#39;s Score: 4/6 . Reflection . Discrepancies: In terms of scoring, I had given this submission a total score of 5/6, while College Board graded it a 4/6. Both College Board and myself agreed upon a lack of managing complexity. Where I was mistaken was when I was grading the program purpose and function. For the criteria of the written portion, I had thought that the submission checked all of the boxes. College Board took a point off due to a lack of actually explaining the purpose of the program - rather the submission only explained the function. . What my program will need: My program will need to meet all of the criteria, leaving no possibilities of mistake. This is due to the fact that even if a single point is marked off, then the entire submission will be graded a 0. For example, Submission 1 was missing the explanation of the purpose of their program and program management that was not as efficient as College Board had wanted - resulting in an F/Fail. . Why the submission may have failed: The submission may have failed because College Board took a point off due to a lack of actually explaining the purpose of the program - rather the submission only explained the function. Additionally, the use of program management was lackluster, which also invoked a 0/1 from College Board. . Submission 2 . My Scoring Table (2nd Comment) | College Board Scoring Guide | . My Score: 6/6 . College Board&#39;s Score: 6/6 . Discrepancies: There were no differences between the score College Board gave and I gave. We each graded the submission 6/6. This made sense, as this submission followed each and every one of the requirements from the rubric. . What my program will need: I would need to follow all of the criteria on the rubric provided by College Board just as in second submission. The submission features a lot of detail in the answers of the written portion, perhaps there was more detail than was asked for/necessary. This is good to keep in mind as I will make sure to be very precise and detailed in my answers for the actual AP Test. . Why the submission did not fail: This submission met each and every criteria as well as additional information, leaving no door open for failure. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/performance%20task/1/2023/04/02/Performance-Task-1.html",
            "relUrl": "/performance%20task/1/2023/04/02/Performance-Task-1.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "MCQ",
            "content": "Review . To be quite honest, I was suprised yet not suprised that I recieved a score of 50/50 on MCQ #2. The reason behind this is because as I went through the test, I made sure to take my time for each and every problem and write out my thinking in my notebook. The overall test took me up till the end of the day on January 30th, just a day before the entire test was due. Furthermore, I made sure to look over the test questions with my classmate, Luna Iwazaki, during class time. This allowed me to get a second point of view other than my own when going through these problems. Finally, in terms of the concepts from the test, when I was confused on them I made sure to go back and watch the videos provided by College Board. These videos were essential in helping me build a foundation to answer these problems - though some of them were educated guesses, it appears that they were all correct. . . As I got a perfect score, I will go over the few problems that I had guessed my answers . Problem 2 . For this problem, I had figured out that answers &quot;a&quot; and &quot;b&quot; were not correct. From here, I had to guess between answers &quot;c&quot; and &quot;d.&quot; I ended up picking answer &quot;c,&quot; which ended up being correct as moving the statement from line 5 between lines 2 and 3 would allow the procedure to properly function. From my research, I found that it would be beneficial to move line 5 between lines 2 and three as initializing count to 0 would avoid any error in the program. It initializes the variable to a known value before the loop starts. This is necessary because the count variable is used to track the number of times the value &quot;val&quot; appears in the list myList. If count is not initialized to 0, its value will be undefined | . . Problem 12 . For this question, I had figured that answer &quot;b&quot; must have been the only right choice. This answer I consider to be a guess because though on the scratch sheet of paper I used I marked this question as having the answer &quot;b,&quot; I wrote a question mark next to it. The reason behind this was because though I figured that the rest of the answers were not correct, I could not explain why &quot;b&quot; was the only option. Now, I know that &quot;b&quot; is the answer because it provides two events in which the elevator would require movement - either from floor 1 moving up to floor 2 or vice versa. | . . Problem 50 . This problem was tricky, my answer was not an educated guess as for the previous two, but rather a completely random guess. I had tried to go over the College Board material in terms of the ASCII characters with hexidecimals, but could not quite grasp the concept - my guess was quite lucky to say the least. | . . Notes + My Explanation . ASCII code is code or decimal numbers representing text | ASCII encodes characters into binary data consisting of seven bits | In ASCII character encoding, each character is represented by a unique number between 0 and 127 | To convert from decimal to hexadecimal, you divide the decimal number by 16 and keep track of the remainders | The first remainder (when divided by 16) is the right-most digit in the hexadecimal representation, the second remainder is the next digit to the left, and so on, until you reach the quotient of 0. | 86/16 = 5, remainder = 6 | Thus, hexadecimal representation of 86 is 56 (5 &amp; 6) | This means the letter from decimal (base 10) 86 is equal to the (base 16) 56, which is &quot;V.&quot; | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cb/2023/04/02/MCQ-Review-2.html",
            "relUrl": "/cb/2023/04/02/MCQ-Review-2.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Hacks Sections 12-13",
            "content": "Notes . Procedures: A procedure is a block of code that performs a particular task. It can contain variables, constants, data structures, and other programming constructs. Procedures are also known as subroutines, functions, methods, or routines. They are used to break up large programs into smaller, more manageable pieces. . Parameters: Parameters are values that are passed to a procedure or function. They are used to customize the behavior of the procedure or function and can be used to modify its input and output. . Return Values: Return values are values that are returned from a procedure or function. They can be used to indicate the success or failure of a procedure or function, as well as return a value or set of values. . Output Parameters: Output parameters are values that are passed out of a procedure or function. They are used to return values from a procedure or function and can be used to modify its output. . Section 3.12 Hacks . 1. Define procedure and parameter in your own words &amp; Define Return Values and Output Parameters in your own words . a) Procedure: A block of code that is created to perform a given task - essentially a function. . b) Parameter: A variable that is utilized in a function that enables data to be imported into said function. . 2. Paste a screenshot of completion of the quiz . . 3. Define Return Values and Output Parameters in your own words . a) Return Values: A return value is a value that is returned by a function or method to the calling code after it has finished executing. It is the value that is passed back to the calling code once the function or method has finished its job. . b) Output Parameters: Output parameters are variables that are passed by reference to a function or method and are used to return a value to the calling code. They are typically used to return multiple values from a single function or method. . Code a procedure that finds the square root of any given number. (make sure to call and return the function) . import math userNum = float(input()) def sqrt(userNum): return userNum sqrt = math.sqrt(userNum) print(&quot;Input:&quot; , userNum) print(&quot;Square root:&quot; , int(sqrt)) . Input: 225.0 Square root: 15 . import math userNum = float(input()) sqrt = math.sqrt(userNum) print(&quot;Input:&quot; , userNum) print(sqrt) . Input: 25.0 5.0 . Section 3.13 (3.B) Hacks . 1) Q: Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective . A: Abstracting away program logic into separate, modular functions is effective when coding because it makes the code easier to read and understand, more reusable and maintainable, and allows for better organization and structure. By breaking down large, complex tasks into smaller, more manageable functions, it can help to simplify the code and make it more organized, which makes debugging and troubleshooting much easier. Additionally, modular functions are easier to update and extend, since they can be tested, modified, and replaced independently. This can help reduce the amount of code needed to be written and improve the overall code quality. Finally, modular functions make code more reusable, as they can be used in multiple projects and functions, which can lead to faster development times and reduced maintenance costs. . 2) Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) . The procedure below requires abstraction as it allows the function to organize the code as a whole. Abstracting the variables x and y allows me to not have to call the variables over and over again within the same function. . x = 20 y = 100 # Set function def addition(x,y): sum = x + y return(sum) #Print the result print(addition(x,y)) . 120 . 3) Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) . def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count def any_count(sentence, letter): words = split_string(sentence) count = count_words_starting_with_letter(words, letter) return count userLetter = input(&quot;Type any letter&quot;) answer = count_anything(s, str(userLetter)) print(str(answer) + &quot; word(s) starting with &quot; + str(userLetter)) . 0 word(s) starting with 2 . Section 3.13 (3.C) Hacks . 1) Define procedure names and arguments in your own words. Procedures and arguments are used to describe chunks of code that accomplish specific tasks. A procedure name is a label used to identify the code, while arguments are the inputs that the procedure can accept. . 2) Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) . Add two numbers . | Subtract two numbers . | Multiply two numbers . | Divide two numbers . | . Extra Work: Calculator uses binary . . Binary Calculator for +, -, * . &amp; Normal integer division . + - * / Clear . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%203/sections%2012-13/notes%20hacks/2023/04/02/Hacks-Section-12-13.html",
            "relUrl": "/unit%203/sections%2012-13/notes%20hacks/2023/04/02/Hacks-Section-12-13.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Fixing Errors (Menu Problem)",
            "content": "import sys total = 0 menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;Burger&quot;: 3.99, &quot;Fries&quot;: 1.99, &quot;Drink&quot;: 0.99} print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) ordering = True while ordering: food = input(&quot;Please select an item from the menu. Press enter when you are done.&quot;) if food in menu: total += menu[food] print(&quot;Your total: $&quot; + &quot;{:.2f}&quot;.format(total)) else: print(&quot;Your order will be ready soon!&quot;) ordering = False . Menu burger $3.99 fries $1.99 drink $0.99 Your total: $3.99 Your total: $5.98 Your total: $6.97 Your total: $7.96 Your total: $11.95 Your order will be ready soon! .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/python/lists/iterations/menu/2023/04/02/ErrorFixing.html",
            "relUrl": "/fastpages/python/lists/iterations/menu/2023/04/02/ErrorFixing.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "CPT Write-up Trimester 2",
            "content": "Video . The link to my Video . Write-up . Car Search and Add . 3.a.i. . The purpose of my program is to allow users to add their car builds and search through the cars of others, in order to help people discover new cars and to develop a car community. . 3.a.ii. . The program allows a user to input their car and give it a unique description. Some people may have the same cars or may have multiple of the same car, thus, the descriptions are unique in order to allow people to save their various car builds/configurations. A user can input the make, model, price, year, body style and engine of any car - along with a description and the name of the car’s owner. The addition of cars allows the search feature to shine, as it works as a filter. The search feature iterates through specific criteria such as a specific make, model, body style, or multiple attributes/criteria at the same time. The search creates a table that allows the user to easily view specific cars. . 3.a.iii. . The user inputs a car to add to the database. At first, they add a car that is already in the database (a duplicate), which returns an error message. After, a new car is added and can be viewed in the table. The user also uses different criteria to filter through the database of cars, causing only a specific list of cars to appear on the table. . 3.b.i. . A POST method is used to submit a new car to the database. &quot;Data&quot; is the variable that is used to represent the list of car data later on in the code. . // Add an event listener to the form to submit car data const form = document.getElementById(&#39;carForm&#39;); form.addEventListener(&#39;submit&#39;, async function(event) { event.preventDefault(); // Retrieve the input values from the form const make = document.getElementById(&#39;make&#39;).value; const model = document.getElementById(&#39;model&#39;).value; const price = document.getElementById(&#39;price&#39;).value; const year = document.getElementById(&#39;year&#39;).value; const desc = document.getElementById(&#39;desc&#39;).value; const bodyStyle = document.getElementById(&#39;body_style&#39;).value; const engine = document.getElementById(&#39;engine&#39;).value; const owner = document.getElementById(&#39;owner&#39;).value; try { // Use the Fetch API to submit car data to the server const response = await fetch(&#39;https://cars.nighthawkcodingsociety.com/api/cars/create&#39;, { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, // Use JSON.stringify to convert the input values into a JSON string that can be sent to the server as the request body body: JSON.stringify({ make: make, model: model, price: price, year: year, desc: desc, body_style: bodyStyle, engine: engine, owner: owner }) }); // Check if the response from the server is ok if (!response.ok) { throw new Error(&#39;Network response was not ok&#39;); } // Display a success message to the user alert(&quot;Car has been added successfully!&quot;); } catch (error) { // If an error occurs, log it to the console and display an error message to the user console.error(&#39;Error:&#39;, error); alert(&quot;Please enter all fields or check if the added car is a duplicate.&quot;) } }); . 3.b.ii. . const resultContainer = document.getElementById(&quot;result&quot;); const url = &quot;https://cars.nighthawkcodingsociety.com/api/cars/&quot;; const headers = { method: &#39;GET&#39;, mode: &#39;cors&#39;, cache: &#39;default&#39;, credentials: &#39;omit&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, }; // Fetch data from the database fetch(url, headers) .then(response =&gt; { // If the response is not OK, log the error and display it on the webpage if (response.status != 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = errorMsg; tr.appendChild(td); resultContainer.appendChild(tr); return; } // Parse the json and add it to the webpage response.json().then(data =&gt; { console.log(data); for (const row of data) { // Create new table row and cells for each car attribute const tr = document.createElement(&quot;tr&quot;); const make = document.createElement(&quot;td&quot;); const model = document.createElement(&quot;td&quot;); const year = document.createElement(&quot;td&quot;); const price = document.createElement(&quot;td&quot;); const engine = document.createElement(&quot;td&quot;); const body_style = document.createElement(&quot;td&quot;); const desc = document.createElement(&quot;td&quot;); const owner = document.createElement(&quot;td&quot;); // Set the inner HTML of each cell to the corresponding car attribute value make.innerHTML = row.make; model.innerHTML = row.model; year.innerHTML = row.year; price.innerHTML = row.price; engine.innerHTML = row.engine; body_style.innerHTML = row.body_style; desc.innerHTML = row.desc; owner.innerHTML = row.owner // Append each cell to the row // Allows the data to be added to the newly made table tr.appendChild(make); tr.appendChild(model); tr.appendChild(year); tr.appendChild(price); tr.appendChild(engine); tr.appendChild(body_style); tr.appendChild(desc); tr.appendChild(owner); // Append the row to the container element resultContainer.appendChild(tr); } }) }) . 3.b.iii. . The variable that represents the list is “data.” &quot;Data&quot; is the data of the cars that the program fetches from our database using a GET request - the data is represented by JSON. This data is used to populate the table with various attributes including make, model, year, etc. . 3.b.iv. . The data contained within the list is the make, model, price, year, engine, body style, and owner of each car from the database. . 3.b.v. . Without using the json “data” the car search would cease to work. This is because the car search uses the data to build tables based on specific criteria from the data itself. . 3.c.i. . // Table creation after search button is pressed function makeTable(data){ // Remove current carData - prepare for new search document.getElementById(&quot;carData&quot;).remove() const [desiredMake, desiredModel, desiredPrice, desiredYear, desiredEngine, desiredBodyStyle, desiredOwner] = getInput() const tbody = document.createElement(&quot;tbody&quot;) // Set tbody id to carData - ensure that carData is still on page tbody.id = &quot;carData&quot; // Iterate over each row from the data in the database for (const row of data) { // Filter // Check if each row value matches user input, skip to the next iteration if there is no match if (desiredMake &amp;&amp; !(row.make.toUpperCase() === desiredMake.toUpperCase())) continue if (desiredModel &amp;&amp; !(row.model.toUpperCase() === desiredModel.toUpperCase())) continue if (desiredPrice &amp;&amp; !(row.price &lt;= parseInt(desiredPrice))) continue if (desiredYear &amp;&amp; !(row.year === parseInt(desiredYear))) continue if (desiredEngine &amp;&amp; !(row.engine.toUpperCase() === desiredEngine.toUpperCase())) continue if (desiredBodyStyle &amp;&amp; !(row.body_style.toUpperCase() === desiredBodyStyle.toUpperCase())) continue if (desiredOwner &amp;&amp; !(row.owner.toUpperCase() === desiredOwner.toUpperCase())) continue // If all values match, create table elements const tr = document.createElement(&quot;tr&quot;); const make = document.createElement(&quot;td&quot;); const model = document.createElement(&quot;td&quot;); const year = document.createElement(&quot;td&quot;); const price = document.createElement(&quot;td&quot;); const engine = document.createElement(&quot;td&quot;); const body_style = document.createElement(&quot;td&quot;); const owner = document.createElement(&quot;td&quot;); // Set innerHTML to values of make, model, year, etc. from the API make.innerHTML = row.make; model.innerHTML = row.model; year.innerHTML = row.year; price.innerHTML = row.price; engine.innerHTML = row.engine; body_style.innerHTML = row.body_style; owner.innerHTML = row.owner; // Add data for make, model, price, etc. to the table row tr.appendChild(make); tr.appendChild(model); tr.appendChild(year); tr.appendChild(price); tr.appendChild(engine); tr.appendChild(body_style); tr.appendChild(owner); // Add row to the table tbody.appendChild(tr); } // Add the data from tbody into the table document.getElementById(&quot;table&quot;).appendChild(tbody) } . 3.c.ii. . &lt;h1&gt;Car Search&lt;/h1&gt; &lt;table id=&quot;table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Make&lt;/th&gt; &lt;th&gt;Model&lt;/th&gt; &lt;th&gt;Year&lt;/th&gt; &lt;th&gt;Price&lt;/th&gt; &lt;th&gt;Engine&lt;/th&gt; &lt;th&gt;Body Style&lt;/th&gt; &lt;th&gt;Owner&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tr id=&quot;result&quot;&gt;&lt;/tr&gt; &lt;tbody id=&quot;carData&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;!-- Set label and input ids - allows for use in getInput() function --&gt; &lt;label for=&quot;make&quot;&gt;Make&lt;/label&gt; &lt;input name=&quot;make&quot; id=&quot;make&quot;&gt; &lt;label for=&quot;model&quot;&gt;Model&lt;/label&gt; &lt;input name=&quot;model&quot; id=&quot;model&quot;&gt; &lt;label for=&quot;year&quot;&gt;Year&lt;/label&gt; &lt;input name=&quot;year&quot; id=&quot;year&quot;&gt; &lt;label for=&quot;price&quot;&gt;Price&lt;/label&gt; &lt;input name=&quot;price&quot; id=&quot;price&quot;&gt; &lt;label for=&quot;engine&quot;&gt;Engine&lt;/label&gt; &lt;input name=&quot;engine&quot; id=&quot;engine&quot;&gt; &lt;label for=&quot;body_style&quot;&gt;Body Style&lt;/label&gt; &lt;input name=&quot;body_style&quot; id=&quot;body_style&quot;&gt; &lt;label for=&quot;owner&quot;&gt;Owner&lt;/label&gt; &lt;input name=&quot;owner&quot; id=&quot;owner&quot;&gt; &lt;button onclick=&quot;makeTable(carData)&quot; style=&quot;background-color: #ffff; color: black;&quot;&gt;Search&lt;/button&gt; &lt;button onclick=&quot;clearTable(carData)&quot; style=&quot;background-color: #f2f2f2; color: black&quot;&gt;Clear&lt;/button&gt; . 3.c.iii. . The identified procedure “makeTable” iterates through the list of cars from the data in our database. Cars that match the specific criteria set via the user’s input are the only cars that populate the table - thus, allowing the cars to be filtered/searched. uses a for loop to iterate through the list of cars from the data in our database. . 3.c.iv. . The function first gets the user input values for desired make, model, price, year, engine, body style, and owner by calling the &quot;getInput&quot; function.The function first gets the user input values for desired make, model, price, year, engine, body style, and owner by calling the &quot;getInput&quot; function. The function then removes any previous data by removing the table with id &quot;carData&quot;. The function creates a new table body element using the &quot;createElement&quot; method and sets its id to &quot;carData&quot;. This table body element will hold the rows of car data that match the user&#39;s search criteria. The function then loops through each row of data from the database using a for-of loop. For each row of data, the function checks if each value matches the user input values using if statements. If a value doesn&#39;t match, the loop moves on to the next row using the &quot;continue&quot; statement. This filters the data to only show rows that match the user&#39;s search criteria. If all values match, the function creates a new table row element using the &quot;createElement&quot; method and creates new table data elements (td) for each column (make, model, year, price, engine, body style, and owner) using the same method. Set innerHTML: The function then sets the innerHTML of each td element to the corresponding value from the current row of data. The function appends each td element to the table row using the &quot;appendChild&quot; method.The function appends each td element to the table row using the &quot;appendChild&quot; method. The function appends the table row to the table body using the &quot;appendChild&quot; method. After all rows have been processed, the function appends the table body to the table with id &quot;table&quot; using the &quot;appendChild&quot; method. . 3.d.i. . Call One In call one, makes a search with no values - makeTable has no user input. . | Call Two This call will execute the algorithm with user input that filters the rows of data based on certain criteria. For example, the input would be &quot;Lexus&quot; for the desired make and &quot;Coupe&quot; for the desired body style. . | . 3.d.ii. . Condition(s) tested by Call One As there is no user input, all of the &quot;continue&quot; statements when iterating through the data will be skipped and all of the rows will pass through to the table creation section of the algorithm. . | Condition(s) tested by Call Two When the algorithm loops through each row of data, it will only create a new table row if the make matches &quot;Lexus&quot; and the body style matches &quot;Coupe&quot;. All other rows will be skipped due to the &quot;continue&quot; statements in the filtering section of the algorithm. . | . 3.d.iii. . Results of Call One The resulting table will include all rows of data from the &quot;data&quot; array. . | Results of Call Two The resulting table will only include rows that match the user&#39;s input criteria, and not all rows from the filtered list of data. . | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cpt/cb/final/2023/04/02/CPT.html",
            "relUrl": "/cpt/cb/final/2023/04/02/CPT.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Algorithm Hacks",
            "content": "def xor(x,y): return (x or y) and not (x and y) def F(A, B, C, D): P = xor(A, B) Q = xor(C, D) R = xor(P, Q) return R def f(a,b,c,d): t = &#39;T&#39; (A,B,C,D) = (a==t, b==t, c==t, d==t) R = F(A, B, C, D) return &quot;FT&quot;[R] print(&quot;Truth Table&quot;) print() print(&quot;A B C D | f(A,B,C,D)&quot;) print(&quot;========|===========&quot;) r = &quot;TF&quot; for a in r: for b in r: for c in r: for d in r: print(a, b, c, d, &quot;| &quot;, f(a, b, c, d)) . Truth Table A B C D | f(A,B,C,D) ========|=========== T T T T | F T T T r | F T T T u | F T T T e | F T T T F | F T T T a | F T T T l | F T T T s | F T T T e | F T T r T | F T T r r | F T T r u | F T T r e | F T T r F | F T T r a | F T T r l | F T T r s | F T T r e | F T T u T | F T T u r | F T T u u | F T T u e | F T T u F | F T T u a | F T T u l | F T T u s | F T T u e | F T T e T | F T T e r | F T T e u | F T T e e | F T T e F | F T T e a | F T T e l | F T T e s | F T T e e | F T T F T | F T T F r | F T T F u | F T T F e | F T T F F | F T T F a | F T T F l | F T T F s | F T T F e | F T T a T | F T T a r | F T T a u | F T T a e | F T T a F | F T T a a | F T T a l | F T T a s | F T T a e | F T T l T | F T T l r | F T T l u | F T T l e | F T T l F | F T T l a | F T T l l | F T T l s | F T T l e | F T T s T | F T T s r | F T T s u | F T T s e | F T T s F | F T T s a | F T T s l | F T T s s | F T T s e | F T T e T | F T T e r | F T T e u | F T T e e | F T T e F | F T T e a | F T T e l | F T T e s | F T T e e | F T r T T | F T r T r | F T r T u | F T r T e | F T r T F | F T r T a | F T r T l | F T r T s | F T r T e | F T r r T | F T r r r | F T r r u | F T r r e | F T r r F | F T r r a | F T r r l | F T r r s | F T r r e | F T r u T | F T r u r | F T r u u | F T r u e | F T r u F | F T r u a | F T r u l | F T r u s | F T r u e | F T r e T | F T r e r | F T r e u | F T r e e | F T r e F | F T r e a | F T r e l | F T r e s | F T r e e | F T r F T | F T r F r | F T r F u | F T r F e | F T r F F | F T r F a | F T r F l | F T r F s | F T r F e | F T r a T | F T r a r | F T r a u | F T r a e | F T r a F | F T r a a | F T r a l | F T r a s | F T r a e | F T r l T | F T r l r | F T r l u | F T r l e | F T r l F | F T r l a | F T r l l | F T r l s | F T r l e | F T r s T | F T r s r | F T r s u | F T r s e | F T r s F | F T r s a | F T r s l | F T r s s | F T r s e | F T r e T | F T r e r | F T r e u | F T r e e | F T r e F | F T r e a | F T r e l | F T r e s | F T r e e | F T u T T | F T u T r | F T u T u | F T u T e | F T u T F | F T u T a | F T u T l | F T u T s | F T u T e | F T u r T | F T u r r | F T u r u | F T u r e | F T u r F | F T u r a | F T u r l | F T u r s | F T u r e | F T u u T | F T u u r | F T u u u | F T u u e | F T u u F | F T u u a | F T u u l | F T u u s | F T u u e | F T u e T | F T u e r | F T u e u | F T u e e | F T u e F | F T u e a | F T u e l | F T u e s | F T u e e | F T u F T | F T u F r | F T u F u | F T u F e | F T u F F | F T u F a | F T u F l | F T u F s | F T u F e | F T u a T | F T u a r | F T u a u | F T u a e | F T u a F | F T u a a | F T u a l | F T u a s | F T u a e | F T u l T | F T u l r | F T u l u | F T u l e | F T u l F | F T u l a | F T u l l | F T u l s | F T u l e | F T u s T | F T u s r | F T u s u | F T u s e | F T u s F | F T u s a | F T u s l | F T u s s | F T u s e | F T u e T | F T u e r | F T u e u | F T u e e | F T u e F | F T u e a | F T u e l | F T u e s | F T u e e | F T e T T | F T e T r | F T e T u | F T e T e | F T e T F | F T e T a | F T e T l | F T e T s | F T e T e | F T e r T | F T e r r | F T e r u | F T e r e | F T e r F | F T e r a | F T e r l | F T e r s | F T e r e | F T e u T | F T e u r | F T e u u | F T e u e | F T e u F | F T e u a | F T e u l | F T e u s | F T e u e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T e F T | F T e F r | F T e F u | F T e F e | F T e F F | F T e F a | F T e F l | F T e F s | F T e F e | F T e a T | F T e a r | F T e a u | F T e a e | F T e a F | F T e a a | F T e a l | F T e a s | F T e a e | F T e l T | F T e l r | F T e l u | F T e l e | F T e l F | F T e l a | F T e l l | F T e l s | F T e l e | F T e s T | F T e s r | F T e s u | F T e s e | F T e s F | F T e s a | F T e s l | F T e s s | F T e s e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T F T T | F T F T r | F T F T u | F T F T e | F T F T F | F T F T a | F T F T l | F T F T s | F T F T e | F T F r T | F T F r r | F T F r u | F T F r e | F T F r F | F T F r a | F T F r l | F T F r s | F T F r e | F T F u T | F T F u r | F T F u u | F T F u e | F T F u F | F T F u a | F T F u l | F T F u s | F T F u e | F T F e T | F T F e r | F T F e u | F T F e e | F T F e F | F T F e a | F T F e l | F T F e s | F T F e e | F T F F T | F T F F r | F T F F u | F T F F e | F T F F F | F T F F a | F T F F l | F T F F s | F T F F e | F T F a T | F T F a r | F T F a u | F T F a e | F T F a F | F T F a a | F T F a l | F T F a s | F T F a e | F T F l T | F T F l r | F T F l u | F T F l e | F T F l F | F T F l a | F T F l l | F T F l s | F T F l e | F T F s T | F T F s r | F T F s u | F T F s e | F T F s F | F T F s a | F T F s l | F T F s s | F T F s e | F T F e T | F T F e r | F T F e u | F T F e e | F T F e F | F T F e a | F T F e l | F T F e s | F T F e e | F T a T T | F T a T r | F T a T u | F T a T e | F T a T F | F T a T a | F T a T l | F T a T s | F T a T e | F T a r T | F T a r r | F T a r u | F T a r e | F T a r F | F T a r a | F T a r l | F T a r s | F T a r e | F T a u T | F T a u r | F T a u u | F T a u e | F T a u F | F T a u a | F T a u l | F T a u s | F T a u e | F T a e T | F T a e r | F T a e u | F T a e e | F T a e F | F T a e a | F T a e l | F T a e s | F T a e e | F T a F T | F T a F r | F T a F u | F T a F e | F T a F F | F T a F a | F T a F l | F T a F s | F T a F e | F T a a T | F T a a r | F T a a u | F T a a e | F T a a F | F T a a a | F T a a l | F T a a s | F T a a e | F T a l T | F T a l r | F T a l u | F T a l e | F T a l F | F T a l a | F T a l l | F T a l s | F T a l e | F T a s T | F T a s r | F T a s u | F T a s e | F T a s F | F T a s a | F T a s l | F T a s s | F T a s e | F T a e T | F T a e r | F T a e u | F T a e e | F T a e F | F T a e a | F T a e l | F T a e s | F T a e e | F T l T T | F T l T r | F T l T u | F T l T e | F T l T F | F T l T a | F T l T l | F T l T s | F T l T e | F T l r T | F T l r r | F T l r u | F T l r e | F T l r F | F T l r a | F T l r l | F T l r s | F T l r e | F T l u T | F T l u r | F T l u u | F T l u e | F T l u F | F T l u a | F T l u l | F T l u s | F T l u e | F T l e T | F T l e r | F T l e u | F T l e e | F T l e F | F T l e a | F T l e l | F T l e s | F T l e e | F T l F T | F T l F r | F T l F u | F T l F e | F T l F F | F T l F a | F T l F l | F T l F s | F T l F e | F T l a T | F T l a r | F T l a u | F T l a e | F T l a F | F T l a a | F T l a l | F T l a s | F T l a e | F T l l T | F T l l r | F T l l u | F T l l e | F T l l F | F T l l a | F T l l l | F T l l s | F T l l e | F T l s T | F T l s r | F T l s u | F T l s e | F T l s F | F T l s a | F T l s l | F T l s s | F T l s e | F T l e T | F T l e r | F T l e u | F T l e e | F T l e F | F T l e a | F T l e l | F T l e s | F T l e e | F T s T T | F T s T r | F T s T u | F T s T e | F T s T F | F T s T a | F T s T l | F T s T s | F T s T e | F T s r T | F T s r r | F T s r u | F T s r e | F T s r F | F T s r a | F T s r l | F T s r s | F T s r e | F T s u T | F T s u r | F T s u u | F T s u e | F T s u F | F T s u a | F T s u l | F T s u s | F T s u e | F T s e T | F T s e r | F T s e u | F T s e e | F T s e F | F T s e a | F T s e l | F T s e s | F T s e e | F T s F T | F T s F r | F T s F u | F T s F e | F T s F F | F T s F a | F T s F l | F T s F s | F T s F e | F T s a T | F T s a r | F T s a u | F T s a e | F T s a F | F T s a a | F T s a l | F T s a s | F T s a e | F T s l T | F T s l r | F T s l u | F T s l e | F T s l F | F T s l a | F T s l l | F T s l s | F T s l e | F T s s T | F T s s r | F T s s u | F T s s e | F T s s F | F T s s a | F T s s l | F T s s s | F T s s e | F T s e T | F T s e r | F T s e u | F T s e e | F T s e F | F T s e a | F T s e l | F T s e s | F T s e e | F T e T T | F T e T r | F T e T u | F T e T e | F T e T F | F T e T a | F T e T l | F T e T s | F T e T e | F T e r T | F T e r r | F T e r u | F T e r e | F T e r F | F T e r a | F T e r l | F T e r s | F T e r e | F T e u T | F T e u r | F T e u u | F T e u e | F T e u F | F T e u a | F T e u l | F T e u s | F T e u e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T e F T | F T e F r | F T e F u | F T e F e | F T e F F | F T e F a | F T e F l | F T e F s | F T e F e | F T e a T | F T e a r | F T e a u | F T e a e | F T e a F | F T e a a | F T e a l | F T e a s | F T e a e | F T e l T | F T e l r | F T e l u | F T e l e | F T e l F | F T e l a | F T e l l | F T e l s | F T e l e | F T e s T | F T e s r | F T e s u | F T e s e | F T e s F | F T e s a | F T e s l | F T e s s | F T e s e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F r T T T | F r T T r | F r T T u | F r T T e | F r T T F | F r T T a | F r T T l | F r T T s | F r T T e | F r T r T | F r T r r | F r T r u | F r T r e | F r T r F | F r T r a | F r T r l | F r T r s | F r T r e | F r T u T | F r T u r | F r T u u | F r T u e | F r T u F | F r T u a | F r T u l | F r T u s | F r T u e | F r T e T | F r T e r | F r T e u | F r T e e | F r T e F | F r T e a | F r T e l | F r T e s | F r T e e | F r T F T | F r T F r | F r T F u | F r T F e | F r T F F | F r T F a | F r T F l | F r T F s | F r T F e | F r T a T | F r T a r | F r T a u | F r T a e | F r T a F | F r T a a | F r T a l | F r T a s | F r T a e | F r T l T | F r T l r | F r T l u | F r T l e | F r T l F | F r T l a | F r T l l | F r T l s | F r T l e | F r T s T | F r T s r | F r T s u | F r T s e | F r T s F | F r T s a | F r T s l | F r T s s | F r T s e | F r T e T | F r T e r | F r T e u | F r T e e | F r T e F | F r T e a | F r T e l | F r T e s | F r T e e | F r r T T | F r r T r | F r r T u | F r r T e | F r r T F | F r r T a | F r r T l | F r r T s | F r r T e | F r r r T | F r r r r | F r r r u | F r r r e | F r r r F | F r r r a | F r r r l | F r r r s | F r r r e | F r r u T | F r r u r | F r r u u | F r r u e | F r r u F | F r r u a | F r r u l | F r r u s | F r r u e | F r r e T | F r r e r | F r r e u | F r r e e | F r r e F | F r r e a | F r r e l | F r r e s | F r r e e | F r r F T | F r r F r | F r r F u | F r r F e | F r r F F | F r r F a | F r r F l | F r r F s | F r r F e | F r r a T | F r r a r | F r r a u | F r r a e | F r r a F | F r r a a | F r r a l | F r r a s | F r r a e | F r r l T | F r r l r | F r r l u | F r r l e | F r r l F | F r r l a | F r r l l | F r r l s | F r r l e | F r r s T | F r r s r | F r r s u | F r r s e | F r r s F | F r r s a | F r r s l | F r r s s | F r r s e | F r r e T | F r r e r | F r r e u | F r r e e | F r r e F | F r r e a | F r r e l | F r r e s | F r r e e | F r u T T | F r u T r | F r u T u | F r u T e | F r u T F | F r u T a | F r u T l | F r u T s | F r u T e | F r u r T | F r u r r | F r u r u | F r u r e | F r u r F | F r u r a | F r u r l | F r u r s | F r u r e | F r u u T | F r u u r | F r u u u | F r u u e | F r u u F | F r u u a | F r u u l | F r u u s | F r u u e | F r u e T | F r u e r | F r u e u | F r u e e | F r u e F | F r u e a | F r u e l | F r u e s | F r u e e | F r u F T | F r u F r | F r u F u | F r u F e | F r u F F | F r u F a | F r u F l | F r u F s | F r u F e | F r u a T | F r u a r | F r u a u | F r u a e | F r u a F | F r u a a | F r u a l | F r u a s | F r u a e | F r u l T | F r u l r | F r u l u | F r u l e | F r u l F | F r u l a | F r u l l | F r u l s | F r u l e | F r u s T | F r u s r | F r u s u | F r u s e | F r u s F | F r u s a | F r u s l | F r u s s | F r u s e | F r u e T | F r u e r | F r u e u | F r u e e | F r u e F | F r u e a | F r u e l | F r u e s | F r u e e | F r e T T | F r e T r | F r e T u | F r e T e | F r e T F | F r e T a | F r e T l | F r e T s | F r e T e | F r e r T | F r e r r | F r e r u | F r e r e | F r e r F | F r e r a | F r e r l | F r e r s | F r e r e | F r e u T | F r e u r | F r e u u | F r e u e | F r e u F | F r e u a | F r e u l | F r e u s | F r e u e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r e F T | F r e F r | F r e F u | F r e F e | F r e F F | F r e F a | F r e F l | F r e F s | F r e F e | F r e a T | F r e a r | F r e a u | F r e a e | F r e a F | F r e a a | F r e a l | F r e a s | F r e a e | F r e l T | F r e l r | F r e l u | F r e l e | F r e l F | F r e l a | F r e l l | F r e l s | F r e l e | F r e s T | F r e s r | F r e s u | F r e s e | F r e s F | F r e s a | F r e s l | F r e s s | F r e s e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r F T T | F r F T r | F r F T u | F r F T e | F r F T F | F r F T a | F r F T l | F r F T s | F r F T e | F r F r T | F r F r r | F r F r u | F r F r e | F r F r F | F r F r a | F r F r l | F r F r s | F r F r e | F r F u T | F r F u r | F r F u u | F r F u e | F r F u F | F r F u a | F r F u l | F r F u s | F r F u e | F r F e T | F r F e r | F r F e u | F r F e e | F r F e F | F r F e a | F r F e l | F r F e s | F r F e e | F r F F T | F r F F r | F r F F u | F r F F e | F r F F F | F r F F a | F r F F l | F r F F s | F r F F e | F r F a T | F r F a r | F r F a u | F r F a e | F r F a F | F r F a a | F r F a l | F r F a s | F r F a e | F r F l T | F r F l r | F r F l u | F r F l e | F r F l F | F r F l a | F r F l l | F r F l s | F r F l e | F r F s T | F r F s r | F r F s u | F r F s e | F r F s F | F r F s a | F r F s l | F r F s s | F r F s e | F r F e T | F r F e r | F r F e u | F r F e e | F r F e F | F r F e a | F r F e l | F r F e s | F r F e e | F r a T T | F r a T r | F r a T u | F r a T e | F r a T F | F r a T a | F r a T l | F r a T s | F r a T e | F r a r T | F r a r r | F r a r u | F r a r e | F r a r F | F r a r a | F r a r l | F r a r s | F r a r e | F r a u T | F r a u r | F r a u u | F r a u e | F r a u F | F r a u a | F r a u l | F r a u s | F r a u e | F r a e T | F r a e r | F r a e u | F r a e e | F r a e F | F r a e a | F r a e l | F r a e s | F r a e e | F r a F T | F r a F r | F r a F u | F r a F e | F r a F F | F r a F a | F r a F l | F r a F s | F r a F e | F r a a T | F r a a r | F r a a u | F r a a e | F r a a F | F r a a a | F r a a l | F r a a s | F r a a e | F r a l T | F r a l r | F r a l u | F r a l e | F r a l F | F r a l a | F r a l l | F r a l s | F r a l e | F r a s T | F r a s r | F r a s u | F r a s e | F r a s F | F r a s a | F r a s l | F r a s s | F r a s e | F r a e T | F r a e r | F r a e u | F r a e e | F r a e F | F r a e a | F r a e l | F r a e s | F r a e e | F r l T T | F r l T r | F r l T u | F r l T e | F r l T F | F r l T a | F r l T l | F r l T s | F r l T e | F r l r T | F r l r r | F r l r u | F r l r e | F r l r F | F r l r a | F r l r l | F r l r s | F r l r e | F r l u T | F r l u r | F r l u u | F r l u e | F r l u F | F r l u a | F r l u l | F r l u s | F r l u e | F r l e T | F r l e r | F r l e u | F r l e e | F r l e F | F r l e a | F r l e l | F r l e s | F r l e e | F r l F T | F r l F r | F r l F u | F r l F e | F r l F F | F r l F a | F r l F l | F r l F s | F r l F e | F r l a T | F r l a r | F r l a u | F r l a e | F r l a F | F r l a a | F r l a l | F r l a s | F r l a e | F r l l T | F r l l r | F r l l u | F r l l e | F r l l F | F r l l a | F r l l l | F r l l s | F r l l e | F r l s T | F r l s r | F r l s u | F r l s e | F r l s F | F r l s a | F r l s l | F r l s s | F r l s e | F r l e T | F r l e r | F r l e u | F r l e e | F r l e F | F r l e a | F r l e l | F r l e s | F r l e e | F r s T T | F r s T r | F r s T u | F r s T e | F r s T F | F r s T a | F r s T l | F r s T s | F r s T e | F r s r T | F r s r r | F r s r u | F r s r e | F r s r F | F r s r a | F r s r l | F r s r s | F r s r e | F r s u T | F r s u r | F r s u u | F r s u e | F r s u F | F r s u a | F r s u l | F r s u s | F r s u e | F r s e T | F r s e r | F r s e u | F r s e e | F r s e F | F r s e a | F r s e l | F r s e s | F r s e e | F r s F T | F r s F r | F r s F u | F r s F e | F r s F F | F r s F a | F r s F l | F r s F s | F r s F e | F r s a T | F r s a r | F r s a u | F r s a e | F r s a F | F r s a a | F r s a l | F r s a s | F r s a e | F r s l T | F r s l r | F r s l u | F r s l e | F r s l F | F r s l a | F r s l l | F r s l s | F r s l e | F r s s T | F r s s r | F r s s u | F r s s e | F r s s F | F r s s a | F r s s l | F r s s s | F r s s e | F r s e T | F r s e r | F r s e u | F r s e e | F r s e F | F r s e a | F r s e l | F r s e s | F r s e e | F r e T T | F r e T r | F r e T u | F r e T e | F r e T F | F r e T a | F r e T l | F r e T s | F r e T e | F r e r T | F r e r r | F r e r u | F r e r e | F r e r F | F r e r a | F r e r l | F r e r s | F r e r e | F r e u T | F r e u r | F r e u u | F r e u e | F r e u F | F r e u a | F r e u l | F r e u s | F r e u e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r e F T | F r e F r | F r e F u | F r e F e | F r e F F | F r e F a | F r e F l | F r e F s | F r e F e | F r e a T | F r e a r | F r e a u | F r e a e | F r e a F | F r e a a | F r e a l | F r e a s | F r e a e | F r e l T | F r e l r | F r e l u | F r e l e | F r e l F | F r e l a | F r e l l | F r e l s | F r e l e | F r e s T | F r e s r | F r e s u | F r e s e | F r e s F | F r e s a | F r e s l | F r e s s | F r e s e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F u T T T | F u T T r | F u T T u | F u T T e | F u T T F | F u T T a | F u T T l | F u T T s | F u T T e | F u T r T | F u T r r | F u T r u | F u T r e | F u T r F | F u T r a | F u T r l | F u T r s | F u T r e | F u T u T | F u T u r | F u T u u | F u T u e | F u T u F | F u T u a | F u T u l | F u T u s | F u T u e | F u T e T | F u T e r | F u T e u | F u T e e | F u T e F | F u T e a | F u T e l | F u T e s | F u T e e | F u T F T | F u T F r | F u T F u | F u T F e | F u T F F | F u T F a | F u T F l | F u T F s | F u T F e | F u T a T | F u T a r | F u T a u | F u T a e | F u T a F | F u T a a | F u T a l | F u T a s | F u T a e | F u T l T | F u T l r | F u T l u | F u T l e | F u T l F | F u T l a | F u T l l | F u T l s | F u T l e | F u T s T | F u T s r | F u T s u | F u T s e | F u T s F | F u T s a | F u T s l | F u T s s | F u T s e | F u T e T | F u T e r | F u T e u | F u T e e | F u T e F | F u T e a | F u T e l | F u T e s | F u T e e | F u r T T | F u r T r | F u r T u | F u r T e | F u r T F | F u r T a | F u r T l | F u r T s | F u r T e | F u r r T | F u r r r | F u r r u | F u r r e | F u r r F | F u r r a | F u r r l | F u r r s | F u r r e | F u r u T | F u r u r | F u r u u | F u r u e | F u r u F | F u r u a | F u r u l | F u r u s | F u r u e | F u r e T | F u r e r | F u r e u | F u r e e | F u r e F | F u r e a | F u r e l | F u r e s | F u r e e | F u r F T | F u r F r | F u r F u | F u r F e | F u r F F | F u r F a | F u r F l | F u r F s | F u r F e | F u r a T | F u r a r | F u r a u | F u r a e | F u r a F | F u r a a | F u r a l | F u r a s | F u r a e | F u r l T | F u r l r | F u r l u | F u r l e | F u r l F | F u r l a | F u r l l | F u r l s | F u r l e | F u r s T | F u r s r | F u r s u | F u r s e | F u r s F | F u r s a | F u r s l | F u r s s | F u r s e | F u r e T | F u r e r | F u r e u | F u r e e | F u r e F | F u r e a | F u r e l | F u r e s | F u r e e | F u u T T | F u u T r | F u u T u | F u u T e | F u u T F | F u u T a | F u u T l | F u u T s | F u u T e | F u u r T | F u u r r | F u u r u | F u u r e | F u u r F | F u u r a | F u u r l | F u u r s | F u u r e | F u u u T | F u u u r | F u u u u | F u u u e | F u u u F | F u u u a | F u u u l | F u u u s | F u u u e | F u u e T | F u u e r | F u u e u | F u u e e | F u u e F | F u u e a | F u u e l | F u u e s | F u u e e | F u u F T | F u u F r | F u u F u | F u u F e | F u u F F | F u u F a | F u u F l | F u u F s | F u u F e | F u u a T | F u u a r | F u u a u | F u u a e | F u u a F | F u u a a | F u u a l | F u u a s | F u u a e | F u u l T | F u u l r | F u u l u | F u u l e | F u u l F | F u u l a | F u u l l | F u u l s | F u u l e | F u u s T | F u u s r | F u u s u | F u u s e | F u u s F | F u u s a | F u u s l | F u u s s | F u u s e | F u u e T | F u u e r | F u u e u | F u u e e | F u u e F | F u u e a | F u u e l | F u u e s | F u u e e | F u e T T | F u e T r | F u e T u | F u e T e | F u e T F | F u e T a | F u e T l | F u e T s | F u e T e | F u e r T | F u e r r | F u e r u | F u e r e | F u e r F | F u e r a | F u e r l | F u e r s | F u e r e | F u e u T | F u e u r | F u e u u | F u e u e | F u e u F | F u e u a | F u e u l | F u e u s | F u e u e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u e F T | F u e F r | F u e F u | F u e F e | F u e F F | F u e F a | F u e F l | F u e F s | F u e F e | F u e a T | F u e a r | F u e a u | F u e a e | F u e a F | F u e a a | F u e a l | F u e a s | F u e a e | F u e l T | F u e l r | F u e l u | F u e l e | F u e l F | F u e l a | F u e l l | F u e l s | F u e l e | F u e s T | F u e s r | F u e s u | F u e s e | F u e s F | F u e s a | F u e s l | F u e s s | F u e s e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u F T T | F u F T r | F u F T u | F u F T e | F u F T F | F u F T a | F u F T l | F u F T s | F u F T e | F u F r T | F u F r r | F u F r u | F u F r e | F u F r F | F u F r a | F u F r l | F u F r s | F u F r e | F u F u T | F u F u r | F u F u u | F u F u e | F u F u F | F u F u a | F u F u l | F u F u s | F u F u e | F u F e T | F u F e r | F u F e u | F u F e e | F u F e F | F u F e a | F u F e l | F u F e s | F u F e e | F u F F T | F u F F r | F u F F u | F u F F e | F u F F F | F u F F a | F u F F l | F u F F s | F u F F e | F u F a T | F u F a r | F u F a u | F u F a e | F u F a F | F u F a a | F u F a l | F u F a s | F u F a e | F u F l T | F u F l r | F u F l u | F u F l e | F u F l F | F u F l a | F u F l l | F u F l s | F u F l e | F u F s T | F u F s r | F u F s u | F u F s e | F u F s F | F u F s a | F u F s l | F u F s s | F u F s e | F u F e T | F u F e r | F u F e u | F u F e e | F u F e F | F u F e a | F u F e l | F u F e s | F u F e e | F u a T T | F u a T r | F u a T u | F u a T e | F u a T F | F u a T a | F u a T l | F u a T s | F u a T e | F u a r T | F u a r r | F u a r u | F u a r e | F u a r F | F u a r a | F u a r l | F u a r s | F u a r e | F u a u T | F u a u r | F u a u u | F u a u e | F u a u F | F u a u a | F u a u l | F u a u s | F u a u e | F u a e T | F u a e r | F u a e u | F u a e e | F u a e F | F u a e a | F u a e l | F u a e s | F u a e e | F u a F T | F u a F r | F u a F u | F u a F e | F u a F F | F u a F a | F u a F l | F u a F s | F u a F e | F u a a T | F u a a r | F u a a u | F u a a e | F u a a F | F u a a a | F u a a l | F u a a s | F u a a e | F u a l T | F u a l r | F u a l u | F u a l e | F u a l F | F u a l a | F u a l l | F u a l s | F u a l e | F u a s T | F u a s r | F u a s u | F u a s e | F u a s F | F u a s a | F u a s l | F u a s s | F u a s e | F u a e T | F u a e r | F u a e u | F u a e e | F u a e F | F u a e a | F u a e l | F u a e s | F u a e e | F u l T T | F u l T r | F u l T u | F u l T e | F u l T F | F u l T a | F u l T l | F u l T s | F u l T e | F u l r T | F u l r r | F u l r u | F u l r e | F u l r F | F u l r a | F u l r l | F u l r s | F u l r e | F u l u T | F u l u r | F u l u u | F u l u e | F u l u F | F u l u a | F u l u l | F u l u s | F u l u e | F u l e T | F u l e r | F u l e u | F u l e e | F u l e F | F u l e a | F u l e l | F u l e s | F u l e e | F u l F T | F u l F r | F u l F u | F u l F e | F u l F F | F u l F a | F u l F l | F u l F s | F u l F e | F u l a T | F u l a r | F u l a u | F u l a e | F u l a F | F u l a a | F u l a l | F u l a s | F u l a e | F u l l T | F u l l r | F u l l u | F u l l e | F u l l F | F u l l a | F u l l l | F u l l s | F u l l e | F u l s T | F u l s r | F u l s u | F u l s e | F u l s F | F u l s a | F u l s l | F u l s s | F u l s e | F u l e T | F u l e r | F u l e u | F u l e e | F u l e F | F u l e a | F u l e l | F u l e s | F u l e e | F u s T T | F u s T r | F u s T u | F u s T e | F u s T F | F u s T a | F u s T l | F u s T s | F u s T e | F u s r T | F u s r r | F u s r u | F u s r e | F u s r F | F u s r a | F u s r l | F u s r s | F u s r e | F u s u T | F u s u r | F u s u u | F u s u e | F u s u F | F u s u a | F u s u l | F u s u s | F u s u e | F u s e T | F u s e r | F u s e u | F u s e e | F u s e F | F u s e a | F u s e l | F u s e s | F u s e e | F u s F T | F u s F r | F u s F u | F u s F e | F u s F F | F u s F a | F u s F l | F u s F s | F u s F e | F u s a T | F u s a r | F u s a u | F u s a e | F u s a F | F u s a a | F u s a l | F u s a s | F u s a e | F u s l T | F u s l r | F u s l u | F u s l e | F u s l F | F u s l a | F u s l l | F u s l s | F u s l e | F u s s T | F u s s r | F u s s u | F u s s e | F u s s F | F u s s a | F u s s l | F u s s s | F u s s e | F u s e T | F u s e r | F u s e u | F u s e e | F u s e F | F u s e a | F u s e l | F u s e s | F u s e e | F u e T T | F u e T r | F u e T u | F u e T e | F u e T F | F u e T a | F u e T l | F u e T s | F u e T e | F u e r T | F u e r r | F u e r u | F u e r e | F u e r F | F u e r a | F u e r l | F u e r s | F u e r e | F u e u T | F u e u r | F u e u u | F u e u e | F u e u F | F u e u a | F u e u l | F u e u s | F u e u e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u e F T | F u e F r | F u e F u | F u e F e | F u e F F | F u e F a | F u e F l | F u e F s | F u e F e | F u e a T | F u e a r | F u e a u | F u e a e | F u e a F | F u e a a | F u e a l | F u e a s | F u e a e | F u e l T | F u e l r | F u e l u | F u e l e | F u e l F | F u e l a | F u e l l | F u e l s | F u e l e | F u e s T | F u e s r | F u e s u | F u e s e | F u e s F | F u e s a | F u e s l | F u e s s | F u e s e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F e T T T | F e T T r | F e T T u | F e T T e | F e T T F | F e T T a | F e T T l | F e T T s | F e T T e | F e T r T | F e T r r | F e T r u | F e T r e | F e T r F | F e T r a | F e T r l | F e T r s | F e T r e | F e T u T | F e T u r | F e T u u | F e T u e | F e T u F | F e T u a | F e T u l | F e T u s | F e T u e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e T F T | F e T F r | F e T F u | F e T F e | F e T F F | F e T F a | F e T F l | F e T F s | F e T F e | F e T a T | F e T a r | F e T a u | F e T a e | F e T a F | F e T a a | F e T a l | F e T a s | F e T a e | F e T l T | F e T l r | F e T l u | F e T l e | F e T l F | F e T l a | F e T l l | F e T l s | F e T l e | F e T s T | F e T s r | F e T s u | F e T s e | F e T s F | F e T s a | F e T s l | F e T s s | F e T s e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e r T T | F e r T r | F e r T u | F e r T e | F e r T F | F e r T a | F e r T l | F e r T s | F e r T e | F e r r T | F e r r r | F e r r u | F e r r e | F e r r F | F e r r a | F e r r l | F e r r s | F e r r e | F e r u T | F e r u r | F e r u u | F e r u e | F e r u F | F e r u a | F e r u l | F e r u s | F e r u e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e r F T | F e r F r | F e r F u | F e r F e | F e r F F | F e r F a | F e r F l | F e r F s | F e r F e | F e r a T | F e r a r | F e r a u | F e r a e | F e r a F | F e r a a | F e r a l | F e r a s | F e r a e | F e r l T | F e r l r | F e r l u | F e r l e | F e r l F | F e r l a | F e r l l | F e r l s | F e r l e | F e r s T | F e r s r | F e r s u | F e r s e | F e r s F | F e r s a | F e r s l | F e r s s | F e r s e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e u T T | F e u T r | F e u T u | F e u T e | F e u T F | F e u T a | F e u T l | F e u T s | F e u T e | F e u r T | F e u r r | F e u r u | F e u r e | F e u r F | F e u r a | F e u r l | F e u r s | F e u r e | F e u u T | F e u u r | F e u u u | F e u u e | F e u u F | F e u u a | F e u u l | F e u u s | F e u u e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e u F T | F e u F r | F e u F u | F e u F e | F e u F F | F e u F a | F e u F l | F e u F s | F e u F e | F e u a T | F e u a r | F e u a u | F e u a e | F e u a F | F e u a a | F e u a l | F e u a s | F e u a e | F e u l T | F e u l r | F e u l u | F e u l e | F e u l F | F e u l a | F e u l l | F e u l s | F e u l e | F e u s T | F e u s r | F e u s u | F e u s e | F e u s F | F e u s a | F e u s l | F e u s s | F e u s e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e F T T | F e F T r | F e F T u | F e F T e | F e F T F | F e F T a | F e F T l | F e F T s | F e F T e | F e F r T | F e F r r | F e F r u | F e F r e | F e F r F | F e F r a | F e F r l | F e F r s | F e F r e | F e F u T | F e F u r | F e F u u | F e F u e | F e F u F | F e F u a | F e F u l | F e F u s | F e F u e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e F F T | F e F F r | F e F F u | F e F F e | F e F F F | F e F F a | F e F F l | F e F F s | F e F F e | F e F a T | F e F a r | F e F a u | F e F a e | F e F a F | F e F a a | F e F a l | F e F a s | F e F a e | F e F l T | F e F l r | F e F l u | F e F l e | F e F l F | F e F l a | F e F l l | F e F l s | F e F l e | F e F s T | F e F s r | F e F s u | F e F s e | F e F s F | F e F s a | F e F s l | F e F s s | F e F s e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e a T T | F e a T r | F e a T u | F e a T e | F e a T F | F e a T a | F e a T l | F e a T s | F e a T e | F e a r T | F e a r r | F e a r u | F e a r e | F e a r F | F e a r a | F e a r l | F e a r s | F e a r e | F e a u T | F e a u r | F e a u u | F e a u e | F e a u F | F e a u a | F e a u l | F e a u s | F e a u e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e a F T | F e a F r | F e a F u | F e a F e | F e a F F | F e a F a | F e a F l | F e a F s | F e a F e | F e a a T | F e a a r | F e a a u | F e a a e | F e a a F | F e a a a | F e a a l | F e a a s | F e a a e | F e a l T | F e a l r | F e a l u | F e a l e | F e a l F | F e a l a | F e a l l | F e a l s | F e a l e | F e a s T | F e a s r | F e a s u | F e a s e | F e a s F | F e a s a | F e a s l | F e a s s | F e a s e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e l T T | F e l T r | F e l T u | F e l T e | F e l T F | F e l T a | F e l T l | F e l T s | F e l T e | F e l r T | F e l r r | F e l r u | F e l r e | F e l r F | F e l r a | F e l r l | F e l r s | F e l r e | F e l u T | F e l u r | F e l u u | F e l u e | F e l u F | F e l u a | F e l u l | F e l u s | F e l u e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e l F T | F e l F r | F e l F u | F e l F e | F e l F F | F e l F a | F e l F l | F e l F s | F e l F e | F e l a T | F e l a r | F e l a u | F e l a e | F e l a F | F e l a a | F e l a l | F e l a s | F e l a e | F e l l T | F e l l r | F e l l u | F e l l e | F e l l F | F e l l a | F e l l l | F e l l s | F e l l e | F e l s T | F e l s r | F e l s u | F e l s e | F e l s F | F e l s a | F e l s l | F e l s s | F e l s e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e s T T | F e s T r | F e s T u | F e s T e | F e s T F | F e s T a | F e s T l | F e s T s | F e s T e | F e s r T | F e s r r | F e s r u | F e s r e | F e s r F | F e s r a | F e s r l | F e s r s | F e s r e | F e s u T | F e s u r | F e s u u | F e s u e | F e s u F | F e s u a | F e s u l | F e s u s | F e s u e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e s F T | F e s F r | F e s F u | F e s F e | F e s F F | F e s F a | F e s F l | F e s F s | F e s F e | F e s a T | F e s a r | F e s a u | F e s a e | F e s a F | F e s a a | F e s a l | F e s a s | F e s a e | F e s l T | F e s l r | F e s l u | F e s l e | F e s l F | F e s l a | F e s l l | F e s l s | F e s l e | F e s s T | F e s s r | F e s s u | F e s s e | F e s s F | F e s s a | F e s s l | F e s s s | F e s s e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F F T T T | F F T T r | F F T T u | F F T T e | F F T T F | F F T T a | F F T T l | F F T T s | F F T T e | F F T r T | F F T r r | F F T r u | F F T r e | F F T r F | F F T r a | F F T r l | F F T r s | F F T r e | F F T u T | F F T u r | F F T u u | F F T u e | F F T u F | F F T u a | F F T u l | F F T u s | F F T u e | F F T e T | F F T e r | F F T e u | F F T e e | F F T e F | F F T e a | F F T e l | F F T e s | F F T e e | F F T F T | F F T F r | F F T F u | F F T F e | F F T F F | F F T F a | F F T F l | F F T F s | F F T F e | F F T a T | F F T a r | F F T a u | F F T a e | F F T a F | F F T a a | F F T a l | F F T a s | F F T a e | F F T l T | F F T l r | F F T l u | F F T l e | F F T l F | F F T l a | F F T l l | F F T l s | F F T l e | F F T s T | F F T s r | F F T s u | F F T s e | F F T s F | F F T s a | F F T s l | F F T s s | F F T s e | F F T e T | F F T e r | F F T e u | F F T e e | F F T e F | F F T e a | F F T e l | F F T e s | F F T e e | F F r T T | F F r T r | F F r T u | F F r T e | F F r T F | F F r T a | F F r T l | F F r T s | F F r T e | F F r r T | F F r r r | F F r r u | F F r r e | F F r r F | F F r r a | F F r r l | F F r r s | F F r r e | F F r u T | F F r u r | F F r u u | F F r u e | F F r u F | F F r u a | F F r u l | F F r u s | F F r u e | F F r e T | F F r e r | F F r e u | F F r e e | F F r e F | F F r e a | F F r e l | F F r e s | F F r e e | F F r F T | F F r F r | F F r F u | F F r F e | F F r F F | F F r F a | F F r F l | F F r F s | F F r F e | F F r a T | F F r a r | F F r a u | F F r a e | F F r a F | F F r a a | F F r a l | F F r a s | F F r a e | F F r l T | F F r l r | F F r l u | F F r l e | F F r l F | F F r l a | F F r l l | F F r l s | F F r l e | F F r s T | F F r s r | F F r s u | F F r s e | F F r s F | F F r s a | F F r s l | F F r s s | F F r s e | F F r e T | F F r e r | F F r e u | F F r e e | F F r e F | F F r e a | F F r e l | F F r e s | F F r e e | F F u T T | F F u T r | F F u T u | F F u T e | F F u T F | F F u T a | F F u T l | F F u T s | F F u T e | F F u r T | F F u r r | F F u r u | F F u r e | F F u r F | F F u r a | F F u r l | F F u r s | F F u r e | F F u u T | F F u u r | F F u u u | F F u u e | F F u u F | F F u u a | F F u u l | F F u u s | F F u u e | F F u e T | F F u e r | F F u e u | F F u e e | F F u e F | F F u e a | F F u e l | F F u e s | F F u e e | F F u F T | F F u F r | F F u F u | F F u F e | F F u F F | F F u F a | F F u F l | F F u F s | F F u F e | F F u a T | F F u a r | F F u a u | F F u a e | F F u a F | F F u a a | F F u a l | F F u a s | F F u a e | F F u l T | F F u l r | F F u l u | F F u l e | F F u l F | F F u l a | F F u l l | F F u l s | F F u l e | F F u s T | F F u s r | F F u s u | F F u s e | F F u s F | F F u s a | F F u s l | F F u s s | F F u s e | F F u e T | F F u e r | F F u e u | F F u e e | F F u e F | F F u e a | F F u e l | F F u e s | F F u e e | F F e T T | F F e T r | F F e T u | F F e T e | F F e T F | F F e T a | F F e T l | F F e T s | F F e T e | F F e r T | F F e r r | F F e r u | F F e r e | F F e r F | F F e r a | F F e r l | F F e r s | F F e r e | F F e u T | F F e u r | F F e u u | F F e u e | F F e u F | F F e u a | F F e u l | F F e u s | F F e u e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F e F T | F F e F r | F F e F u | F F e F e | F F e F F | F F e F a | F F e F l | F F e F s | F F e F e | F F e a T | F F e a r | F F e a u | F F e a e | F F e a F | F F e a a | F F e a l | F F e a s | F F e a e | F F e l T | F F e l r | F F e l u | F F e l e | F F e l F | F F e l a | F F e l l | F F e l s | F F e l e | F F e s T | F F e s r | F F e s u | F F e s e | F F e s F | F F e s a | F F e s l | F F e s s | F F e s e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F F T T | F F F T r | F F F T u | F F F T e | F F F T F | F F F T a | F F F T l | F F F T s | F F F T e | F F F r T | F F F r r | F F F r u | F F F r e | F F F r F | F F F r a | F F F r l | F F F r s | F F F r e | F F F u T | F F F u r | F F F u u | F F F u e | F F F u F | F F F u a | F F F u l | F F F u s | F F F u e | F F F e T | F F F e r | F F F e u | F F F e e | F F F e F | F F F e a | F F F e l | F F F e s | F F F e e | F F F F T | F F F F r | F F F F u | F F F F e | F F F F F | F F F F a | F F F F l | F F F F s | F F F F e | F F F a T | F F F a r | F F F a u | F F F a e | F F F a F | F F F a a | F F F a l | F F F a s | F F F a e | F F F l T | F F F l r | F F F l u | F F F l e | F F F l F | F F F l a | F F F l l | F F F l s | F F F l e | F F F s T | F F F s r | F F F s u | F F F s e | F F F s F | F F F s a | F F F s l | F F F s s | F F F s e | F F F e T | F F F e r | F F F e u | F F F e e | F F F e F | F F F e a | F F F e l | F F F e s | F F F e e | F F a T T | F F a T r | F F a T u | F F a T e | F F a T F | F F a T a | F F a T l | F F a T s | F F a T e | F F a r T | F F a r r | F F a r u | F F a r e | F F a r F | F F a r a | F F a r l | F F a r s | F F a r e | F F a u T | F F a u r | F F a u u | F F a u e | F F a u F | F F a u a | F F a u l | F F a u s | F F a u e | F F a e T | F F a e r | F F a e u | F F a e e | F F a e F | F F a e a | F F a e l | F F a e s | F F a e e | F F a F T | F F a F r | F F a F u | F F a F e | F F a F F | F F a F a | F F a F l | F F a F s | F F a F e | F F a a T | F F a a r | F F a a u | F F a a e | F F a a F | F F a a a | F F a a l | F F a a s | F F a a e | F F a l T | F F a l r | F F a l u | F F a l e | F F a l F | F F a l a | F F a l l | F F a l s | F F a l e | F F a s T | F F a s r | F F a s u | F F a s e | F F a s F | F F a s a | F F a s l | F F a s s | F F a s e | F F a e T | F F a e r | F F a e u | F F a e e | F F a e F | F F a e a | F F a e l | F F a e s | F F a e e | F F l T T | F F l T r | F F l T u | F F l T e | F F l T F | F F l T a | F F l T l | F F l T s | F F l T e | F F l r T | F F l r r | F F l r u | F F l r e | F F l r F | F F l r a | F F l r l | F F l r s | F F l r e | F F l u T | F F l u r | F F l u u | F F l u e | F F l u F | F F l u a | F F l u l | F F l u s | F F l u e | F F l e T | F F l e r | F F l e u | F F l e e | F F l e F | F F l e a | F F l e l | F F l e s | F F l e e | F F l F T | F F l F r | F F l F u | F F l F e | F F l F F | F F l F a | F F l F l | F F l F s | F F l F e | F F l a T | F F l a r | F F l a u | F F l a e | F F l a F | F F l a a | F F l a l | F F l a s | F F l a e | F F l l T | F F l l r | F F l l u | F F l l e | F F l l F | F F l l a | F F l l l | F F l l s | F F l l e | F F l s T | F F l s r | F F l s u | F F l s e | F F l s F | F F l s a | F F l s l | F F l s s | F F l s e | F F l e T | F F l e r | F F l e u | F F l e e | F F l e F | F F l e a | F F l e l | F F l e s | F F l e e | F F s T T | F F s T r | F F s T u | F F s T e | F F s T F | F F s T a | F F s T l | F F s T s | F F s T e | F F s r T | F F s r r | F F s r u | F F s r e | F F s r F | F F s r a | F F s r l | F F s r s | F F s r e | F F s u T | F F s u r | F F s u u | F F s u e | F F s u F | F F s u a | F F s u l | F F s u s | F F s u e | F F s e T | F F s e r | F F s e u | F F s e e | F F s e F | F F s e a | F F s e l | F F s e s | F F s e e | F F s F T | F F s F r | F F s F u | F F s F e | F F s F F | F F s F a | F F s F l | F F s F s | F F s F e | F F s a T | F F s a r | F F s a u | F F s a e | F F s a F | F F s a a | F F s a l | F F s a s | F F s a e | F F s l T | F F s l r | F F s l u | F F s l e | F F s l F | F F s l a | F F s l l | F F s l s | F F s l e | F F s s T | F F s s r | F F s s u | F F s s e | F F s s F | F F s s a | F F s s l | F F s s s | F F s s e | F F s e T | F F s e r | F F s e u | F F s e e | F F s e F | F F s e a | F F s e l | F F s e s | F F s e e | F F e T T | F F e T r | F F e T u | F F e T e | F F e T F | F F e T a | F F e T l | F F e T s | F F e T e | F F e r T | F F e r r | F F e r u | F F e r e | F F e r F | F F e r a | F F e r l | F F e r s | F F e r e | F F e u T | F F e u r | F F e u u | F F e u e | F F e u F | F F e u a | F F e u l | F F e u s | F F e u e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F e F T | F F e F r | F F e F u | F F e F e | F F e F F | F F e F a | F F e F l | F F e F s | F F e F e | F F e a T | F F e a r | F F e a u | F F e a e | F F e a F | F F e a a | F F e a l | F F e a s | F F e a e | F F e l T | F F e l r | F F e l u | F F e l e | F F e l F | F F e l a | F F e l l | F F e l s | F F e l e | F F e s T | F F e s r | F F e s u | F F e s e | F F e s F | F F e s a | F F e s l | F F e s s | F F e s e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F a T T T | F a T T r | F a T T u | F a T T e | F a T T F | F a T T a | F a T T l | F a T T s | F a T T e | F a T r T | F a T r r | F a T r u | F a T r e | F a T r F | F a T r a | F a T r l | F a T r s | F a T r e | F a T u T | F a T u r | F a T u u | F a T u e | F a T u F | F a T u a | F a T u l | F a T u s | F a T u e | F a T e T | F a T e r | F a T e u | F a T e e | F a T e F | F a T e a | F a T e l | F a T e s | F a T e e | F a T F T | F a T F r | F a T F u | F a T F e | F a T F F | F a T F a | F a T F l | F a T F s | F a T F e | F a T a T | F a T a r | F a T a u | F a T a e | F a T a F | F a T a a | F a T a l | F a T a s | F a T a e | F a T l T | F a T l r | F a T l u | F a T l e | F a T l F | F a T l a | F a T l l | F a T l s | F a T l e | F a T s T | F a T s r | F a T s u | F a T s e | F a T s F | F a T s a | F a T s l | F a T s s | F a T s e | F a T e T | F a T e r | F a T e u | F a T e e | F a T e F | F a T e a | F a T e l | F a T e s | F a T e e | F a r T T | F a r T r | F a r T u | F a r T e | F a r T F | F a r T a | F a r T l | F a r T s | F a r T e | F a r r T | F a r r r | F a r r u | F a r r e | F a r r F | F a r r a | F a r r l | F a r r s | F a r r e | F a r u T | F a r u r | F a r u u | F a r u e | F a r u F | F a r u a | F a r u l | F a r u s | F a r u e | F a r e T | F a r e r | F a r e u | F a r e e | F a r e F | F a r e a | F a r e l | F a r e s | F a r e e | F a r F T | F a r F r | F a r F u | F a r F e | F a r F F | F a r F a | F a r F l | F a r F s | F a r F e | F a r a T | F a r a r | F a r a u | F a r a e | F a r a F | F a r a a | F a r a l | F a r a s | F a r a e | F a r l T | F a r l r | F a r l u | F a r l e | F a r l F | F a r l a | F a r l l | F a r l s | F a r l e | F a r s T | F a r s r | F a r s u | F a r s e | F a r s F | F a r s a | F a r s l | F a r s s | F a r s e | F a r e T | F a r e r | F a r e u | F a r e e | F a r e F | F a r e a | F a r e l | F a r e s | F a r e e | F a u T T | F a u T r | F a u T u | F a u T e | F a u T F | F a u T a | F a u T l | F a u T s | F a u T e | F a u r T | F a u r r | F a u r u | F a u r e | F a u r F | F a u r a | F a u r l | F a u r s | F a u r e | F a u u T | F a u u r | F a u u u | F a u u e | F a u u F | F a u u a | F a u u l | F a u u s | F a u u e | F a u e T | F a u e r | F a u e u | F a u e e | F a u e F | F a u e a | F a u e l | F a u e s | F a u e e | F a u F T | F a u F r | F a u F u | F a u F e | F a u F F | F a u F a | F a u F l | F a u F s | F a u F e | F a u a T | F a u a r | F a u a u | F a u a e | F a u a F | F a u a a | F a u a l | F a u a s | F a u a e | F a u l T | F a u l r | F a u l u | F a u l e | F a u l F | F a u l a | F a u l l | F a u l s | F a u l e | F a u s T | F a u s r | F a u s u | F a u s e | F a u s F | F a u s a | F a u s l | F a u s s | F a u s e | F a u e T | F a u e r | F a u e u | F a u e e | F a u e F | F a u e a | F a u e l | F a u e s | F a u e e | F a e T T | F a e T r | F a e T u | F a e T e | F a e T F | F a e T a | F a e T l | F a e T s | F a e T e | F a e r T | F a e r r | F a e r u | F a e r e | F a e r F | F a e r a | F a e r l | F a e r s | F a e r e | F a e u T | F a e u r | F a e u u | F a e u e | F a e u F | F a e u a | F a e u l | F a e u s | F a e u e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a e F T | F a e F r | F a e F u | F a e F e | F a e F F | F a e F a | F a e F l | F a e F s | F a e F e | F a e a T | F a e a r | F a e a u | F a e a e | F a e a F | F a e a a | F a e a l | F a e a s | F a e a e | F a e l T | F a e l r | F a e l u | F a e l e | F a e l F | F a e l a | F a e l l | F a e l s | F a e l e | F a e s T | F a e s r | F a e s u | F a e s e | F a e s F | F a e s a | F a e s l | F a e s s | F a e s e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a F T T | F a F T r | F a F T u | F a F T e | F a F T F | F a F T a | F a F T l | F a F T s | F a F T e | F a F r T | F a F r r | F a F r u | F a F r e | F a F r F | F a F r a | F a F r l | F a F r s | F a F r e | F a F u T | F a F u r | F a F u u | F a F u e | F a F u F | F a F u a | F a F u l | F a F u s | F a F u e | F a F e T | F a F e r | F a F e u | F a F e e | F a F e F | F a F e a | F a F e l | F a F e s | F a F e e | F a F F T | F a F F r | F a F F u | F a F F e | F a F F F | F a F F a | F a F F l | F a F F s | F a F F e | F a F a T | F a F a r | F a F a u | F a F a e | F a F a F | F a F a a | F a F a l | F a F a s | F a F a e | F a F l T | F a F l r | F a F l u | F a F l e | F a F l F | F a F l a | F a F l l | F a F l s | F a F l e | F a F s T | F a F s r | F a F s u | F a F s e | F a F s F | F a F s a | F a F s l | F a F s s | F a F s e | F a F e T | F a F e r | F a F e u | F a F e e | F a F e F | F a F e a | F a F e l | F a F e s | F a F e e | F a a T T | F a a T r | F a a T u | F a a T e | F a a T F | F a a T a | F a a T l | F a a T s | F a a T e | F a a r T | F a a r r | F a a r u | F a a r e | F a a r F | F a a r a | F a a r l | F a a r s | F a a r e | F a a u T | F a a u r | F a a u u | F a a u e | F a a u F | F a a u a | F a a u l | F a a u s | F a a u e | F a a e T | F a a e r | F a a e u | F a a e e | F a a e F | F a a e a | F a a e l | F a a e s | F a a e e | F a a F T | F a a F r | F a a F u | F a a F e | F a a F F | F a a F a | F a a F l | F a a F s | F a a F e | F a a a T | F a a a r | F a a a u | F a a a e | F a a a F | F a a a a | F a a a l | F a a a s | F a a a e | F a a l T | F a a l r | F a a l u | F a a l e | F a a l F | F a a l a | F a a l l | F a a l s | F a a l e | F a a s T | F a a s r | F a a s u | F a a s e | F a a s F | F a a s a | F a a s l | F a a s s | F a a s e | F a a e T | F a a e r | F a a e u | F a a e e | F a a e F | F a a e a | F a a e l | F a a e s | F a a e e | F a l T T | F a l T r | F a l T u | F a l T e | F a l T F | F a l T a | F a l T l | F a l T s | F a l T e | F a l r T | F a l r r | F a l r u | F a l r e | F a l r F | F a l r a | F a l r l | F a l r s | F a l r e | F a l u T | F a l u r | F a l u u | F a l u e | F a l u F | F a l u a | F a l u l | F a l u s | F a l u e | F a l e T | F a l e r | F a l e u | F a l e e | F a l e F | F a l e a | F a l e l | F a l e s | F a l e e | F a l F T | F a l F r | F a l F u | F a l F e | F a l F F | F a l F a | F a l F l | F a l F s | F a l F e | F a l a T | F a l a r | F a l a u | F a l a e | F a l a F | F a l a a | F a l a l | F a l a s | F a l a e | F a l l T | F a l l r | F a l l u | F a l l e | F a l l F | F a l l a | F a l l l | F a l l s | F a l l e | F a l s T | F a l s r | F a l s u | F a l s e | F a l s F | F a l s a | F a l s l | F a l s s | F a l s e | F a l e T | F a l e r | F a l e u | F a l e e | F a l e F | F a l e a | F a l e l | F a l e s | F a l e e | F a s T T | F a s T r | F a s T u | F a s T e | F a s T F | F a s T a | F a s T l | F a s T s | F a s T e | F a s r T | F a s r r | F a s r u | F a s r e | F a s r F | F a s r a | F a s r l | F a s r s | F a s r e | F a s u T | F a s u r | F a s u u | F a s u e | F a s u F | F a s u a | F a s u l | F a s u s | F a s u e | F a s e T | F a s e r | F a s e u | F a s e e | F a s e F | F a s e a | F a s e l | F a s e s | F a s e e | F a s F T | F a s F r | F a s F u | F a s F e | F a s F F | F a s F a | F a s F l | F a s F s | F a s F e | F a s a T | F a s a r | F a s a u | F a s a e | F a s a F | F a s a a | F a s a l | F a s a s | F a s a e | F a s l T | F a s l r | F a s l u | F a s l e | F a s l F | F a s l a | F a s l l | F a s l s | F a s l e | F a s s T | F a s s r | F a s s u | F a s s e | F a s s F | F a s s a | F a s s l | F a s s s | F a s s e | F a s e T | F a s e r | F a s e u | F a s e e | F a s e F | F a s e a | F a s e l | F a s e s | F a s e e | F a e T T | F a e T r | F a e T u | F a e T e | F a e T F | F a e T a | F a e T l | F a e T s | F a e T e | F a e r T | F a e r r | F a e r u | F a e r e | F a e r F | F a e r a | F a e r l | F a e r s | F a e r e | F a e u T | F a e u r | F a e u u | F a e u e | F a e u F | F a e u a | F a e u l | F a e u s | F a e u e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a e F T | F a e F r | F a e F u | F a e F e | F a e F F | F a e F a | F a e F l | F a e F s | F a e F e | F a e a T | F a e a r | F a e a u | F a e a e | F a e a F | F a e a a | F a e a l | F a e a s | F a e a e | F a e l T | F a e l r | F a e l u | F a e l e | F a e l F | F a e l a | F a e l l | F a e l s | F a e l e | F a e s T | F a e s r | F a e s u | F a e s e | F a e s F | F a e s a | F a e s l | F a e s s | F a e s e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F l T T T | F l T T r | F l T T u | F l T T e | F l T T F | F l T T a | F l T T l | F l T T s | F l T T e | F l T r T | F l T r r | F l T r u | F l T r e | F l T r F | F l T r a | F l T r l | F l T r s | F l T r e | F l T u T | F l T u r | F l T u u | F l T u e | F l T u F | F l T u a | F l T u l | F l T u s | F l T u e | F l T e T | F l T e r | F l T e u | F l T e e | F l T e F | F l T e a | F l T e l | F l T e s | F l T e e | F l T F T | F l T F r | F l T F u | F l T F e | F l T F F | F l T F a | F l T F l | F l T F s | F l T F e | F l T a T | F l T a r | F l T a u | F l T a e | F l T a F | F l T a a | F l T a l | F l T a s | F l T a e | F l T l T | F l T l r | F l T l u | F l T l e | F l T l F | F l T l a | F l T l l | F l T l s | F l T l e | F l T s T | F l T s r | F l T s u | F l T s e | F l T s F | F l T s a | F l T s l | F l T s s | F l T s e | F l T e T | F l T e r | F l T e u | F l T e e | F l T e F | F l T e a | F l T e l | F l T e s | F l T e e | F l r T T | F l r T r | F l r T u | F l r T e | F l r T F | F l r T a | F l r T l | F l r T s | F l r T e | F l r r T | F l r r r | F l r r u | F l r r e | F l r r F | F l r r a | F l r r l | F l r r s | F l r r e | F l r u T | F l r u r | F l r u u | F l r u e | F l r u F | F l r u a | F l r u l | F l r u s | F l r u e | F l r e T | F l r e r | F l r e u | F l r e e | F l r e F | F l r e a | F l r e l | F l r e s | F l r e e | F l r F T | F l r F r | F l r F u | F l r F e | F l r F F | F l r F a | F l r F l | F l r F s | F l r F e | F l r a T | F l r a r | F l r a u | F l r a e | F l r a F | F l r a a | F l r a l | F l r a s | F l r a e | F l r l T | F l r l r | F l r l u | F l r l e | F l r l F | F l r l a | F l r l l | F l r l s | F l r l e | F l r s T | F l r s r | F l r s u | F l r s e | F l r s F | F l r s a | F l r s l | F l r s s | F l r s e | F l r e T | F l r e r | F l r e u | F l r e e | F l r e F | F l r e a | F l r e l | F l r e s | F l r e e | F l u T T | F l u T r | F l u T u | F l u T e | F l u T F | F l u T a | F l u T l | F l u T s | F l u T e | F l u r T | F l u r r | F l u r u | F l u r e | F l u r F | F l u r a | F l u r l | F l u r s | F l u r e | F l u u T | F l u u r | F l u u u | F l u u e | F l u u F | F l u u a | F l u u l | F l u u s | F l u u e | F l u e T | F l u e r | F l u e u | F l u e e | F l u e F | F l u e a | F l u e l | F l u e s | F l u e e | F l u F T | F l u F r | F l u F u | F l u F e | F l u F F | F l u F a | F l u F l | F l u F s | F l u F e | F l u a T | F l u a r | F l u a u | F l u a e | F l u a F | F l u a a | F l u a l | F l u a s | F l u a e | F l u l T | F l u l r | F l u l u | F l u l e | F l u l F | F l u l a | F l u l l | F l u l s | F l u l e | F l u s T | F l u s r | F l u s u | F l u s e | F l u s F | F l u s a | F l u s l | F l u s s | F l u s e | F l u e T | F l u e r | F l u e u | F l u e e | F l u e F | F l u e a | F l u e l | F l u e s | F l u e e | F l e T T | F l e T r | F l e T u | F l e T e | F l e T F | F l e T a | F l e T l | F l e T s | F l e T e | F l e r T | F l e r r | F l e r u | F l e r e | F l e r F | F l e r a | F l e r l | F l e r s | F l e r e | F l e u T | F l e u r | F l e u u | F l e u e | F l e u F | F l e u a | F l e u l | F l e u s | F l e u e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l e F T | F l e F r | F l e F u | F l e F e | F l e F F | F l e F a | F l e F l | F l e F s | F l e F e | F l e a T | F l e a r | F l e a u | F l e a e | F l e a F | F l e a a | F l e a l | F l e a s | F l e a e | F l e l T | F l e l r | F l e l u | F l e l e | F l e l F | F l e l a | F l e l l | F l e l s | F l e l e | F l e s T | F l e s r | F l e s u | F l e s e | F l e s F | F l e s a | F l e s l | F l e s s | F l e s e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l F T T | F l F T r | F l F T u | F l F T e | F l F T F | F l F T a | F l F T l | F l F T s | F l F T e | F l F r T | F l F r r | F l F r u | F l F r e | F l F r F | F l F r a | F l F r l | F l F r s | F l F r e | F l F u T | F l F u r | F l F u u | F l F u e | F l F u F | F l F u a | F l F u l | F l F u s | F l F u e | F l F e T | F l F e r | F l F e u | F l F e e | F l F e F | F l F e a | F l F e l | F l F e s | F l F e e | F l F F T | F l F F r | F l F F u | F l F F e | F l F F F | F l F F a | F l F F l | F l F F s | F l F F e | F l F a T | F l F a r | F l F a u | F l F a e | F l F a F | F l F a a | F l F a l | F l F a s | F l F a e | F l F l T | F l F l r | F l F l u | F l F l e | F l F l F | F l F l a | F l F l l | F l F l s | F l F l e | F l F s T | F l F s r | F l F s u | F l F s e | F l F s F | F l F s a | F l F s l | F l F s s | F l F s e | F l F e T | F l F e r | F l F e u | F l F e e | F l F e F | F l F e a | F l F e l | F l F e s | F l F e e | F l a T T | F l a T r | F l a T u | F l a T e | F l a T F | F l a T a | F l a T l | F l a T s | F l a T e | F l a r T | F l a r r | F l a r u | F l a r e | F l a r F | F l a r a | F l a r l | F l a r s | F l a r e | F l a u T | F l a u r | F l a u u | F l a u e | F l a u F | F l a u a | F l a u l | F l a u s | F l a u e | F l a e T | F l a e r | F l a e u | F l a e e | F l a e F | F l a e a | F l a e l | F l a e s | F l a e e | F l a F T | F l a F r | F l a F u | F l a F e | F l a F F | F l a F a | F l a F l | F l a F s | F l a F e | F l a a T | F l a a r | F l a a u | F l a a e | F l a a F | F l a a a | F l a a l | F l a a s | F l a a e | F l a l T | F l a l r | F l a l u | F l a l e | F l a l F | F l a l a | F l a l l | F l a l s | F l a l e | F l a s T | F l a s r | F l a s u | F l a s e | F l a s F | F l a s a | F l a s l | F l a s s | F l a s e | F l a e T | F l a e r | F l a e u | F l a e e | F l a e F | F l a e a | F l a e l | F l a e s | F l a e e | F l l T T | F l l T r | F l l T u | F l l T e | F l l T F | F l l T a | F l l T l | F l l T s | F l l T e | F l l r T | F l l r r | F l l r u | F l l r e | F l l r F | F l l r a | F l l r l | F l l r s | F l l r e | F l l u T | F l l u r | F l l u u | F l l u e | F l l u F | F l l u a | F l l u l | F l l u s | F l l u e | F l l e T | F l l e r | F l l e u | F l l e e | F l l e F | F l l e a | F l l e l | F l l e s | F l l e e | F l l F T | F l l F r | F l l F u | F l l F e | F l l F F | F l l F a | F l l F l | F l l F s | F l l F e | F l l a T | F l l a r | F l l a u | F l l a e | F l l a F | F l l a a | F l l a l | F l l a s | F l l a e | F l l l T | F l l l r | F l l l u | F l l l e | F l l l F | F l l l a | F l l l l | F l l l s | F l l l e | F l l s T | F l l s r | F l l s u | F l l s e | F l l s F | F l l s a | F l l s l | F l l s s | F l l s e | F l l e T | F l l e r | F l l e u | F l l e e | F l l e F | F l l e a | F l l e l | F l l e s | F l l e e | F l s T T | F l s T r | F l s T u | F l s T e | F l s T F | F l s T a | F l s T l | F l s T s | F l s T e | F l s r T | F l s r r | F l s r u | F l s r e | F l s r F | F l s r a | F l s r l | F l s r s | F l s r e | F l s u T | F l s u r | F l s u u | F l s u e | F l s u F | F l s u a | F l s u l | F l s u s | F l s u e | F l s e T | F l s e r | F l s e u | F l s e e | F l s e F | F l s e a | F l s e l | F l s e s | F l s e e | F l s F T | F l s F r | F l s F u | F l s F e | F l s F F | F l s F a | F l s F l | F l s F s | F l s F e | F l s a T | F l s a r | F l s a u | F l s a e | F l s a F | F l s a a | F l s a l | F l s a s | F l s a e | F l s l T | F l s l r | F l s l u | F l s l e | F l s l F | F l s l a | F l s l l | F l s l s | F l s l e | F l s s T | F l s s r | F l s s u | F l s s e | F l s s F | F l s s a | F l s s l | F l s s s | F l s s e | F l s e T | F l s e r | F l s e u | F l s e e | F l s e F | F l s e a | F l s e l | F l s e s | F l s e e | F l e T T | F l e T r | F l e T u | F l e T e | F l e T F | F l e T a | F l e T l | F l e T s | F l e T e | F l e r T | F l e r r | F l e r u | F l e r e | F l e r F | F l e r a | F l e r l | F l e r s | F l e r e | F l e u T | F l e u r | F l e u u | F l e u e | F l e u F | F l e u a | F l e u l | F l e u s | F l e u e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l e F T | F l e F r | F l e F u | F l e F e | F l e F F | F l e F a | F l e F l | F l e F s | F l e F e | F l e a T | F l e a r | F l e a u | F l e a e | F l e a F | F l e a a | F l e a l | F l e a s | F l e a e | F l e l T | F l e l r | F l e l u | F l e l e | F l e l F | F l e l a | F l e l l | F l e l s | F l e l e | F l e s T | F l e s r | F l e s u | F l e s e | F l e s F | F l e s a | F l e s l | F l e s s | F l e s e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F s T T T | F s T T r | F s T T u | F s T T e | F s T T F | F s T T a | F s T T l | F s T T s | F s T T e | F s T r T | F s T r r | F s T r u | F s T r e | F s T r F | F s T r a | F s T r l | F s T r s | F s T r e | F s T u T | F s T u r | F s T u u | F s T u e | F s T u F | F s T u a | F s T u l | F s T u s | F s T u e | F s T e T | F s T e r | F s T e u | F s T e e | F s T e F | F s T e a | F s T e l | F s T e s | F s T e e | F s T F T | F s T F r | F s T F u | F s T F e | F s T F F | F s T F a | F s T F l | F s T F s | F s T F e | F s T a T | F s T a r | F s T a u | F s T a e | F s T a F | F s T a a | F s T a l | F s T a s | F s T a e | F s T l T | F s T l r | F s T l u | F s T l e | F s T l F | F s T l a | F s T l l | F s T l s | F s T l e | F s T s T | F s T s r | F s T s u | F s T s e | F s T s F | F s T s a | F s T s l | F s T s s | F s T s e | F s T e T | F s T e r | F s T e u | F s T e e | F s T e F | F s T e a | F s T e l | F s T e s | F s T e e | F s r T T | F s r T r | F s r T u | F s r T e | F s r T F | F s r T a | F s r T l | F s r T s | F s r T e | F s r r T | F s r r r | F s r r u | F s r r e | F s r r F | F s r r a | F s r r l | F s r r s | F s r r e | F s r u T | F s r u r | F s r u u | F s r u e | F s r u F | F s r u a | F s r u l | F s r u s | F s r u e | F s r e T | F s r e r | F s r e u | F s r e e | F s r e F | F s r e a | F s r e l | F s r e s | F s r e e | F s r F T | F s r F r | F s r F u | F s r F e | F s r F F | F s r F a | F s r F l | F s r F s | F s r F e | F s r a T | F s r a r | F s r a u | F s r a e | F s r a F | F s r a a | F s r a l | F s r a s | F s r a e | F s r l T | F s r l r | F s r l u | F s r l e | F s r l F | F s r l a | F s r l l | F s r l s | F s r l e | F s r s T | F s r s r | F s r s u | F s r s e | F s r s F | F s r s a | F s r s l | F s r s s | F s r s e | F s r e T | F s r e r | F s r e u | F s r e e | F s r e F | F s r e a | F s r e l | F s r e s | F s r e e | F s u T T | F s u T r | F s u T u | F s u T e | F s u T F | F s u T a | F s u T l | F s u T s | F s u T e | F s u r T | F s u r r | F s u r u | F s u r e | F s u r F | F s u r a | F s u r l | F s u r s | F s u r e | F s u u T | F s u u r | F s u u u | F s u u e | F s u u F | F s u u a | F s u u l | F s u u s | F s u u e | F s u e T | F s u e r | F s u e u | F s u e e | F s u e F | F s u e a | F s u e l | F s u e s | F s u e e | F s u F T | F s u F r | F s u F u | F s u F e | F s u F F | F s u F a | F s u F l | F s u F s | F s u F e | F s u a T | F s u a r | F s u a u | F s u a e | F s u a F | F s u a a | F s u a l | F s u a s | F s u a e | F s u l T | F s u l r | F s u l u | F s u l e | F s u l F | F s u l a | F s u l l | F s u l s | F s u l e | F s u s T | F s u s r | F s u s u | F s u s e | F s u s F | F s u s a | F s u s l | F s u s s | F s u s e | F s u e T | F s u e r | F s u e u | F s u e e | F s u e F | F s u e a | F s u e l | F s u e s | F s u e e | F s e T T | F s e T r | F s e T u | F s e T e | F s e T F | F s e T a | F s e T l | F s e T s | F s e T e | F s e r T | F s e r r | F s e r u | F s e r e | F s e r F | F s e r a | F s e r l | F s e r s | F s e r e | F s e u T | F s e u r | F s e u u | F s e u e | F s e u F | F s e u a | F s e u l | F s e u s | F s e u e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s e F T | F s e F r | F s e F u | F s e F e | F s e F F | F s e F a | F s e F l | F s e F s | F s e F e | F s e a T | F s e a r | F s e a u | F s e a e | F s e a F | F s e a a | F s e a l | F s e a s | F s e a e | F s e l T | F s e l r | F s e l u | F s e l e | F s e l F | F s e l a | F s e l l | F s e l s | F s e l e | F s e s T | F s e s r | F s e s u | F s e s e | F s e s F | F s e s a | F s e s l | F s e s s | F s e s e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s F T T | F s F T r | F s F T u | F s F T e | F s F T F | F s F T a | F s F T l | F s F T s | F s F T e | F s F r T | F s F r r | F s F r u | F s F r e | F s F r F | F s F r a | F s F r l | F s F r s | F s F r e | F s F u T | F s F u r | F s F u u | F s F u e | F s F u F | F s F u a | F s F u l | F s F u s | F s F u e | F s F e T | F s F e r | F s F e u | F s F e e | F s F e F | F s F e a | F s F e l | F s F e s | F s F e e | F s F F T | F s F F r | F s F F u | F s F F e | F s F F F | F s F F a | F s F F l | F s F F s | F s F F e | F s F a T | F s F a r | F s F a u | F s F a e | F s F a F | F s F a a | F s F a l | F s F a s | F s F a e | F s F l T | F s F l r | F s F l u | F s F l e | F s F l F | F s F l a | F s F l l | F s F l s | F s F l e | F s F s T | F s F s r | F s F s u | F s F s e | F s F s F | F s F s a | F s F s l | F s F s s | F s F s e | F s F e T | F s F e r | F s F e u | F s F e e | F s F e F | F s F e a | F s F e l | F s F e s | F s F e e | F s a T T | F s a T r | F s a T u | F s a T e | F s a T F | F s a T a | F s a T l | F s a T s | F s a T e | F s a r T | F s a r r | F s a r u | F s a r e | F s a r F | F s a r a | F s a r l | F s a r s | F s a r e | F s a u T | F s a u r | F s a u u | F s a u e | F s a u F | F s a u a | F s a u l | F s a u s | F s a u e | F s a e T | F s a e r | F s a e u | F s a e e | F s a e F | F s a e a | F s a e l | F s a e s | F s a e e | F s a F T | F s a F r | F s a F u | F s a F e | F s a F F | F s a F a | F s a F l | F s a F s | F s a F e | F s a a T | F s a a r | F s a a u | F s a a e | F s a a F | F s a a a | F s a a l | F s a a s | F s a a e | F s a l T | F s a l r | F s a l u | F s a l e | F s a l F | F s a l a | F s a l l | F s a l s | F s a l e | F s a s T | F s a s r | F s a s u | F s a s e | F s a s F | F s a s a | F s a s l | F s a s s | F s a s e | F s a e T | F s a e r | F s a e u | F s a e e | F s a e F | F s a e a | F s a e l | F s a e s | F s a e e | F s l T T | F s l T r | F s l T u | F s l T e | F s l T F | F s l T a | F s l T l | F s l T s | F s l T e | F s l r T | F s l r r | F s l r u | F s l r e | F s l r F | F s l r a | F s l r l | F s l r s | F s l r e | F s l u T | F s l u r | F s l u u | F s l u e | F s l u F | F s l u a | F s l u l | F s l u s | F s l u e | F s l e T | F s l e r | F s l e u | F s l e e | F s l e F | F s l e a | F s l e l | F s l e s | F s l e e | F s l F T | F s l F r | F s l F u | F s l F e | F s l F F | F s l F a | F s l F l | F s l F s | F s l F e | F s l a T | F s l a r | F s l a u | F s l a e | F s l a F | F s l a a | F s l a l | F s l a s | F s l a e | F s l l T | F s l l r | F s l l u | F s l l e | F s l l F | F s l l a | F s l l l | F s l l s | F s l l e | F s l s T | F s l s r | F s l s u | F s l s e | F s l s F | F s l s a | F s l s l | F s l s s | F s l s e | F s l e T | F s l e r | F s l e u | F s l e e | F s l e F | F s l e a | F s l e l | F s l e s | F s l e e | F s s T T | F s s T r | F s s T u | F s s T e | F s s T F | F s s T a | F s s T l | F s s T s | F s s T e | F s s r T | F s s r r | F s s r u | F s s r e | F s s r F | F s s r a | F s s r l | F s s r s | F s s r e | F s s u T | F s s u r | F s s u u | F s s u e | F s s u F | F s s u a | F s s u l | F s s u s | F s s u e | F s s e T | F s s e r | F s s e u | F s s e e | F s s e F | F s s e a | F s s e l | F s s e s | F s s e e | F s s F T | F s s F r | F s s F u | F s s F e | F s s F F | F s s F a | F s s F l | F s s F s | F s s F e | F s s a T | F s s a r | F s s a u | F s s a e | F s s a F | F s s a a | F s s a l | F s s a s | F s s a e | F s s l T | F s s l r | F s s l u | F s s l e | F s s l F | F s s l a | F s s l l | F s s l s | F s s l e | F s s s T | F s s s r | F s s s u | F s s s e | F s s s F | F s s s a | F s s s l | F s s s s | F s s s e | F s s e T | F s s e r | F s s e u | F s s e e | F s s e F | F s s e a | F s s e l | F s s e s | F s s e e | F s e T T | F s e T r | F s e T u | F s e T e | F s e T F | F s e T a | F s e T l | F s e T s | F s e T e | F s e r T | F s e r r | F s e r u | F s e r e | F s e r F | F s e r a | F s e r l | F s e r s | F s e r e | F s e u T | F s e u r | F s e u u | F s e u e | F s e u F | F s e u a | F s e u l | F s e u s | F s e u e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s e F T | F s e F r | F s e F u | F s e F e | F s e F F | F s e F a | F s e F l | F s e F s | F s e F e | F s e a T | F s e a r | F s e a u | F s e a e | F s e a F | F s e a a | F s e a l | F s e a s | F s e a e | F s e l T | F s e l r | F s e l u | F s e l e | F s e l F | F s e l a | F s e l l | F s e l s | F s e l e | F s e s T | F s e s r | F s e s u | F s e s e | F s e s F | F s e s a | F s e s l | F s e s s | F s e s e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F e T T T | F e T T r | F e T T u | F e T T e | F e T T F | F e T T a | F e T T l | F e T T s | F e T T e | F e T r T | F e T r r | F e T r u | F e T r e | F e T r F | F e T r a | F e T r l | F e T r s | F e T r e | F e T u T | F e T u r | F e T u u | F e T u e | F e T u F | F e T u a | F e T u l | F e T u s | F e T u e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e T F T | F e T F r | F e T F u | F e T F e | F e T F F | F e T F a | F e T F l | F e T F s | F e T F e | F e T a T | F e T a r | F e T a u | F e T a e | F e T a F | F e T a a | F e T a l | F e T a s | F e T a e | F e T l T | F e T l r | F e T l u | F e T l e | F e T l F | F e T l a | F e T l l | F e T l s | F e T l e | F e T s T | F e T s r | F e T s u | F e T s e | F e T s F | F e T s a | F e T s l | F e T s s | F e T s e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e r T T | F e r T r | F e r T u | F e r T e | F e r T F | F e r T a | F e r T l | F e r T s | F e r T e | F e r r T | F e r r r | F e r r u | F e r r e | F e r r F | F e r r a | F e r r l | F e r r s | F e r r e | F e r u T | F e r u r | F e r u u | F e r u e | F e r u F | F e r u a | F e r u l | F e r u s | F e r u e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e r F T | F e r F r | F e r F u | F e r F e | F e r F F | F e r F a | F e r F l | F e r F s | F e r F e | F e r a T | F e r a r | F e r a u | F e r a e | F e r a F | F e r a a | F e r a l | F e r a s | F e r a e | F e r l T | F e r l r | F e r l u | F e r l e | F e r l F | F e r l a | F e r l l | F e r l s | F e r l e | F e r s T | F e r s r | F e r s u | F e r s e | F e r s F | F e r s a | F e r s l | F e r s s | F e r s e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e u T T | F e u T r | F e u T u | F e u T e | F e u T F | F e u T a | F e u T l | F e u T s | F e u T e | F e u r T | F e u r r | F e u r u | F e u r e | F e u r F | F e u r a | F e u r l | F e u r s | F e u r e | F e u u T | F e u u r | F e u u u | F e u u e | F e u u F | F e u u a | F e u u l | F e u u s | F e u u e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e u F T | F e u F r | F e u F u | F e u F e | F e u F F | F e u F a | F e u F l | F e u F s | F e u F e | F e u a T | F e u a r | F e u a u | F e u a e | F e u a F | F e u a a | F e u a l | F e u a s | F e u a e | F e u l T | F e u l r | F e u l u | F e u l e | F e u l F | F e u l a | F e u l l | F e u l s | F e u l e | F e u s T | F e u s r | F e u s u | F e u s e | F e u s F | F e u s a | F e u s l | F e u s s | F e u s e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e F T T | F e F T r | F e F T u | F e F T e | F e F T F | F e F T a | F e F T l | F e F T s | F e F T e | F e F r T | F e F r r | F e F r u | F e F r e | F e F r F | F e F r a | F e F r l | F e F r s | F e F r e | F e F u T | F e F u r | F e F u u | F e F u e | F e F u F | F e F u a | F e F u l | F e F u s | F e F u e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e F F T | F e F F r | F e F F u | F e F F e | F e F F F | F e F F a | F e F F l | F e F F s | F e F F e | F e F a T | F e F a r | F e F a u | F e F a e | F e F a F | F e F a a | F e F a l | F e F a s | F e F a e | F e F l T | F e F l r | F e F l u | F e F l e | F e F l F | F e F l a | F e F l l | F e F l s | F e F l e | F e F s T | F e F s r | F e F s u | F e F s e | F e F s F | F e F s a | F e F s l | F e F s s | F e F s e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e a T T | F e a T r | F e a T u | F e a T e | F e a T F | F e a T a | F e a T l | F e a T s | F e a T e | F e a r T | F e a r r | F e a r u | F e a r e | F e a r F | F e a r a | F e a r l | F e a r s | F e a r e | F e a u T | F e a u r | F e a u u | F e a u e | F e a u F | F e a u a | F e a u l | F e a u s | F e a u e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e a F T | F e a F r | F e a F u | F e a F e | F e a F F | F e a F a | F e a F l | F e a F s | F e a F e | F e a a T | F e a a r | F e a a u | F e a a e | F e a a F | F e a a a | F e a a l | F e a a s | F e a a e | F e a l T | F e a l r | F e a l u | F e a l e | F e a l F | F e a l a | F e a l l | F e a l s | F e a l e | F e a s T | F e a s r | F e a s u | F e a s e | F e a s F | F e a s a | F e a s l | F e a s s | F e a s e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e l T T | F e l T r | F e l T u | F e l T e | F e l T F | F e l T a | F e l T l | F e l T s | F e l T e | F e l r T | F e l r r | F e l r u | F e l r e | F e l r F | F e l r a | F e l r l | F e l r s | F e l r e | F e l u T | F e l u r | F e l u u | F e l u e | F e l u F | F e l u a | F e l u l | F e l u s | F e l u e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e l F T | F e l F r | F e l F u | F e l F e | F e l F F | F e l F a | F e l F l | F e l F s | F e l F e | F e l a T | F e l a r | F e l a u | F e l a e | F e l a F | F e l a a | F e l a l | F e l a s | F e l a e | F e l l T | F e l l r | F e l l u | F e l l e | F e l l F | F e l l a | F e l l l | F e l l s | F e l l e | F e l s T | F e l s r | F e l s u | F e l s e | F e l s F | F e l s a | F e l s l | F e l s s | F e l s e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e s T T | F e s T r | F e s T u | F e s T e | F e s T F | F e s T a | F e s T l | F e s T s | F e s T e | F e s r T | F e s r r | F e s r u | F e s r e | F e s r F | F e s r a | F e s r l | F e s r s | F e s r e | F e s u T | F e s u r | F e s u u | F e s u e | F e s u F | F e s u a | F e s u l | F e s u s | F e s u e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e s F T | F e s F r | F e s F u | F e s F e | F e s F F | F e s F a | F e s F l | F e s F s | F e s F e | F e s a T | F e s a r | F e s a u | F e s a e | F e s a F | F e s a a | F e s a l | F e s a s | F e s a e | F e s l T | F e s l r | F e s l u | F e s l e | F e s l F | F e s l a | F e s l l | F e s l s | F e s l e | F e s s T | F e s s r | F e s s u | F e s s e | F e s s F | F e s s a | F e s s l | F e s s s | F e s s e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/04/02/Algorithm_Hacks.html",
            "relUrl": "/2023/04/02/Algorithm_Hacks.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Binary Calculator",
            "content": "&lt;html&gt; &lt;head&gt; &lt;title&gt;Binary Calculator&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Binary Calculator&lt;/h1&gt; &lt;form&gt; &lt;input type=&quot;text&quot; id=&quot;first-number&quot; placeholder=&quot;First Number&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;second-number&quot; placeholder=&quot;Second Number&quot;&gt; &lt;button type=&quot;button&quot; id=&quot;add-button&quot;&gt;+&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;subtract-button&quot;&gt;-&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;multiply-button&quot;&gt;*&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;divide-button&quot;&gt;/&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;modulo-button&quot;&gt;%&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;clear-button&quot;&gt;Clear&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;/form&gt; &lt;script&gt; function binaryToDecimal(binary) { var decimal = 0; var power = 0; for (var i = binary.length - 1; i &gt;= 0; i--) { decimal += binary[i] * Math.pow(2, power); power++; } return decimal; } function decimalToBinary(decimal) { var binary = &quot;&quot;; while (decimal &gt; 0) { binary = decimal % 2 + binary; decimal = Math.floor(decimal / 2); } return binary; } function add(a, b) { return a + b; } function subtract(a, b) { return a - b; } function multiply(a, b) { return a * b; } function divide(a, b) { return a / b; } function modulo(a, b) { return a % b; } function calculate(a, b, operation) { var decimalA = binaryToDecimal(a); var decimalB = binaryToDecimal(b); var decimalResult = operation(decimalA, decimalB); var binaryResult = decimalToBinary(decimalResult); return binaryResult; } var firstNumber = document.getElementById(&quot;first-number&quot;); var secondNumber = document.getElementById(&quot;second-number&quot;); var addButton = document.getElementById(&quot;add-button&quot;); var subtractButton = document.getElementById(&quot;subtract-button&quot;); var moduloButton = document.getElementById(&quot;modulo-button&quot;); var clearButton = document.getElementById(&quot;clear-button&quot;); var result = document.getElementById(&quot;result&quot;); addButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, add); }); subtractButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, subtract); }); multiplyButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, multiply); }); divideButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, divide); }); moduloButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, modulo); }); clearButton.addEventListener(&quot;click&quot;, function() { firstNumber.value = &quot;&quot;; secondNumber.value = &quot;&quot;; result.innerHTML = &quot;&quot;; }); &lt;/script&gt; &lt;/body&gt; &lt;/html var multiplyButton = document.getElementById(&quot;multiply-button&quot;); var divideButton = document.getElementById(&quot;divide-button&quot;); var moduloButton = document.getElementById(&quot;modulo-button&quot;); var clearButton = document.getElementById(&quot;clear-button&quot;); var result = document.getElementById(&quot;result&quot;); addButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, add); }); subtractButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, subtract); }); multiplyButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, multiply); }); divideButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, divide); }); moduloButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, modulo); }); clearButton.addEventListener(&quot;click&quot;, function() { firstNumber.value = &quot;&quot;; secondNumber.value = &quot;&quot;; result.innerHTML = &quot;&quot;; }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . File &lt;tokenize&gt;:112 &lt;/script&gt; ^ IndentationError: unindent does not match any outer indentation level .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/binary/calculator/2023/04/02/.binarycalc.html",
            "relUrl": "/binary/calculator/2023/04/02/.binarycalc.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "5.5 & 5.6 Hacks",
            "content": "Unit 5.5 Blog Notes . When you create a GitHub repository it requests a license type. | There were many lawyers who made a profession out of patents | Qualcomm desires compensation for derivative work and requires a royalty payment for the use of ideas and patents. | Utilizing software under the GPL license could forfeit your ability to charge for the software and related patents. | The GPL open source license mandates that any work derived from the original must be free and the code must be shared. | The cost of using software under the GPL license might be greater than anticipated due to the loss of rights to charge for the software and patents. | Open source licenses such as the GPL have specific guidelines for sharing and distributing works derived from the original. | Companies like Qualcomm aim to be reimbursed for the usage of their patents and ideas, even within the realm of open source software. | . Creative Commons Zero v1.0 Universal . The Creative Commons CC0 Public Domain Dedication relinquishes any copyright claims on a work that you have created and opens it up for the use of the global public. | . Open Source MIT License . The MIT License enables the free use of code and the creation and distribution of proprietary versions. Generally, the author of software under the MIT License desires acknowledgment, which may be as basic as including their name in comments. A proprietary project can be kept private on GitHub. | . Unit 5.6 Blog Notes . Personal Identifiable Information (PII) is information that can be used to identify a person. | PII can be easily obtained through social media, online searches, and other online activities. | Be cautious of the information you share online, as it can be easily accessed by others. | Keep sensitive information such as financial credentials, two-factor authentication codes, and social security numbers private. | Multi-factor authentication and biometrics can increase the security of your systems. | Symmetric and Asymmetric Encryption can also enhance the security of your systems. | Phishing and malware are potential threats that can compromise the security of your PII. | It is important to regularly review your PII vulnerabilities and take steps to protect your information. | . Units 5.5 &amp; 5.6 Reflections . 1) Personal Identifiable Information (PII) is information that can be used to identify a specific individual, such as their name, social security number, date of birth, address, or phone number. In the context of computer science, PII is often collected and stored by websites, applications, and organizations. In a project I have seen, PII was collected from users during the registration process and was used to personalize their experience on the website. . 2) The exposure of PII can have serious consequences for individuals, such as identity theft, financial fraud, and privacy violations. It is important for organizations to properly secure and manage PII to prevent these types of incidents from occurring. Good passwords are typically long, complex, and random, making them difficult to guess or crack. On the other hand, bad passwords are short, easily guessable, or commonly used. Another step that can be used to assist in authentication is two-factor authentication (2FA), which adds an extra layer of security by requiring something you know (such as a password) and something you have (such as a smartphone) to access an account. . 3) Symmetric encryption is a method of encryption where the same key is used for both encryption and decryption. This means that both the sender and recipient of the encrypted message must have access to the same key in order to communicate securely. On the other hand, asymmetric encryption uses two different keys: one for encryption and one for decryption. This allows for secure communication between two parties without having to exchange the key beforehand. . 4) One example of encryption used in AWS deployment is the use of Secure Sockets Layer (SSL) certificates, which encrypt communication between a user&#39;s browser and a website to prevent eavesdropping and tampering. . 5) Personally, I have not fallen for any phishing schemes up till this point. A phishing scheme I have learned about is one where an attacker sends an email that appears to be from a trusted source, such as a bank or an online retailer, and asks the recipient to click on a link or provide sensitive information. Another common phishing technique is to create a fake login page that resembles a legitimate website, in an attempt to trick the user into entering their username and password. Finally, malicious attachments can also be used as a phishing scheme. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cb/5.5/5.6/hacks/2023/04/02/.5-5.6-hacks.html",
            "relUrl": "/cb/5.5/5.6/hacks/2023/04/02/.5-5.6-hacks.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "5.3 & 5.4 Hacks",
            "content": "Unit 5.3 . What age groups use Facebook vs TikTok . TikTok 60 percent of US users are aged between 16-24 | 23.7 percent of Facebook users in the US are aged between 25 and 34 years of age | . Why do virtual assistants have female voices? Amazon, Alexa, Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . Female voices can be seen as being soothing or calming, attributing to overall customer satisfaction | Yes, this was likely purposeful and is harmful, because it attributes a wide demographic of tech users to associate personal assistants as being a woman’s job or role:this reinforces sexism . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) . | Applications such as Netflix, Amazon, and Facebook use algorithms to display posts or items that they believe you would want to see . | These algorithms use data collected from your account | This can fortify biased information | . HP Computers are Racist . The HP computer not being able to pick up the face of people with darker skin is harmful, as it can infer that the computer believes that those with darker skin are not human - due to the fact that the program is supposed to recognize human faces. | This issue should absolutely be corrected | The creator of the video believes that HP computers are racist! They recognize the face of his white friend, Wanda, but not his. | . Hacks . Write summary/thoughts/conclusions from each of the exercises above. Focus on avoiding Bias in algorithms or code you write. . Regarding the use of social media, it was found that TikTok has a high proportion of US users aged 16-24, while Facebook has a higher percentage of users aged 25-34. With regards to virtual assistants having female voices, it was determined that this was likely a purposeful decision by companies like Amazon, Alexa, Google, and Apple Siri, as female voices are perceived to be soothing and calming. However, this decision reinforces sexism and associates personal assistants as being a female role, which is harmful. The use of algorithms by companies such as Netflix, Amazon, and Facebook can reinforce biased information, as these algorithms use data collected from the user&#39;s account to display content that they believe the user would like to see. Finally, the issue of an HP computer not being able to recognize the faces of people with darker skin was deemed harmful and should be corrected, as this implies that the computer does not view them as human. In conclusion, the use of algorithms and AI systems in today&#39;s technology has a significant impact on how people are perceived and treated. To ensure that technology is developed and used in an ethical and unbiased manner, it is essential to consider the potential consequences and impact of the decisions made during the development process. This includes being mindful of the biases that may exist in the data sets used to train algorithms and the potential impact of these biases on the users. . Unit 5.4 . Crowdsourcing . Crowdsourcing helps to reduce computer bias by reaching outside the bounds of a given community | Wikipedia relies on crowdsourced information | Although it may contain inaccuracies, these are often corrected by the self-regulated community, leading many to view it as a more trustworthy source than official information. | Cryptocurrency and its underlying blockchain technology ensure the security of financial transactions through validation by three independent miners. In the event of an error, the process is rechecked. | This crowdsourced innovation has prompted rethinking of currency by governments, and blockchain algorithms are being explored for securing sensitive data, such as medical records. | COVID data provides insights into areas that are effectively addressing the pandemic and those that are not. This information has a significant impact on decisions such as attending public events, traveling by plane, and wearing masks. The community of data analysts and researchers will drive new approaches to analyzing and utilizing data that affects our lives. | . Hacks . Think of a use case for crowdsourcing in your project … CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? What kind of data could you capture at N@tM to make the evening interesting? Perhaps use this data to impress Teachers during finals week. . At N@TM, we can conduct a survey to determine how many students have trouble with finding suitable cars that meet their criteria. Our project purpose is to help ease the car searching process, especially for students such as ourselves - so this form of crowdsourcing can be very helpful to bettering our overall project and website. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cb/5.3/5.4/hacks/2023/04/02/.3-5.4-hacks.html",
            "relUrl": "/cb/5.3/5.4/hacks/2023/04/02/.3-5.4-hacks.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "5.1 & 5.2 Blog",
            "content": "Notes . Chat GPT was sponsored by Microsoft and now has 10 billion dollars since they think it&#39;s the google killer. The GPT saves from the secondary clicking, don’t know the source (cite sources). Good because you can answer right away. | Computer bias: Are we inserting our own bias into our programs? Can an AI be biased? Ex. HP facial scan bias based on skintones | Digital Divide: There is division between social classes and access to technology | . 5.1 Blog Post Reflection . Three Benefits of computing: | . 1) Increased productivity and efficiency through automation of tasks. . 2) Enhanced scientific research and discovery through data analysis and simulation. . 3) Improved communication and access to information through the internet. . Three Harmful Effects of computing: | . 1) Increased dependence on technology and potential for digital addiction. . 2) Decreased privacy and security due to the collection and storage of personal information. . 3) Job loss and unemployment due to automation of certain tasks. . The effects of Dopamine: | Personally, I believe that video games can be quite addicting for some people. However, I believe that the dependency on video games and affect that they have on an individual&#39;s livelihood depend on the individual themself. If a person holds themself accountable for their hours online, then I think that there are no issues and that the impacts on studying can be eliminated. | . 5.2 Blog Post Reflection . 1) In the digital world, one can empower themselves by preventing cyber bullying and by developing skills to protect their privacy online. To add, they can also seek out various different perspectives and opinions online to help broaden their understanding of the real and digital world. . 2) One who is digitally empowered can use their knowledge to teach others. At Del Norte, students can help each other understand technology better and have discussions regarding online privacy and safety. . 3) At times, paper or red tape can prevent digital empowerment. This is because they do not support the use of technology. At Del Norte, I do not believe that such barriers are common as most classes have options to take digital notes and many assignments are performed/completed via a device such as a computer or laptop. In other parts of the world, even in San Diego County, there are schools in which not all of the students can afford to own their own devices. This prevents digital empowerment and is known as digital divide. . Three beneficial effects of your projects based on Unit 5.1 . 1) Easy access to information on a variety of cars . 2) Helps users find a car that fits their needs . 3) Introduces users to a variety of cars they may not have known about, ie. diesel, electric, etc.&#39; . Three harmful effects . 1) The promotion of pollution-inducing vehicles . 2) If consumers become overly reliant on the information provided by the website, they may neglect to conduct their own research or seek additional input from other sources, potentially leading to poor decision making. . 3) Our website may reduce the need for a car salesperson to provide information on a given vehicle. This can have an effect on that line of work - affecting those who have that job. . Pros/Cons of internet blockers at routers and lack of admin passwords on lab machines at school . Pros: | . 1) Increased control and management over internet access, allowing for a safer and more productive environment. . 2) Reduction in distractions and improved focus on academic tasks. . 3) Improved security by limiting the potential for unauthorized changes or installations on the system. . Cons: | . 1) Difficulty for students to access personal accounts or online tools needed for their education. . 2) Difficulty in installing necessary software or tools for specific classes or projects. . 3) Difficulty for students to access personal accounts or online tools needed for their education. . My concerns regarding digital divide . Inequality in access to education and job opportunities, as those without access to technology may have limited resources and information. | Reduced innovation and economic growth in certain communities, as those without access to technology may not have the means to contribute to or benefit from the technological advancements of society. | Worsening of socio-economic differences, as those without access to technology may face even greater challenges in areas such as finance, healthcare, and government services. | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cb/5.1/5.2/2023/04/02/.1-5.1.html",
            "relUrl": "/cb/5.1/5.2/2023/04/02/.1-5.1.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is O(1). | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # The output only outputs values 1, 2, and 3 # Though there are no duplicate values in the set, only one of each value is printed # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # Both sets and hashmaps/hashtables can be used to store values # . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # List for the genres # Dictionary for the track list # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # Add the set class # This will create a set of unique producers instead of a list, which will automatically remove any duplicates. # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: {&#39;Frank Dukes&#39;, &#39;Louis Bell&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;}} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) lover_album[&quot;genre&quot;] = [&quot;Pop&quot;, &quot;Electropop&quot;, &quot;Rock&quot;] # How would add an additional genre to the dictionary, like electropop? # By updating the value of the &quot;genre&quot; key # This will update the &quot;genre&quot; key&#39;s value to a list that includes both &quot;Rock&quot; and &quot;Electropop&quot; # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Electropop&#39;, &#39;Rock&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) for k,v in lover_album[&quot;tracks&quot;].items(): print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # Using the same approach as before # However, this time only printing the &quot;tracks&quot; key and its values . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Electropop&#39;, &#39;Rock&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} 1: I Forgot That You Existed 2: Cruel Summer 3: Lover 4: The Man 5: The Archer 6: I Think He Knows 7: Miss Americana &amp; The Heartbreak Prince 8: Paper Rings 9: Cornelia Street 10: Death By A Thousand Cuts 11: London Boy 12: Soon You&#39;ll Get Better (feat. Dixie Chicks) 13: False God 14: You Need To Calm Down 15: Afterglow 16: Me! (feat. Brendon Urie of Panic! At The Disco) 17: It&#39;s Nice To Have A Friend 18: Daylight 19: All Of The Girls You Loved Before . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # Error checking for inputs # Making the search function more specific/detailed # It would be more user-friendly to provide specific search options, such as &quot;search by track name&quot;, &quot;search by producer&quot;, or &quot;search by release date&quot;. . [&#39;Pop&#39;, &#39;Synth-pop&#39;] . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | . . Expand upon the code given to you, possible improvements in comments . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed]] . | . My favorite Taylor Swift song is &quot;All Too Well&quot; because of its raw emotion and evocative storytelling. The lyrics paint a vivid picture of a past relationship and its subsequent heartbreak, and Taylor&#39;s haunting vocals and piano melodies perfectly capture the sadness and nostalgia of the situation. It&#39;s a powerful and relatable anthem for anyone who has ever gone through a difficult breakup. . Build your own album showing features of a python dictionary | . cars = { &quot;Toyota&quot;: { &quot;model&quot;: &quot;Camry&quot;, &quot;year&quot;: 2021, &quot;color&quot;: &quot;red&quot;, &quot;features&quot;: [&quot;backup camera&quot;, &quot;Bluetooth connectivity&quot;, &quot;lane departure warning&quot;] }, &quot;Honda&quot;: { &quot;model&quot;: &quot;Civic&quot;, &quot;year&quot;: 2022, &quot;color&quot;: &quot;black&quot;, &quot;features&quot;: [&quot;adaptive cruise control&quot;, &quot;Apple CarPlay&quot;, &quot;blind spot monitoring&quot;] }, &quot;Ford&quot;: { &quot;model&quot;: &quot;Mustang&quot;, &quot;year&quot;: 2020, &quot;color&quot;: &quot;blue&quot;, &quot;features&quot;: [&quot;heated and cooled seats&quot;, &quot;keyless entry&quot;, &quot;remote start&quot;] } } # Accessing and printing data from the dictionary print(cars[&quot;Toyota&quot;][&quot;model&quot;]) print(cars[&quot;Honda&quot;][&quot;year&quot;]) print(cars[&quot;Ford&quot;][&quot;features&quot;][1]) . Camry 2022 keyless entry . car_models = {} for make, details in cars.items(): car_models[details[&quot;model&quot;]] = details[&quot;color&quot;] # Print the car models and their colors print(car_models) . {&#39;Camry&#39;: &#39;red&#39;, &#39;Civic&#39;: &#39;black&#39;, &#39;Mustang&#39;: &#39;blue&#39;} .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Unit 4.3a Parallel Computing Hacks",
            "content": "Hacks . AP Classroom. Provide answers and thoughts on theoretical question form college board Video in section 4.3. They start at about the 9 minute mark. . Example 1 | . If we run Process X on Processor 1 and Process Y on Processor 2 in parallel, we can complete all three processes in a minimum of 50 seconds. During the first 50 seconds, Process X runs on Processor 1 while Process Y runs on Processor 2 for 10 seconds. After Process Y finishes, Process Z can run on Processor 2 for 30 seconds while Process X is still running on Processor 1. Finally, after Process Z completes, Process X takes an additional 10 seconds to finish running. Thus, the entire sequence of processes can be completed in 50 seconds, which is the time it takes for Process X to run. . Example 2 | . Running Process A and Process B sequentially would take 70 seconds (25 seconds for Process A and 45 seconds for Process B). However, running them in parallel would take only 45 seconds, which is the duration of Process B, as it takes longer than Process A. Hence, parallel processing reduces the total processing time by 25 seconds. . Data Structures. Build a List Comprehension example . list = [calc(item) for item in items] | . Starting code . fruits = [&quot;apples&quot;, &quot;bananas&quot;, &quot;pears&quot;, &quot;oranges&quot;, &quot;grapes&quot;] grocery_num = 0 for i in fruits: grocery_num += 1 print(grocery_num) . 5 . Modified code using list comprehension . fruits = [&quot;apples&quot;, &quot;bananas&quot;, &quot;pears&quot;, &quot;oranges&quot;, &quot;grapes&quot;] # Use a list comprehension to create a new list containing all the elements in the fruits list # Use the len() to get the length of the new list - equivalent to the number of items in the original fruits list grocery_num = len([fruit for fruit in fruits]) # Print the result print(grocery_num) . 5 .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/data%20structures/space%20and%20time%20complexity/hacks/2023/03/28/parallel-computing-hacks.html",
            "relUrl": "/data%20structures/space%20and%20time%20complexity/hacks/2023/03/28/parallel-computing-hacks.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Cal State University of San Marcos Presentation",
            "content": "CSUSM Presentation Notes . Video + Selfie . Here is a selfie from the event and a video from the activity we did at the end! . . Introduction . Don&#39;t let failures define you | CS degree is very versatile | Cal State University San Marcos is the 21st school out of 23 Cal States | National leader in social mobility for students (turnover from social economic status after graduating) | CSUSM has new degrees: Masters in cyber security &amp; Computer engineering | Transitioning majors is not dramatic, it is fairly easy at Cal State San Marcos | Stem majors: Physics, chemistry, biochemistry, biotechnology, math, computer science, software engineering, electrical engineering | CSUSM has many clubs such as Robotics, 3D Printing, Women in STEM | . Internships . Campus events and job fairs | Networking | Emails | Apply even if you feel unqualified | Ask faculty members to review application and essays when applying | . Programs . Summer scholars: A paid 10 week program in which you research with an advisor. | Quantum Bridge Program: Incoming students get to work and research in the field of quantum mechanics and physics | . Research . Cal State San Marcos has many research programs for cancer research, meteorite research, etc. | . Opportunities . Look for and apply for grants and scholarships, they help with paying for college | Try to avoid loans | FAFSA: Free Application for Federal Student Aid | There are 2 types of loans: | . Subsidized: Partially funded by the government, interest on the loan starts 6 months after the end of the semester | Unsubsidized: Interest on loan accumulates immediately after the end of the semester | Work/Life after college . Public institutions: Military, government contractors, etc. | Private companies | Masters and PhDs | . Reflection . As a student, I found the presentation by Cal State University San Marcos to be very informative and encouraging. One of the key takeaways for me was the emphasis on not letting failures define me. I think this is an important mindset to have, especially in a STEM major where there are often challenges and setbacks. Another thing that stood out to me was the versatility of a Computer Science degree. It was mentioned that CS majors have the opportunity to work in various industries and fields, which is reassuring since it means that there are many different career paths to choose from. I was also impressed by the programs offered at CSUSM. The Masters in Cybersecurity and Computer Engineering are degrees that I would definitely consider pursuing. Additionally, the Summer Scholars program and Quantum Bridge program both seem like great opportunities for hands-on research experience. The various STEM clubs at CSUSM, such as Robotics and 3D Printing, also caught my attention. I think these clubs would be a great way to connect with other students who share similar interests and to learn from their experiences. Another key topiic that stuck with me was the emphasis on seeking out grants and scholarships to help pay for college. With the rising costs of tuition and the burden of student loans, it&#39;s crucial to explore every option available to alleviate some of the financial strain. I also appreciated the information on FAFSA and the different types of loans available, such as subsidized and unsubsidized. Understanding the difference between these two types of loans and how they work can help me make informed decisions about my financial future. Furthermore, the presentation highlighted the importance of internships and networking to gain experience and advance in my field. Lastly, the point made about applying for internships even if I feel unqualified is reassuring as it reminds me that sometimes, taking risks can lead to unexpected opportunities and growth. Overall, this presentation provided valuable insights into the various aspects of college and gave me a better understanding of what to expect in terms of finances, opportunities, and career paths. As I continue my academic journey, I will keep these insights in mind and utilize the resources available to me to make the most of my college experience. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/seed/csusm/2023/03/28/CSUSM-presentation-notes.html",
            "relUrl": "/seed/csusm/2023/03/28/CSUSM-presentation-notes.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "Focus Areas for our lesson",
            "content": "Building Simulation/Interaction using Lists and Iteration . Introduction (5 minutes): . Ask students to think of a game or simulation that they enjoy playing or interacting with. | Discuss the key components of that game or simulation, and how those components interact with each other. | Introduce the concept of lists and iteration as tools for creating those components and interactions in code. | . Instruction (30 minutes): . Introduce the concept of building a simulation or interaction using lists and iteration. | Explain how lists can be used to store information about objects or components in the simulation or interaction. | Demonstrate how iteration can be used to update the state of those objects or components over time. | Show examples of how these concepts can be used in Python code to create a basic simulation or interaction. | . Activity (20 minutes): . Provide students with a starter code that includes a list of objects or components, and a loop to iterate through that list and update their state. | Ask students to modify the code to add user input, such as mouse clicks or key presses, that affect the state of the objects or components in the simulation or interaction. | Encourage students to experiment with different types of user input and how they can affect the simulation or interaction. | . Wrap-up (5 minutes): . Ask students to share their modified code and explain how they used lists and iteration to create a simulation or interaction that responds to user input. | Discuss how these concepts can be applied in other areas of computer science and programming. | . Assessment: . Evaluate students based on their ability to modify the starter code to add user input and create a simulation or interaction that responds appropriately. | Provide feedback on the clarity and efficiency of their code. | Observe students during the activity to assess their understanding of lists and iteration. | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/college%20board/lesson/2023/03/26/team-plan.html",
            "relUrl": "/college%20board/lesson/2023/03/26/team-plan.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "Team EAAR Lesson Plan - Data Structures and Iteration through Visualization",
            "content": "Objective: . To teach students about data structures, specifically lists, dictionaries, and 2D arrays | To teach students about iteration | To teach students how to store list and dictionary content in databases | To reinforce these concepts by building simulations/interactions using lists and iteration | To improve on previous lessons and topics by building on existing knowledge | . Materials: . Whiteboard and markers | Computers for each student or group of students | Python programming language installed on each computer | Access to a database management system (e.g. SQLite) | . Procedures: . Introduction (10 minutes) . Start by introducing the concept of data structures and their importance in programming. Briefly explain what lists, dictionaries, and 2D arrays are and how they are used in programming. Introduce the concept of iteration and how it is used in programming. . Visualization (20 minutes) . Use a whiteboard or visual aids to demonstrate how lists, dictionaries, and 2D arrays work. Show examples of different types of data that can be stored in each type of data structure. Demonstrate how iteration works using a visual example. . Building Simulations/Interactions (30 minutes) . Have students work in pairs or small groups to build a simple simulation or interaction using lists and iteration. Encourage them to be creative and to think about different types of data they can store in lists and dictionaries. Circulate around the classroom and provide assistance as needed. . Storing List and Dictionary Content in Databases (20 minutes) . Explain how to store list and dictionary content in databases using Python. Use an example database management system (e.g. SQLite) to demonstrate how to create a database and how to store data in it. Have students practice creating a simple database and storing data in it. . Review (10 minutes) . Review the concepts covered in the lesson, including data structures, iteration, and storing data in databases. Have students share their simulations/interactions and discuss how they used lists and iteration to create them. . Extra Notes . Monitor student progress during the simulation/interaction building portion of the lesson. | Evaluate student understanding through observation and discussion. | Assign homework to reinforce the concepts covered in the lesson, such as building a more complex simulation using lists and iteration or storing data in a database. | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/college%20board/lesson/2023/03/26/lesson-plan.html",
            "relUrl": "/college%20board/lesson/2023/03/26/lesson-plan.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "Individual Plans for CPT",
            "content": "College Board Requirements . &lt;/p&gt; &lt;/p&gt; Program Purpose and Function | The purpose of this program is to calculate the average miles per gallon (MPG) for a trip based on user input. The program prompts the user to enter the distance and fuel used for each entry in their trip, calculates the total mileage and fuel used for the trip, and then calculates the average MPG by dividing the total mileage by the total fuel used. Finally, the program displays the average MPG to the user. | . Data Abstraction | This code utilizes data abstraction by encapsulating the logic for calculating the average MPG in a separate function, calculate_avg_mpg(). This function takes two input parameters, trip_mileage and fuel_used, which are both lists of floating-point values representing the distance and fuel used for each entry in the trip. The function then returns the average MPG as a floating-point value. | . Managing Complexity | This code manages complexity by breaking down the problem into smaller, more manageable parts. The program uses loops to iterate through the user input and store it in lists, which are then passed to the calculate_avg_mpg() function for processing. By separating the input collection and processing logic into different functions, the code becomes more modular and easier to understand. | . Procedural Abstraction | This code utilizes procedural abstraction by separating the user input collection and processing logic into different functions. The main() function is responsible for prompting the user to enter the number of entries and the distance and fuel used for each entry. The calculate_avg_mpg() function is responsible for calculating the average MPG based on the input values passed to it. | . Algorithm Implementation | The algorithm implemented by this code is straightforward. The program prompts the user to enter the number of entries for their trip, initializes empty lists for trip mileage and fuel used, iterates through the number of entries and prompts the user to enter the distance and fuel used for each entry, calculates the total mileage and fuel used for the trip, calculates the average MPG by dividing the total mileage by the total fuel used, and finally displays the average MPG to the user. | . Testing | To test this code, a user can run the program and enter sample input values for the distance and fuel used for each entry. The output of the program can be verified manually by calculating the average MPG for the entered values and comparing it to the output displayed by the program. Additionally, a user can test the program with different input values to ensure that it handles various scenarios correctly. | . &lt;/table&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; def calculate_avg_mpg(trip_mileage, fuel_used): # Calculate the total mileage and fuel used total_mileage = sum(trip_mileage) total_fuel_used = sum(fuel_used) # Calculate the average MPG by dividing total mileage by total fuel used return total_mileage / total_fuel_used def main(): # Initialize a variable to track whether the user wants to continue continue_calculation = True # Keep looping until the user indicates that they don&#39;t want to continue while continue_calculation: # Prompt the user to enter the number of entries for their trip num_entries = int(input(&quot;Enter the number of entries for your trip: &quot;)) # Initialize empty lists for trip mileage and fuel used trip_mileage = [] fuel_used = [] # Iterate through the number of entries and prompt the user to enter the distance and fuel used for each entry for i in range(num_entries): trip_mileage.append(float(input(&quot;Enter the distance in miles for entry #{}: &quot;.format(i+1)))) fuel_used.append(float(input(&quot;Enter the fuel amount used in gallons for entry #{}: &quot;.format(i+1)))) # Call calculate_avg_mpg() to calculate the average MPG and store the result in a variable average_mpg = calculate_avg_mpg(trip_mileage, fuel_used) # Display the result to the user print(&quot;The average MPG for your trip is: {:.2f}&quot;.format(average_mpg)) # Ask the user if they want to calculate another trip&#39;s average MPG continue_response = input(&quot;Do you want to calculate another trip&#39;s average MPG? (y/n): &quot;) if continue_response.lower() != &#39;y&#39;: continue_calculation = False # Call the main function main() . The average MPG for your trip is: 1.00 . Reflection/Plans . Highlights . Overall, I think this program does a good job of calculating the average MPG for a trip based on the distance and fuel used. One thing that stands out to me is the use of separate lists for the distance and fuel used, which allows for easy iteration through each entry of the trip and accurate calculation of the total mileage and fuel used. I also like the use of procedural abstraction with the calculate_avg_mpg() function, which makes the main function easier to read and understand. . Improvements . One thing that could be improved in this program is the user input process. Right now, the program simply prompts the user for input without any validation or error handling. I can add some error handling to ensure that the user is entering valid input, such as checking that the distance and fuel used are both positive numbers. Additionally, I can also provide more detailed output to the user, such as displaying the individual mileage and fuel used for each entry in addition to the average MPG. Lastly, I still need to test my code more using different test cases - to ensure that it properly works. . Overall . Overall, I think this program is a good starting point for calculating the average MPG for a trip, but there are certainly areas for improvement and additional features that could be added to make the program more user-friendly and versatile. . import requests url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;d3a3e94748msh74bb629320d5734p160ceajsn7f28f4859ea2&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;Niue&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . Country Totals country_name Niue cases 8 deaths 0 region total_recovered 7 new_deaths 0 new_cases 0 serious_critical 0 active_cases 1 total_cases_per_1m_population 4,860 deaths_per_1m_population 0 total_tests 0 tests_per_1m_population 0 . &lt;/div&gt; . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/college%20board/cpt/2023/03/26/cpt-plan.html",
            "relUrl": "/college%20board/cpt/2023/03/26/cpt-plan.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "Data Structures - Space and Time Complexity Hacks",
            "content": "Notes . Programmers should care about space and time complexity to optimize code for better performance and scalability, especially for large-scale applications. | Different types of sorting algorithms have different time complexities, ranging from O(n^2) to O(n log n) to O(n + k). | Time and space complexity are important when choosing an algorithm since they determine the algorithm&#39;s efficiency in terms of time and memory usage. | The choice of algorithm depends on the problem and its specific requirements for time and space efficiency. | General patterns for determining an algorithm&#39;s time and space complexity include the number of inputs, the size of input data, the number of loops or recursive calls, and the use of data structures such as arrays, lists, and trees. | . Lesson Questions . Why do you think a programmer should care about space and time complexity? | A programmer should care about space and time complexity because it affects the performance and efficiency of their code. Space complexity refers to how much memory an algorithm or data structure needs to solve a problem, while time complexity refers to the amount of time it takes for an algorithm to solve a problem. Understanding the space and time complexity of code helps programmers optimize their code for better performance and scalability, which is important especially for large-scale applications. . Do you think this is a time complexity or space complexity or both problem? | This code snippet seems to be dealing with both time and space complexity. The image management function involves operations such as image scaling, metadata retrieval, and image conversion to base64 format, which can require a significant amount of memory and processing time. The use of large image sizes in the scale_image function also affects the space complexity of the code, as it increases the memory requirements for image processing. Therefore, optimizing the code for better space and time complexity could improve its performance and efficiency. . Hacks . Record your findings when testing the time elapsed of the different algorithms. | O(1) is the most efficient algorithm when it comes to time since its performance stays the same regardless of the size of the input. O(n^2) is good for smaller inputs, however its performance decreases as the input size increases. O(n) is the second best option for smaller inputs, but its performance is directly proportional to the size of the input, making it less suitable for larger inputs. . Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. | The different types of sorting algorithms and their time complexity are as follows: Bubble Sort: O(n^2) Insertion Sort: O(n^2) Selection Sort: O(n^2) Merge Sort: O(n log n) Quick Sort: O(n log n) (worst case O(n^2)) Heap Sort: O(n log n) Counting Sort: O(n + k) (k is the range of numbers to be sorted) Radix Sort: O(nk) (k is the number of digits in the largest number to be sorted) . Why is time and space complexity important when choosing an algorithm? | Time and space complexity are important when choosing an algorithm because they determine how efficient the algorithm is. Time complexity refers to how long it takes the algorithm to complete, while space complexity refers to how much memory the algorithm requires. Depending on the problem at hand, certain algorithms may be better suited than others in terms of time and space efficiency. . Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? | No, you should not always use a constant time algorithm and you should not, never use an exponential time algorithm. The choice of algorithm depends on the problem at hand and the specific requirements for time and space efficiency. Some problems may be solvable only with an exponential time algorithm, while others may require a constant time algorithm to meet the efficiency requirements. . What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? | Some general patterns for determining an algorithm&#39;s time and space complexity include the number of inputs (n), the size of the input data (k), the number of loops or recursive calls in the algorithm, and the use of data structures such as arrays, lists, and trees. . Complete the Time and Space Complexity analysis questions linked below. Practice | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/data%20structures/space%20and%20time%20complexity/hacks/2023/03/25/space-time-complexity-hacks.html",
            "relUrl": "/data%20structures/space%20and%20time%20complexity/hacks/2023/03/25/space-time-complexity-hacks.html",
            "date": " • Mar 25, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "Big Idea 2 Quiz Reflection + Correction(s)",
            "content": "Reflection/Overview . For the Big Idea 2 Quiz I unfortunately got one question wrong. Overall, I feel like I did well on the quiz and am happy with my performance. However, I recognize that there is always room for improvement and I am committed to doing better on future quizzes. Upon reflection, I realized that the question I got wrong was one that I didn&#39;t spend enough time on. I made the mistake of assuming I knew the answer and didn&#39;t take the time to carefully read and analyze the question. In the future, I need to remind myself to slow down and read each question thoroughly, even if I think I know the answer. Additionally, I noticed that I didn&#39;t use any specific strategies for answering multiple choice questions. For example, I didn&#39;t eliminate any obviously incorrect answers before choosing the best option. I will work on incorporating these strategies into my test-taking process to help me make more informed choices and avoid making careless mistakes. . Overall, I am happy with my performance on the quiz as I scored a 24/25, but I recognize that there is always room for improvement. By taking the time to analyze my mistakes and develop strategies for future quizzes, I am confident that I will continue to improve and achieve my academic goals. . . For this question, it was required to identify the sequence of steps that would lead to the desired entry. Although I correctly selected Option B, I mistakenly chose Option C as well. The reason behind this error was due to my misinterpretation of the question stem, where I answered &quot;Sort by subject, then sort by year, then filter by photographer&quot; instead of the correct response &quot;Sort by subject, then filter by year, then filter by photographer.&quot; For this question, I was deciding on which of the two options to select as they both were similar. After review, I have realized that C is incorrect as the sequence of steps does not exclude any entries that have an unknown year. Therefore, the entry located in the first row of the spreadsheet will have a year value of -1. Option D was correct as by sorting the spreadsheet on column C in ascending order, entries will be arranged by year. Any entries with unknown years can be removed by filtering. Similarly, filtering by photographer will eliminate any entries without a known photographer. It&#39;s worth noting that the filters won&#39;t affect the order of the entries. Therefore, after applying the filters, the photograph with the earliest year value will appear in the first row of the spreadsheet. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%202.4/cb/mcq/2023/03/20/big-idea-2-mcq.html",
            "relUrl": "/unit%202.4/cb/mcq/2023/03/20/big-idea-2-mcq.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "Unit 2.4b Hacks",
            "content": "Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. . | In this implementation, do you see procedural abstraction? . | . Procedural abstraction is displayed in this implementation through the division of tasks among various functions. For example, the menu function acts as a control method where the user can select what operation they want to complete. The create() function follows this, prompting the user for the necessary details, and then establishing a cursor object to connect with the database. After executing the appropriate SQL command to insert the data, the connection and cursor objects are closed. Therefore, the entire process of creating a user record is conducted by calling the create() function. This is an example of procedural abstraction, as there is a specific function dedicated to each task and the user can complete the desired operation by using the menu function. . In 2.4a or 2.4b lecture . Do you see data abstraction? Complement this with Debugging example. | . This implementation showcases data abstraction, as the details of working with the database are kept hidden from the user. They are provided with a simple interface to perform common CRUD (Create, Read, Update, Delete) operations on their data. This is done through a menu system, which provides an abstraction of the operations available and hides the implementation details from the user. As an example of this, when the user select the &quot;create&quot; option from the menu, they are prompted to input the required information (name, uid, password, dob). The implementation then automatically takes care of inserting this information into the database. . | . Debugging Example . In the example below, I am running the READ operation, when debugging it highlights the specific section of the code that is being executed when running this operation. This allows me to know if my code is running properly, or points me in the right direction if my code does not work as intended - because it lays out how my code is ACTUALLY running. | . . In the second example below, I have input the details for a new car record to be added to the database (cars.db). On the top left corner, you can see the new information for each attribute such as &quot;body_type&quot; or &quot;make&quot; being created for the car. | . . Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . What is a database schema? | A database schema is the structure of a database system, which describes the objects (tables, views, procedures, functions, etc.) and relationships between them. . What is the purpose of identity Column in SQL database? | The purpose of an identity column in a SQL database is to provide an auto-incremental, unique number for each row in a table. This allows the database to generate a unique identifier for each row. . What is the purpose of a primary key in SQL database? | The purpose of a primary key in a SQL database is to uniquely identify each record in a table. A primary key is composed of one or more columns, which must contain unique values. . What are the Data Types in SQL table? | The data types in a SQL table can vary depending on the type of database being used, but the most common data types are integer, decimal, string, date, and boolean. . import sqlite3 database = &#39;instance/cars.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;cars&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_make&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_model&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_price&#39;, &#39;INTEGER&#39;, 1, None, 0) (4, &#39;_year&#39;, &#39;INTEGER&#39;, 1, None, 0) (5, &#39;_desc&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (6, &#39;_engine&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (7, &#39;_body_style&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (8, &#39;_owner&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) . Create . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? | In the OOP, the create() function is called on an object. On the other hand, in imperative programming, several variables need to be created within the function instead. Both of these approaches have their own advantages and disadvantages. The imperative approach is less prone to errors but also less efficient, whereas the create() in the OOP version does the opposite. Furthermore, the imperative version does not censor passwords whereas OOP is better for working with large amounts of data. If one is dealing with a small amount of data, then the imperative approach may be more suitable. . Explain purpose of SQL INSERT. Is this the same as User init? | The SQL INSERT statement used in the code is used to add a new row of data to the &quot;users&quot; table of a SQLite database. The INSERT INTO statement defines the table name and columns for the data to be added, and the VALUES clause provides the values associated with each column. The ? placeholders help prevent SQL injection attacks by cleaning user input. The INSERT INTO statement can be likened to the init method of a User class, as they both serve to create a record or object within the database. The distinction is that the INSERT INTO statement only adds data to a table in the database, while the init method of a User class creates a new instance of a class in memory. . import sqlite3 database = &#39;instance/cars.db&#39; def create(): make = input(&quot;Enter the make of the car:&quot;) model = input(&quot;Enter the model:&quot;) price = input(&quot;Enter the price:&quot;) year = input(&quot;Enter the year:&quot;) desc = input(&quot;Enter a description of the car:&quot;) body_style = input(&quot;Enter the body style of the car:&quot;) engine = input(&quot;Enter the engine type:&quot;) owner = input(&quot;Who&#39;s the owner of the car?&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO cars (_make, _model, _price, _year, _desc, _body_style, _engine, _owner) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;, (make, model, price, year, desc, body_style, engine, owner)) # Commit the changes to the database conn.commit() print(f&quot;A new car has been added&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . Error while executing the INSERT: UNIQUE constraint failed: cars._desc . Read . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | A connection object is an object used to establish a connection between a database and an application. It allows the application to interact with the database by executing queries, retrieving data, and performing other database operations. . Same for cursor object? | A cursor object is an object used to traverse the records in a database result set. It provides methods to retrieve and manipulate the results of a query. . Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | The conn object contains attributes such as hostname, port, database, user, and password, while the cursor object contains attributes such as description and rowcount. . Is &quot;results&quot; an object? How do you know? | Yes, &quot;results&quot; can be classified as an object as it is not only identified as a local variable, but it also stores data which is required for the program to work. This data includes the name, user id and date of birth of each user.&quot; . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # open connection object: contains methods and attributes you need to alter data # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM cars&#39;).fetchall() #results is an object # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;BMW&#39;, &#39;2 Series&#39;, 34000, 2021, &#39;The BMW 2 series is a stylish sports coupe that drives just as well as it looks.&#39;, &#39;2.0L four-cylinder&#39;, &#39;coupe&#39;, &#39;John Doe&#39;) (3, &#39;Toyota&#39;, &#39;Sienna&#39;, 50000, 2023, &#39;New Description! Sienna!&#39;, &#39;V6&#39;, &#39;Van&#39;, &#39;SiennaDoe&#39;) (7, &#39;Hyundai&#39;, &#39;Veloster N&#39;, 48000, 2019, &#39;New Description!&#39;, &#39;V6&#39;, &#39;Coupe&#39;, &#39;Jan&#39;) (8, &#39;Lucid&#39;, &#39;Air&#39;, 72000, 2023, &#39;The all new, all electric, Lucid Air!&#39;, &#39;Electric&#39;, &#39;Sedan&#39;, &#39;Lucid&#39;) (9, &#39;Kia&#39;, &#39;Stinger&#39;, 42000, 2021, &#39;Kia Stinger, sports sedan!&#39;, &#39;V6&#39;, &#39;Sedna&#39;, &#39;Sting&#39;) (10, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;) (11, &#39;Ford&#39;, &#39;Mustang&#39;, 50000, 2019, &#39;American Muscle!&#39;, &#39;V8&#39;, &#39;Coupe&#39;, &#39;Mr. Muscle&#39;) . Update . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? The section of code that includes the term &quot;hacked&quot; is used to create a password that meets the minimum length requirement for safety reasons (2 characters). The message variable has been set to &quot;hacked&quot; to make it clear that the password has been auto-generated. . | Explain try/except, when would except occur? . | If any errors occur while trying to execute an SQL command, the try/except block can be used to handle them. In this situation, the try block holds the SQL command to change the user&#39;s password. If any sqlite3.Error exceptions take place, the code in the except block is implemented. . What code seems to be repeated in each of these examples to point, why is it repeated? | In order to execute SQL commands, it is necessary to create a connection to the database. This connection is represented by a cursor object, which is used to interact with the database. This connection and cursor object must be established for each example, as it is a crucial component of processing SQL commands. At the end, the cursor and connection objects must be closed in order to free up resources and avoid any memory issues. . import sqlite3 database = &#39;instance/cars.db&#39; # Take the inputs for each attribute def update(): id = input(&quot;Enter the id of the car:&quot;) make = input(&quot;Enter the make of the car:&quot;) model = input(&quot;Enter the model:&quot;) price = input(&quot;Enter the price:&quot;) year = input(&quot;Enter the year:&quot;) desc = input(&quot;Enter a description of the car:&quot;) body_style = input(&quot;Enter the body style of the car:&quot;) engine = input(&quot;Enter the engine type:&quot;) owner = input(&quot;Who&#39;s the owner of the car?&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table # Trying to add dob right now... cursor.execute(&quot;UPDATE cars SET _make = ?, _model = ?, _price = ?, _year = ?, _desc = ?, _body_style = ?, _engine = ?, _owner = ? WHERE id = ?&quot;, (make, model, price, year, desc, body_style, engine, owner, id)) if cursor.rowcount == 0: # Car ID not found print(f&quot;No id was found in the table&quot;) # Commit new data else: print(f&quot;Car with the id {id} has been updated&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while updating the record:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . Car with the id 10 has been updated . Delete . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | Yes, delete is a dangerous operation because it permanently removes a record from a database, so it should be handled with care. . In the print statemements, what is the &quot;f&quot; and what does {uid} do? | The &quot;f&quot; in the print statement is a format specifier, which defines the type of data being printed. The {uid} refers to the user id of the user being deleted, which is passed in as a parameter. . import sqlite3 def delete(): id = input(&quot;Select the ID of the car you wish to remove: &quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Validate the input try: id = int(id) except ValueError: print(&quot;Invalid input: ID must be an integer.&quot;) return try: # Use a parameterized query to prevent SQL injection c = conn.cursor() c.execute(&quot;DELETE FROM cars WHERE id = ?&quot;, (id,)) conn.commit() print(f&quot;Row with ID {id} has been deleted.&quot;) except sqlite3.Error as e: print(f&quot;Error deleting row with ID {id}: {e}&quot;) finally: # Close the connection cursor.close conn.close() delete() . Row with ID 8 has been deleted. . CRUD Menu . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? . the user wishes to conduct multiple tasks in a single session (such as creating and deleting), they can do so by accessing the same menu repeatedly. Any of the CRUD operations can be repeated until the user decides to exit the program via the escape button. . | def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Perform Jupyter &#39;Run All&#39; prior to starting menu . Could you refactor this menu? Make it work with a List? | Yes, you can add the options for each operation into a list. . def menu(): options = [&#39;c&#39;, &#39;r&#39;, &#39;u&#39;, &#39;d&#39;, &#39;s&#39;] operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() in options: if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation) == 0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Perform Jupyter &#39;Run All&#39; prior to starting menu .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%202.4b/cb/hacks/2023/03/20/2.4b-hacks.html",
            "relUrl": "/unit%202.4b/cb/hacks/2023/03/20/2.4b-hacks.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post32": {
            "title": "Unit 2.4a Hacks",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Questions and Answers . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | | . The Flask app object is a core component of the Flask web application framework. It represents a Flask application instance and is responsible for handling incoming HTTP requests, routing those requests to the appropriate view functions, and returning HTTP responses to the client. In other words, the Flask app object is the entry point of a Flask application, where the application is configured and initialized. The Flask app object is working when it is successfully created and running, which means that the Flask application is up and running, and ready to receive and process incoming requests from clients. . SQLAlchemy db object SQLAlchemy is an Object-Relational Mapping (ORM) library that provides a high-level interface for interacting with relational databases using Python code. The SQLAlchemy db object is an instance of the SQLAlchemy class, which represents a database connection and provides a high-level interface for executing database operations such as querying, inserting, updating, and deleting data. The SQLAlchemy db object is working when it is successfully connected to the target database, which means that the database connection is established, and the ORM is ready to interact with the database by executing SQL queries and mapping database tables to Python objects. | Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. | class User | . The provided code defines a class called User that represents a user object and provides a CRUD (Create, Read, Update, Delete) interface for managing users stored in a SQLite database. The purpose of the User class is to create a model that can be used to interact with user data in the database. . db.Model inheritance | . The db.Model inheritance indicates that the class is a SQLAlchemy ORM model that will be used to interact with the database. The tablename class attribute specifies the name of the table in the database. . init method | . The init method is the constructor for the User class. It takes four parameters:name, uid, password, and dob. The name parameter is the name of the user, uid is a unique identifier for the user, password is the user&#39;s password, and dob is the user&#39;s date of birth. If the password or dob parameters are not provided, they will be set to default values. . &quot;@property, @.setter&quot;&lt;/li&gt; &lt;/ul&gt; The @property and @.setter decorators are used to define getter and setter methods for the class properties. These allow the class properties to be accessed and modified like object attributes.&lt;/p&gt; create, read, update, delete methods | . The create, read, update, and delete methods are the CRUD methods for managing user data in the database. create method adds a new user to the database, read method retrieves user data from the database, update method updates user data in the database, and delete method removes user data from the database. . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object | For db.create_all(), the method creates all the tables defined in the SQLAlchemy models into the database. This method should be called once when initializing a new database. If the tables already exist in the database, it will not recreate them. . User Object Constructors | The user objects are created using the User constructor. The constructor takes in parameters like name, uid, password, and dob (date of birth). This is a convenient way to create user objects with the necessary attributes. . Try / Except | The try-except block is used to catch exceptions that may be raised when creating new objects. In this specific code, it catches the IntegrityError which occurs when the object to be created violates a unique constraint. This block ensures that if an error is raised, it will be caught, and a message will be printed indicating that the object already exists in the database. . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by | &quot;User.query.filter_by&quot; is used to query the database and retrieve a specific record based on the provided filter criteria. In this case, filter_by is used to filter the records based on the _uid column, which is equivalent to filtering records based on the uid attribute of the User class. . user.password | The &quot;user.password&quot; is used to retrieve the password associated with a user object. This is possible because the User class has a password attribute that corresponds to the password column in the database table. . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except | The purpose of user.find_by_uid() and try/except is to check if a user with the given uid already exists in the database. If a user with that uid is found, the function returns the existing user, otherwise it proceeds to create a new user. . user = User(...) | user = User(...) creates a new User object with the provided arguments for name, uid, and password. . user.dob and try/except | user.dob is used to store the date of birth of the new user. It is initially set to None and will be updated if a valid date is provided by the user. . user.create() and try/except | user.create() is a custom method that is used to add a new row to the users table in the database. It takes the User object and writes it to the database using SQLAlchemy&#39;s db.session.add() and db.session.commit() methods. The try/except block is used to catch any errors that may occur during the creation of the new user object and inform the user of the error. . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all | User.query.all() is a SQLAlchemy method that returns a list of all the User objects in the database. It&#39;s used to retrieve all the rows in a table. . json_ready assignment, google List Comprehension | json_ready is a list of dictionaries that&#39;s created by iterating over the list of User objects (table) and calling the read() method on each object. The json_ready list comprehension uses the user.read() method to get a dictionary of each user&#39;s attributes, which can be easily converted to JSON format. The json_ready list is then returned by the read() function. . My Hacks . Lesson Notes . db.Model:Inheritance - capable to make the class utilize database attributes and methods (getters and setters) - Init method instantiate an object from user class | Setters allow attributes to be changed | Getters enable the retrieval of a given object | . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///cars.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . from sqlalchemy import Column, Integer, Text, String, Boolean from sqlalchemy.exc import IntegrityError class Car(db.Model): __tablename__ = &quot;cars&quot; __table_args__ = {&#39;extend_existing&#39;: True} id = db.Column(db.Integer, primary_key=True) _make = db.Column(db.String(255), nullable=False, unique = False) _model = db.Column(db.String(255), nullable=False, unique = False) _price = db.Column(db.Integer, nullable=False, unique = False) _year = db.Column(db.Integer, nullable=False, unique = False) _desc = db.Column(db.String(255), nullable=False, unique = True) _engine = db.Column(db.String(255), nullable=False, unique = False) _body_style = db.Column(db.String(255), nullable=False, unique = False) _owner = db.Column(db.String(255), nullable=False, unique = False) def __init__(self, make, model, price, year, desc, body_style, engine, owner): # Adding instance attributes self._make = make self._model = model self._price = price self._year = year self._desc = desc self._body_style = body_style self._engine = engine self._owner = owner # Add getters and setters for make, model, price, year @property def make(self): return self._make @make.setter def make(self, make): self._make = make @property def model(self): return self._model @model.setter def model(self, model): self._model = model @property def price(self): return self._price @price.setter def price(self, price): self._price = price @property def year(self): return self._year @year.setter def year(self, year): self._year = year @property def desc(self): return self._desc @desc.setter def desc(self, desc): self._desc = desc @property def body_style(self): return self._body_style @body_style.setter def body_style(self, body_style): self._body_style = body_style @property def engine(self): return self._engine @engine.setter def engine(self, engine): self._engine = engine @property def owner(self): return self._owner @owner.setter def owner(self, owner): self._owner = owner def dictionary(self): dict = { &quot;make&quot; : self.make, &quot;model&quot; : self.model, &quot;price&quot; : self.price, &quot;year&quot; : self.year, &quot;desc&quot; : self.desc, &quot;body_style&quot; : self.body_style, &quot;engine&quot; : self.engine, &quot;owner&quot; : self.owner } return dict def __str__(self): return json.dumps(self.dictionary) def create(self): try: # creates a Car object from Car(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot; : self.id, &quot;make&quot; : self.make, &quot;model&quot; : self.model, &quot;price&quot; : self.price, &quot;year&quot; : self.year, &quot;desc&quot; : self.desc, &quot;body_style&quot; : self.body_style, &quot;engine&quot; : self.engine, &quot;owner&quot; : self.owner } # CRUD update: updates attributes # returns self def update(self, make=&quot;&quot;, model=&quot;&quot;, price=&quot;&quot;, year=&quot;&quot;, desc=&quot;&quot;, body_style=&quot;&quot;, engine=&quot;&quot;, owner=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(make) &gt; 0: self.make = make if len(model) &gt; 0: self.model = model if price &gt; 0: self.price(price) if year &gt; 0: self.year(year) if desc &gt;= 0: self.desc(desc) if len(body_style) &gt; 0: self.body_style(body_style) if len(engine) &gt; 0: self.engine(engine) if len(owner) &gt; 0: self.owner(owner) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None # Function to initialize the Cars def initCars(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; # db.init_app(app) db.create_all() &quot;&quot;&quot;Data for table&quot;&quot;&quot; car1 = Car(make=&quot;BMW&quot;, model=&quot;2 Series&quot;, price=34000, year=2021, desc=&quot;The BMW 2 series is a stylish sports coupe that drives just as well as it looks.&quot;, body_style=&quot;coupe&quot;, engine=&quot;2.0L four-cylinder&quot;, owner=&quot;John Doe&quot;) cars = [car1] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for car in cars: try: car.create() except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate car, or error: {car.id}&quot;) initCars() . Create a new car . import sqlite3 database = &#39;instance/cars.db&#39; def create(): make = input(&quot;Enter the make of the car:&quot;) model = input(&quot;Enter the model:&quot;) price = input(&quot;Enter the price:&quot;) year = input(&quot;Enter the year:&quot;) desc = input(&quot;Enter a description of the car:&quot;) body_style = input(&quot;Enter the body style of the car:&quot;) engine = input(&quot;Enter the engine type:&quot;) owner = input(&quot;Who&#39;s the owner of the car?&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO cars (_make, _model, _price, _year, _desc, _body_style, _engine, _owner) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;, (make, model, price, year, desc, body_style, engine, owner)) # Commit the changes to the database conn.commit() print(f&quot;A new car has been added&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new car has been added . Read existing records . def read(): with app.app_context(): table = Car.query.all() json_ready = [car.read() for car in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;make&#39;: &#39;BMW&#39;, &#39;model&#39;: &#39;2 Series&#39;, &#39;price&#39;: 34000, &#39;year&#39;: 2021, &#39;desc&#39;: &#39;The BMW 2 Series NEW DESCRIPTION!&#39;, &#39;body_style&#39;: &#39;Coupe&#39;, &#39;engine&#39;: &#39;4 cylinder&#39;, &#39;owner&#39;: &#39;DoeJohn&#39;}, {&#39;id&#39;: 7, &#39;make&#39;: &#39;Hyundai&#39;, &#39;model&#39;: &#39;Veloster N&#39;, &#39;price&#39;: 48000, &#39;year&#39;: 2019, &#39;desc&#39;: &#39;New Description!&#39;, &#39;body_style&#39;: &#39;Coupe&#39;, &#39;engine&#39;: &#39;V6&#39;, &#39;owner&#39;: &#39;Jan&#39;}, {&#39;id&#39;: 9, &#39;make&#39;: &#39;Kia&#39;, &#39;model&#39;: &#39;Stinger&#39;, &#39;price&#39;: 42000, &#39;year&#39;: 2021, &#39;desc&#39;: &#39;Kia Stinger, sports sedan!&#39;, &#39;body_style&#39;: &#39;Sedna&#39;, &#39;engine&#39;: &#39;V6&#39;, &#39;owner&#39;: &#39;Sting&#39;}, {&#39;id&#39;: 10, &#39;make&#39;: &#39;Dodge&#39;, &#39;model&#39;: &#39;Charger&#39;, &#39;price&#39;: 45000, &#39;year&#39;: 2021, &#39;desc&#39;: &#39;Vroom!&#39;, &#39;body_style&#39;: &#39;Sedan&#39;, &#39;engine&#39;: &#39;V8&#39;, &#39;owner&#39;: &#34;Scatpack&#39;s are cool&#34;}, {&#39;id&#39;: 11, &#39;make&#39;: &#39;Ford&#39;, &#39;model&#39;: &#39;Mustang&#39;, &#39;price&#39;: 50000, &#39;year&#39;: 2019, &#39;desc&#39;: &#39;American Muscle!&#39;, &#39;body_style&#39;: &#39;Coupe&#39;, &#39;engine&#39;: &#39;V8&#39;, &#39;owner&#39;: &#39;Mr. Muscle&#39;}, {&#39;id&#39;: 12, &#39;make&#39;: &#39;Kia&#39;, &#39;model&#39;: &#39;Rio&#39;, &#39;price&#39;: 22000, &#39;year&#39;: 2020, &#39;desc&#39;: &#39;Rioooooooo!&#39;, &#39;body_style&#39;: &#39;Sedan&#39;, &#39;engine&#39;: &#39;4 cylinder&#39;, &#39;owner&#39;: &#39;Blue&#39;}, {&#39;id&#39;: 13, &#39;make&#39;: &#39;TestMake&#39;, &#39;model&#39;: &#39;TestModel&#39;, &#39;price&#39;: 1000000, &#39;year&#39;: 2021, &#39;desc&#39;: &#39;TestDesc&#39;, &#39;body_style&#39;: &#39;NewBody&#39;, &#39;engine&#39;: &#39;V12&#39;, &#39;owner&#39;: &#39;Test&#39;}, {&#39;id&#39;: 14, &#39;make&#39;: &#39;BMW&#39;, &#39;model&#39;: &#39;2 Series&#39;, &#39;price&#39;: 34000, &#39;year&#39;: 2021, &#39;desc&#39;: &#39;The BMW 2 series is a stylish sports coupe that drives just as well as it looks.&#39;, &#39;body_style&#39;: &#39;coupe&#39;, &#39;engine&#39;: &#39;2.0L four-cylinder&#39;, &#39;owner&#39;: &#39;John Doe&#39;}] . Update an existing record . import sqlite3 database = &#39;instance/cars.db&#39; # Take the inputs for each attribute def update(): id = input(&quot;Enter the id of the car:&quot;) make = input(&quot;Enter the make of the car:&quot;) model = input(&quot;Enter the model:&quot;) price = input(&quot;Enter the price:&quot;) year = input(&quot;Enter the year:&quot;) desc = input(&quot;Enter a description of the car:&quot;) body_style = input(&quot;Enter the body style of the car:&quot;) engine = input(&quot;Enter the engine type:&quot;) owner = input(&quot;Who&#39;s the owner of the car?&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table # Trying to add dob right now... cursor.execute(&quot;UPDATE cars SET _make = ?, _model = ?, _price = ?, _year = ?, _desc = ?, _body_style = ?, _engine = ?, _owner = ? WHERE id = ?&quot;, (make, model, price, year, desc, body_style, engine, owner, id)) if cursor.rowcount == 0: # Car ID not found print(f&quot;No id was found in the table&quot;) # Commit new data else: print(f&quot;Car with the id {id} has been updated&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while updating the record:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . Car with the id 9 has been updated . Check the update . Read to check if the record has truly been updated . read() . [{&#39;id&#39;: 1, &#39;make&#39;: &#39;BMW&#39;, &#39;model&#39;: &#39;2 Series&#39;, &#39;price&#39;: 34000, &#39;year&#39;: 2021, &#39;desc&#39;: &#39;The BMW 2 Series NEW DESCRIPTION!&#39;, &#39;body_style&#39;: &#39;Coupe&#39;, &#39;engine&#39;: &#39;4 cylinder&#39;, &#39;owner&#39;: &#39;DoeJohn&#39;}, {&#39;id&#39;: 7, &#39;make&#39;: &#39;Hyundai&#39;, &#39;model&#39;: &#39;Veloster N&#39;, &#39;price&#39;: 48000, &#39;year&#39;: 2019, &#39;desc&#39;: &#39;New Description!&#39;, &#39;body_style&#39;: &#39;Coupe&#39;, &#39;engine&#39;: &#39;V6&#39;, &#39;owner&#39;: &#39;Jan&#39;}, {&#39;id&#39;: 9, &#39;make&#39;: &#39;Kia Stinger&#39;, &#39;model&#39;: &#39;45000&#39;, &#39;price&#39;: 2022, &#39;year&#39;: &#39;Kia Stinger, sports sedan!&#39;, &#39;desc&#39;: &#39;Sedan&#39;, &#39;body_style&#39;: &#39;Sedan&#39;, &#39;engine&#39;: &#39;V6&#39;, &#39;owner&#39;: &#39;&#39;}, {&#39;id&#39;: 10, &#39;make&#39;: &#39;Dodge&#39;, &#39;model&#39;: &#39;Charger&#39;, &#39;price&#39;: 45000, &#39;year&#39;: 2021, &#39;desc&#39;: &#39;Vroom!&#39;, &#39;body_style&#39;: &#39;Sedan&#39;, &#39;engine&#39;: &#39;V8&#39;, &#39;owner&#39;: &#34;Scatpack&#39;s are cool&#34;}, {&#39;id&#39;: 11, &#39;make&#39;: &#39;Ford&#39;, &#39;model&#39;: &#39;Mustang&#39;, &#39;price&#39;: 50000, &#39;year&#39;: 2019, &#39;desc&#39;: &#39;American Muscle!&#39;, &#39;body_style&#39;: &#39;Coupe&#39;, &#39;engine&#39;: &#39;V8&#39;, &#39;owner&#39;: &#39;Mr. Muscle&#39;}, {&#39;id&#39;: 12, &#39;make&#39;: &#39;Kia&#39;, &#39;model&#39;: &#39;Rio&#39;, &#39;price&#39;: 22000, &#39;year&#39;: 2020, &#39;desc&#39;: &#39;Rioooooooo!&#39;, &#39;body_style&#39;: &#39;Sedan&#39;, &#39;engine&#39;: &#39;4 cylinder&#39;, &#39;owner&#39;: &#39;Blue&#39;}, {&#39;id&#39;: 13, &#39;make&#39;: &#39;TestMake&#39;, &#39;model&#39;: &#39;TestModel&#39;, &#39;price&#39;: 1000000, &#39;year&#39;: 2021, &#39;desc&#39;: &#39;TestDesc&#39;, &#39;body_style&#39;: &#39;NewBody&#39;, &#39;engine&#39;: &#39;V12&#39;, &#39;owner&#39;: &#39;Test&#39;}, {&#39;id&#39;: 14, &#39;make&#39;: &#39;BMW&#39;, &#39;model&#39;: &#39;2 Series&#39;, &#39;price&#39;: 34000, &#39;year&#39;: 2021, &#39;desc&#39;: &#39;The BMW 2 series is a stylish sports coupe that drives just as well as it looks.&#39;, &#39;body_style&#39;: &#39;coupe&#39;, &#39;engine&#39;: &#39;2.0L four-cylinder&#39;, &#39;owner&#39;: &#39;John Doe&#39;}] . Delete an existing record . import sqlite3 def delete(): id = input(&quot;Select the ID of the car you wish to remove: &quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Validate the input try: id = int(id) except ValueError: print(&quot;Invalid input: ID must be an integer.&quot;) return try: # Use a parameterized query to prevent SQL injection c = conn.cursor() c.execute(&quot;DELETE FROM cars WHERE id = ?&quot;, (id,)) conn.commit() print(f&quot;Row with ID {id} has been deleted.&quot;) except sqlite3.Error as e: print(f&quot;Error deleting row with ID {id}: {e}&quot;) finally: # Close the connection cursor.close conn.close() delete() . Row with ID 5 has been deleted. . Run a read to check if the record has truly been deleted . read() . [{&#39;id&#39;: 1, &#39;make&#39;: &#39;BMW&#39;, &#39;model&#39;: &#39;2 Series&#39;, &#39;price&#39;: 34000, &#39;year&#39;: 2021, &#39;desc&#39;: &#39;The BMW 2 series is a stylish sports coupe that drives just as well as it looks.&#39;, &#39;body_style&#39;: &#39;coupe&#39;, &#39;engine&#39;: &#39;2.0L four-cylinder&#39;, &#39;owner&#39;: &#39;John Doe&#39;}, {&#39;id&#39;: 3, &#39;make&#39;: &#39;Toyota&#39;, &#39;model&#39;: &#39;Sienna&#39;, &#39;price&#39;: 50000, &#39;year&#39;: 2023, &#39;desc&#39;: &#39;New Description! Sienna!&#39;, &#39;body_style&#39;: &#39;Van&#39;, &#39;engine&#39;: &#39;V6&#39;, &#39;owner&#39;: &#39;SiennaDoe&#39;}, {&#39;id&#39;: 7, &#39;make&#39;: &#39;Hyundai&#39;, &#39;model&#39;: &#39;Veloster N&#39;, &#39;price&#39;: 48000, &#39;year&#39;: 2019, &#39;desc&#39;: &#39;New Description!&#39;, &#39;body_style&#39;: &#39;Coupe&#39;, &#39;engine&#39;: &#39;V6&#39;, &#39;owner&#39;: &#39;Jan&#39;}, {&#39;id&#39;: 8, &#39;make&#39;: &#39;Lucid&#39;, &#39;model&#39;: &#39;Air&#39;, &#39;price&#39;: 72000, &#39;year&#39;: 2023, &#39;desc&#39;: &#39;The all new, all electric, Lucid Air!&#39;, &#39;body_style&#39;: &#39;Sedan&#39;, &#39;engine&#39;: &#39;Electric&#39;, &#39;owner&#39;: &#39;Lucid&#39;}, {&#39;id&#39;: 9, &#39;make&#39;: &#39;Kia&#39;, &#39;model&#39;: &#39;Stinger&#39;, &#39;price&#39;: 42000, &#39;year&#39;: 2021, &#39;desc&#39;: &#39;Kia Stinger, sports sedan!&#39;, &#39;body_style&#39;: &#39;Sedna&#39;, &#39;engine&#39;: &#39;V6&#39;, &#39;owner&#39;: &#39;Sting&#39;}, {&#39;id&#39;: 10, &#39;make&#39;: &#39;&#39;, &#39;model&#39;: &#39;&#39;, &#39;price&#39;: &#39;&#39;, &#39;year&#39;: &#39;&#39;, &#39;desc&#39;: &#39;&#39;, &#39;body_style&#39;: &#39;&#39;, &#39;engine&#39;: &#39;&#39;, &#39;owner&#39;: &#39;&#39;}] . &lt;/div&gt; . | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%202.4a/cb/hacks/2023/03/20/2.4a-hacks.html",
            "relUrl": "/unit%202.4a/cb/hacks/2023/03/20/2.4a-hacks.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post33": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . What is the purpose of identity Column in SQL database? | What is the purpose of a primary key in SQL database? | What are the Data Types in SQL table? | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$dKm9cAQuN8UjZ4w6$1d5671d87dcf5db16efa3abf866a669f67c988e1f486dbf614bf74223eea5b03&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$Q2Lz8WgTyTg7wpAw$bfad03f7109c3357222e3f10bc82a86a3bee237c51179a45e46464fccb855cdf&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$u3vl7gdpYuzW0j09$eb7c64e407e64790fe85585d0175f45ba2794ee27a2efe96373b9c1fd5d6e735&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$pN2qjnPLo6sLQDN9$3bb48cbcd134524552c8615ad9fdb083feacebc16b70904dba2c189dc43f0c50&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$KuQbAU5jv4AZaFR1$2d4a24e3181391b0637ebd0bcb50b3b2b8aeac058c761a684d23abdae8c1c9af&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$r99JMkxAEXDOgrGo$15c82f528b56b526e1c5d989339110ed57c94b2d02bc5ae3221f98ab2ed2afbb&#39;, &#39;1921-10-21&#39;) (7, &#39;Ethan&#39;, &#39;ethan123&#39;, &#39;testpass&#39;, &#39;1880-01-01&#39;) (8, &#39;John&#39;, &#39;doe123&#39;, &#39;555&#39;, &#39;1890-01-01&#39;) (9, &#39;&#39;, &#39;&#39;, &#39;gothackednewpassword123&#39;, &#39;&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new user record has been created . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table # Trying to add dob right now... cursor.execute(&quot;UPDATE users SET _password = ?, _dob = ? WHERE _uid = ?&quot;, (password, dob, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . The row with user id ethan123 the password has been successfully updated . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() delete() . The row with uid was successfully deleted . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . A new user record doe123 has been created A new user record has been created . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation . import sqlite3 database = &#39;instance/cars.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;cars&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_make&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_model&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_price&#39;, &#39;INTEGER&#39;, 1, None, 0) (4, &#39;_year&#39;, &#39;INTEGER&#39;, 1, None, 0) (5, &#39;_desc&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (6, &#39;_engine&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (7, &#39;_body_style&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (8, &#39;_owner&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) . Create . import sqlite3 database = &#39;instance/cars.db&#39; def create(): make = input(&quot;Enter the make of the car:&quot;) model = input(&quot;Enter the model:&quot;) price = input(&quot;Enter the price:&quot;) year = input(&quot;Enter the year:&quot;) desc = input(&quot;Enter a description of the car:&quot;) body_style = input(&quot;Enter the body style of the car:&quot;) engine = input(&quot;Enter the engine type:&quot;) owner = input(&quot;Who&#39;s the owner of the car?&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO cars (_make, _model, _price, _year, _desc, _body_style, _engine, _owner) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;, (make, model, price, year, desc, body_style, engine, owner)) # Commit the changes to the database conn.commit() print(f&quot;A new car has been added&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . Error while executing the INSERT: UNIQUE constraint failed: cars._desc . Read . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # open connection object: contains methods and attributes you need to alter data # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM cars&#39;).fetchall() #results is an object # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;BMW&#39;, &#39;2 Series&#39;, 34000, 2021, &#39;The BMW 2 Series NEW DESCRIPTION!&#39;, &#39;4 cylinder&#39;, &#39;Coupe&#39;, &#39;DoeJohn&#39;) (7, &#39;Hyundai&#39;, &#39;Veloster N&#39;, 48000, 2019, &#39;New Description!&#39;, &#39;V6&#39;, &#39;Coupe&#39;, &#39;Jan&#39;) (9, &#39;Kia Stinger&#39;, &#39;45000&#39;, 2022, &#39;Kia Stinger, sports sedan!&#39;, &#39;Sedan&#39;, &#39;V6&#39;, &#39;Sedan&#39;, &#39;&#39;) (10, &#39;Dodge&#39;, &#39;Charger&#39;, 45000, 2021, &#39;Vroom!&#39;, &#39;V8&#39;, &#39;Sedan&#39;, &#34;Scatpack&#39;s are cool&#34;) (11, &#39;Ford&#39;, &#39;Mustang&#39;, 50000, 2019, &#39;American Muscle!&#39;, &#39;V8&#39;, &#39;Coupe&#39;, &#39;Mr. Muscle&#39;) (12, &#39;Kia&#39;, &#39;Rio&#39;, 22000, 2020, &#39;Rioooooooo!&#39;, &#39;4 cylinder&#39;, &#39;Sedan&#39;, &#39;Blue&#39;) (13, &#39;TestMake&#39;, &#39;TestModel&#39;, 1000000, 2021, &#39;TestDesc&#39;, &#39;V12&#39;, &#39;NewBody&#39;, &#39;Test&#39;) (14, &#39;BMW&#39;, &#39;2 Series&#39;, 34000, 2021, &#39;The BMW 2 series is a stylish sports coupe that drives just as well as it looks.&#39;, &#39;2.0L four-cylinder&#39;, &#39;coupe&#39;, &#39;John Doe&#39;) (15, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;) . Update . import sqlite3 database = &#39;instance/cars.db&#39; # Take the inputs for each attribute def update(): id = input(&quot;Enter the id of the car:&quot;) make = input(&quot;Enter the make of the car:&quot;) model = input(&quot;Enter the model:&quot;) price = input(&quot;Enter the price:&quot;) year = input(&quot;Enter the year:&quot;) desc = input(&quot;Enter a description of the car:&quot;) body_style = input(&quot;Enter the body style of the car:&quot;) engine = input(&quot;Enter the engine type:&quot;) owner = input(&quot;Who&#39;s the owner of the car?&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table # Trying to add dob right now... cursor.execute(&quot;UPDATE cars SET _make = ?, _model = ?, _price = ?, _year = ?, _desc = ?, _body_style = ?, _engine = ?, _owner = ? WHERE id = ?&quot;, (make, model, price, year, desc, body_style, engine, owner, id)) if cursor.rowcount == 0: # Car ID not found print(f&quot;No id was found in the table&quot;) # Commit new data else: print(f&quot;Car with the id {id} has been updated&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while updating the record:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . No id was found in the table . Delete . import sqlite3 def delete(): id = input(&quot;Select the ID of the car you wish to remove: &quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Validate the input try: id = int(id) except ValueError: print(&quot;Invalid input: ID must be an integer.&quot;) return try: # Use a parameterized query to prevent SQL injection c = conn.cursor() c.execute(&quot;DELETE FROM cars WHERE id = ?&quot;, (id,)) conn.commit() print(f&quot;Row with ID {id} has been deleted.&quot;) except sqlite3.Error as e: print(f&quot;Error deleting row with ID {id}: {e}&quot;) finally: # Close the connection cursor.close conn.close() delete() . Row with ID 16 has been deleted. . CRUD Menu . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (1, &#39;BMW&#39;, &#39;2 Series&#39;, 34000, 2021, &#39;The BMW 2 Series NEW DESCRIPTION!&#39;, &#39;4 cylinder&#39;, &#39;Coupe&#39;, &#39;DoeJohn&#39;) (7, &#39;Hyundai&#39;, &#39;Veloster N&#39;, 48000, 2019, &#39;New Description!&#39;, &#39;V6&#39;, &#39;Coupe&#39;, &#39;Jan&#39;) (9, &#39;Kia Stinger&#39;, &#39;45000&#39;, 2022, &#39;Kia Stinger, sports sedan!&#39;, &#39;Sedan&#39;, &#39;V6&#39;, &#39;Sedan&#39;, &#39;&#39;) (10, &#39;Dodge&#39;, &#39;Charger&#39;, 45000, 2021, &#39;Vroom!&#39;, &#39;V8&#39;, &#39;Sedan&#39;, &#34;Scatpack&#39;s are cool&#34;) (11, &#39;Ford&#39;, &#39;Mustang&#39;, 50000, 2019, &#39;American Muscle!&#39;, &#39;V8&#39;, &#39;Coupe&#39;, &#39;Mr. Muscle&#39;) (12, &#39;Kia&#39;, &#39;Rio&#39;, 22000, 2020, &#39;Rioooooooo!&#39;, &#39;4 cylinder&#39;, &#39;Sedan&#39;, &#39;Blue&#39;) (13, &#39;TestMake&#39;, &#39;TestModel&#39;, 1000000, 2021, &#39;TestDesc&#39;, &#39;V12&#39;, &#39;NewBody&#39;, &#39;Test&#39;) (14, &#39;BMW&#39;, &#39;2 Series&#39;, 34000, 2021, &#39;The BMW 2 series is a stylish sports coupe that drives just as well as it looks.&#39;, &#39;2.0L four-cylinder&#39;, &#39;coupe&#39;, &#39;John Doe&#39;) (15, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;) Row with ID 15 has been deleted. (1, &#39;BMW&#39;, &#39;2 Series&#39;, 34000, 2021, &#39;The BMW 2 Series NEW DESCRIPTION!&#39;, &#39;4 cylinder&#39;, &#39;Coupe&#39;, &#39;DoeJohn&#39;) (7, &#39;Hyundai&#39;, &#39;Veloster N&#39;, 48000, 2019, &#39;New Description!&#39;, &#39;V6&#39;, &#39;Coupe&#39;, &#39;Jan&#39;) (9, &#39;Kia Stinger&#39;, &#39;45000&#39;, 2022, &#39;Kia Stinger, sports sedan!&#39;, &#39;Sedan&#39;, &#39;V6&#39;, &#39;Sedan&#39;, &#39;&#39;) (10, &#39;Dodge&#39;, &#39;Charger&#39;, 45000, 2021, &#39;Vroom!&#39;, &#39;V8&#39;, &#39;Sedan&#39;, &#34;Scatpack&#39;s are cool&#34;) (11, &#39;Ford&#39;, &#39;Mustang&#39;, 50000, 2019, &#39;American Muscle!&#39;, &#39;V8&#39;, &#39;Coupe&#39;, &#39;Mr. Muscle&#39;) (12, &#39;Kia&#39;, &#39;Rio&#39;, 22000, 2020, &#39;Rioooooooo!&#39;, &#39;4 cylinder&#39;, &#39;Sedan&#39;, &#39;Blue&#39;) (13, &#39;TestMake&#39;, &#39;TestModel&#39;, 1000000, 2021, &#39;TestDesc&#39;, &#39;V12&#39;, &#39;NewBody&#39;, &#39;Test&#39;) (14, &#39;BMW&#39;, &#39;2 Series&#39;, 34000, 2021, &#39;The BMW 2 series is a stylish sports coupe that drives just as well as it looks.&#39;, &#39;2.0L four-cylinder&#39;, &#39;coupe&#39;, &#39;John Doe&#39;) . def menu(): options = [&#39;c&#39;, &#39;r&#39;, &#39;u&#39;, &#39;d&#39;, &#39;s&#39;] operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() in options: if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation) == 0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post34": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid toby Created new uid niko Created new uid lex Created new uid whit Created new uid indi Created new uid raven . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Found {&#39;id&#39;: 7, &#39;name&#39;: &#39;Ethan&#39;, &#39;uid&#39;: &#39;ethan123&#39;, &#39;dob&#39;: &#39;05-09-2006&#39;, &#39;age&#39;: 16} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;&#39;, &#39;uid&#39;: &#39;ethan123&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | . My Hacks . Lesson Notes . db.Model: Inheritance - capable to make the class utilize database attributes and methods (getters and setters) | Init method instantiate an object from user class | Setters allow attributes to be changed | Getters enable the retrieval of a given object | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///cars.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . from sqlalchemy import Column, Integer, Text, String, Boolean from sqlalchemy.exc import IntegrityError class Car(db.Model): __tablename__ = &quot;cars&quot; __table_args__ = {&#39;extend_existing&#39;: True} id = db.Column(db.Integer, primary_key=True) _make = db.Column(db.String(255), nullable=False, unique = False) _model = db.Column(db.String(255), nullable=False, unique = False) _price = db.Column(db.Integer, nullable=False, unique = False) _year = db.Column(db.Integer, nullable=False, unique = False) _desc = db.Column(db.String(255), nullable=False, unique = True) _engine = db.Column(db.String(255), nullable=False, unique = False) _body_style = db.Column(db.String(255), nullable=False, unique = False) _owner = db.Column(db.String(255), nullable=False, unique = False) def __init__(self, make, model, price, year, desc, body_style, engine, owner): # Adding instance attributes self._make = make self._model = model self._price = price self._year = year self._desc = desc self._body_style = body_style self._engine = engine self._owner = owner # Add getters and setters for make, model, price, year @property def make(self): return self._make @make.setter def make(self, make): self._make = make @property def model(self): return self._model @model.setter def model(self, model): self._model = model @property def price(self): return self._price @price.setter def price(self, price): self._price = price @property def year(self): return self._year @year.setter def year(self, year): self._year = year @property def desc(self): return self._desc @desc.setter def desc(self, desc): self._desc = desc @property def body_style(self): return self._body_style @body_style.setter def body_style(self, body_style): self._body_style = body_style @property def engine(self): return self._engine @engine.setter def engine(self, engine): self._engine = engine @property def owner(self): return self._owner @owner.setter def owner(self, owner): self._owner = owner def dictionary(self): dict = { &quot;make&quot; : self.make, &quot;model&quot; : self.model, &quot;price&quot; : self.price, &quot;year&quot; : self.year, &quot;desc&quot; : self.desc, &quot;body_style&quot; : self.body_style, &quot;engine&quot; : self.engine, &quot;owner&quot; : self.owner } return dict def __str__(self): return json.dumps(self.dictionary) def create(self): try: # creates a Car object from Car(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot; : self.id, &quot;make&quot; : self.make, &quot;model&quot; : self.model, &quot;price&quot; : self.price, &quot;year&quot; : self.year, &quot;desc&quot; : self.desc, &quot;body_style&quot; : self.body_style, &quot;engine&quot; : self.engine, &quot;owner&quot; : self.owner } # CRUD update: updates attributes # returns self def update(self, make=&quot;&quot;, model=&quot;&quot;, price=&quot;&quot;, year=&quot;&quot;, desc=&quot;&quot;, body_style=&quot;&quot;, engine=&quot;&quot;, owner=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(make) &gt; 0: self.make = make if len(model) &gt; 0: self.model = model if price &gt; 0: self.price(price) if year &gt; 0: self.year(year) if desc &gt;= 0: self.desc(desc) if len(body_style) &gt; 0: self.body_style(body_style) if len(engine) &gt; 0: self.engine(engine) if len(owner) &gt; 0: self.owner(owner) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None # Function to initialize the Cars def initCars(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; # db.init_app(app) db.create_all() &quot;&quot;&quot;Data for table&quot;&quot;&quot; car1 = Car(make=&quot;BMW&quot;, model=&quot;2 Series&quot;, price=34000, year=2021, desc=&quot;The BMW 2 series is a stylish sports coupe that drives just as well as it looks.&quot;, body_style=&quot;coupe&quot;, engine=&quot;2.0L four-cylinder&quot;, owner=&quot;John Doe&quot;) cars = [car1] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for car in cars: try: car.create() except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate car, or error: {car.id}&quot;) initCars() . Create a new car . import sqlite3 database = &#39;instance/cars.db&#39; def create(): make = input(&quot;Enter the make of the car:&quot;) model = input(&quot;Enter the model:&quot;) price = input(&quot;Enter the price:&quot;) year = input(&quot;Enter the year:&quot;) desc = input(&quot;Enter a description of the car:&quot;) body_style = input(&quot;Enter the body style of the car:&quot;) engine = input(&quot;Enter the engine type:&quot;) owner = input(&quot;Who&#39;s the owner of the car?&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO cars (_make, _model, _price, _year, _desc, _body_style, _engine, _owner) VALUES (?, ?, ?, ?, ?, ?, ?, ?)&quot;, (make, model, price, year, desc, body_style, engine, owner)) # Commit the changes to the database conn.commit() print(f&quot;A new car has been added&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new car has been added . Read existing records . def read(): with app.app_context(): table = Car.query.all() json_ready = [car.read() for car in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;make&#39;: &#39;BMW&#39;, &#39;model&#39;: &#39;2 Series&#39;, &#39;price&#39;: 34000, &#39;year&#39;: 2021, &#39;desc&#39;: &#39;The BMW 2 series is a stylish sports coupe that drives just as well as it looks.&#39;, &#39;body_style&#39;: &#39;coupe&#39;, &#39;engine&#39;: &#39;2.0L four-cylinder&#39;, &#39;owner&#39;: &#39;John Doe&#39;}, {&#39;id&#39;: 2, &#39;make&#39;: &#39;Lotus&#39;, &#39;model&#39;: &#39;Evora&#39;, &#39;price&#39;: 68000, &#39;year&#39;: 2019, &#39;desc&#39;: &#39;NEW DESCRIPTION!!&#39;, &#39;body_style&#39;: &#39;Coupe&#39;, &#39;engine&#39;: &#39;V6&#39;, &#39;owner&#39;: &#39;John Doe II&#39;}, {&#39;id&#39;: 3, &#39;make&#39;: &#39;Toyota&#39;, &#39;model&#39;: &#39;Sienna&#39;, &#39;price&#39;: 40000, &#39;year&#39;: 2019, &#39;desc&#39;: &#39;Reliable Van&#39;, &#39;body_style&#39;: &#39;Van&#39;, &#39;engine&#39;: &#39;Van&#39;, &#39;owner&#39;: &#39;Johnny Doe&#39;}, {&#39;id&#39;: 4, &#39;make&#39;: &#39;&#39;, &#39;model&#39;: &#39;&#39;, &#39;price&#39;: &#39;&#39;, &#39;year&#39;: &#39;&#39;, &#39;desc&#39;: &#39;&#39;, &#39;body_style&#39;: &#39;&#39;, &#39;engine&#39;: &#39;&#39;, &#39;owner&#39;: &#39;&#39;}] . Update an existing record . import sqlite3 database = &#39;instance/cars.db&#39; # Take the inputs for each attribute def update(): id = input(&quot;Enter the id of the car:&quot;) make = input(&quot;Enter the make of the car:&quot;) model = input(&quot;Enter the model:&quot;) price = input(&quot;Enter the price:&quot;) year = input(&quot;Enter the year:&quot;) desc = input(&quot;Enter a description of the car:&quot;) body_style = input(&quot;Enter the body style of the car:&quot;) engine = input(&quot;Enter the engine type:&quot;) owner = input(&quot;Who&#39;s the owner of the car?&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table # Trying to add dob right now... cursor.execute(&quot;UPDATE cars SET _make = ?, _model = ?, _price = ?, _year = ?, _desc = ?, _body_style = ?, _engine = ?, _owner = ? WHERE id = ?&quot;, (make, model, price, year, desc, body_style, engine, owner, id)) if cursor.rowcount == 0: # Car ID not found print(f&quot;No id was found in the table&quot;) # Commit new data else: print(f&quot;Car with the id {id} has been updated&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while updating the record:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . Car with the id 2 has been updated . Check the update . Read to check if the record has truly been updated . read() . [{&#39;id&#39;: 1, &#39;make&#39;: &#39;BMW&#39;, &#39;model&#39;: &#39;2 Series&#39;, &#39;price&#39;: 34000, &#39;year&#39;: 2021, &#39;desc&#39;: &#39;The BMW 2 series is a stylish sports coupe that drives just as well as it looks.&#39;, &#39;body_style&#39;: &#39;coupe&#39;, &#39;engine&#39;: &#39;2.0L four-cylinder&#39;, &#39;owner&#39;: &#39;John Doe&#39;}, {&#39;id&#39;: 2, &#39;make&#39;: &#39;Lotus&#39;, &#39;model&#39;: &#39;Evora&#39;, &#39;price&#39;: 68000, &#39;year&#39;: 2019, &#39;desc&#39;: &#39;NEW DESCRIPTION!!&#39;, &#39;body_style&#39;: &#39;Coupe&#39;, &#39;engine&#39;: &#39;V6&#39;, &#39;owner&#39;: &#39;John Doe II&#39;}, {&#39;id&#39;: 3, &#39;make&#39;: &#39;Toyota&#39;, &#39;model&#39;: &#39;Sienna&#39;, &#39;price&#39;: 40000, &#39;year&#39;: 2019, &#39;desc&#39;: &#39;Reliable Van&#39;, &#39;body_style&#39;: &#39;Van&#39;, &#39;engine&#39;: &#39;Van&#39;, &#39;owner&#39;: &#39;Johnny Doe&#39;}, {&#39;id&#39;: 4, &#39;make&#39;: &#39;&#39;, &#39;model&#39;: &#39;&#39;, &#39;price&#39;: &#39;&#39;, &#39;year&#39;: &#39;&#39;, &#39;desc&#39;: &#39;&#39;, &#39;body_style&#39;: &#39;&#39;, &#39;engine&#39;: &#39;&#39;, &#39;owner&#39;: &#39;&#39;}] . Delete an existing record . import sqlite3 def delete(): id = input(&quot;Select the ID of the car you wish to remove: &quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Validate the input try: id = int(id) except ValueError: print(&quot;Invalid input: ID must be an integer.&quot;) return try: # Use a parameterized query to prevent SQL injection c = conn.cursor() c.execute(&quot;DELETE FROM cars WHERE id = ?&quot;, (id,)) conn.commit() print(f&quot;Row with ID {id} has been deleted.&quot;) except sqlite3.Error as e: print(f&quot;Error deleting row with ID {id}: {e}&quot;) finally: # Close the connection cursor.close conn.close() delete() . Row with ID 2 has been deleted. . Run a read to check if the record has truly been deleted . read() . [{&#39;id&#39;: 1, &#39;make&#39;: &#39;BMW&#39;, &#39;model&#39;: &#39;2 Series&#39;, &#39;price&#39;: 34000, &#39;year&#39;: 2021, &#39;desc&#39;: &#39;The BMW 2 series is a stylish sports coupe that drives just as well as it looks.&#39;, &#39;body_style&#39;: &#39;coupe&#39;, &#39;engine&#39;: &#39;2.0L four-cylinder&#39;, &#39;owner&#39;: &#39;John Doe&#39;}, {&#39;id&#39;: 3, &#39;make&#39;: &#39;Toyota&#39;, &#39;model&#39;: &#39;Sienna&#39;, &#39;price&#39;: 40000, &#39;year&#39;: 2019, &#39;desc&#39;: &#39;Reliable Van&#39;, &#39;body_style&#39;: &#39;Van&#39;, &#39;engine&#39;: &#39;Van&#39;, &#39;owner&#39;: &#39;Johnny Doe&#39;}, {&#39;id&#39;: 4, &#39;make&#39;: &#39;&#39;, &#39;model&#39;: &#39;&#39;, &#39;price&#39;: &#39;&#39;, &#39;year&#39;: &#39;&#39;, &#39;desc&#39;: &#39;&#39;, &#39;body_style&#39;: &#39;&#39;, &#39;engine&#39;: &#39;&#39;, &#39;owner&#39;: &#39;&#39;}] .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post35": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . ModuleNotFoundError Traceback (most recent call last) c: Users etran .vscode fastpages_EthanT _notebooks 2023-03-09-AP-unit2-3.ipynb Cell 29 in &lt;cell line: 1&gt;() -&gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/2023-03-09-AP-unit2-3.ipynb#X40sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; import seaborn as sns &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/2023-03-09-AP-unit2-3.ipynb#X40sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; # Load the titanic dataset &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/2023-03-09-AP-unit2-3.ipynb#X40sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; titanic_data = sns.load_dataset(&#39;titanic&#39;) ModuleNotFoundError: No module named &#39;seaborn&#39; . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post36": {
            "title": "Unit 3 Vocabulary (Definitions + Examples)",
            "content": "Variables: A variable is a named container that stores a value that can be changed or updated. . X = 5 print(X) . 5 . Data Types: Different types of data such as numbers, strings, booleans, and objects that can be stored in variables. . X = &quot;hello&quot; print(X) . hello . Assignment Operators: Operators that are used to assign a value to a variable. . three = 3 print(three) . 3 . Managing Complexity with Variables: Lists, 2D Lists, Dictionaries, Class: Ways of organizing data in a more complex structure. . MyList = [1,2,3,4,5] print(MyList) . [1, 2, 3, 4, 5] . Algorithms: A set of instructions for solving a problem. . Example: To find the largest number in a list, you could use a sorting algorithm. . Sequence, Selection, Iteration: Three types of control flow structures in programming. . Example: For a sequence, you could create a loop that prints out each number from 1 to 10. . Expressions, Comparison Operators, Booleans Expressions and Selection, Booleans Expressions and Iteration, Truth Tables: Expressions are used to evaluate values and comparison operators are used to compare values. . if (5 &gt; 3) is True: print(&quot;True&quot;) else: print(&quot;False&quot;) . True . Characters: Individual letters, numbers, and symbols . Characters = &quot;H&quot; print(Characters) . H . Strings: A a combination of characters Length: The number of characters in a string Concatenation: A combination of strings together . Strings = &quot;Hello World&quot; Strings2 = &quot;World Hello&quot; print(Strings) print(len(Strings)) print(Strings, Strings2) . Hello World 11 Hello World World Hello . Upper and Lower: Functions for changing the case of characters . Traversing Strings: Looping over each character in a string. . If, Elif, Else conditionals; Nested Selection Statements: Control statements that allow you to execute code based on certain conditions. . x = 5 if x &gt; 0: print(&quot;x is greater than 0&quot;) elif x == 0: print(&quot;x is equal to 0&quot;) else: print(&quot;x is less than 0&quot;) . x is greater than 0 . Python For, While loops with Range, with List: Types of loops that allow you to iterate over a range of numbers or a list of items. . import random x = random.randint(0,10) for x in range(0, 10): print(x) . 0 1 2 3 4 5 6 7 8 9 . Combining loops with conditionals to Break, Continue: Control statements that allow you to break out of a loop or skip an iteration. . x = 2 while x &lt; 10: if x == 5: break x += 1 print(x) . 5 . Procedural Abstraction: A process used to simplify complex tasks by breaking them down into smaller, easier-to-manage tasks. . Python Def Procedures: A method used to define a set of instructions to be executed when a certain procedure is called. . Parameters: Arguments that are passed to a procedure when it is called. . Return Values: A value that is returned after a procedure has been executed. . Selection: Selection is a type of control flow that allows for the execution of certain code based on certain conditions. . firstNum = int(input(&quot;Input your first number.&quot;)) secondNum = int(input(&quot;Input your second number.&quot;)) conditional = input(&quot;AND, OR, XOR?&quot;).lower() if conditional == &quot;and&quot;: print(&quot;Selection:&quot; , &quot;AND&quot;, firstNum, &quot;&amp;&quot;, secondNum, &quot;=&quot;, firstNum &amp; secondNum) elif conditional ==&quot;or&quot;: print(&quot;Selection:&quot; , &quot;OR &quot;, firstNum, &quot;|&quot;, secondNum, &quot;=&quot;, firstNum | secondNum) elif conditional ==&quot;xor&quot;: print(&quot;Selection:&quot; , &quot;XOR&quot;, firstNum, &quot;^&quot;, secondNum, &quot;=&quot;, firstNum ^ secondNum) else: print(&quot;Error&quot;) . Selection: OR 2 | 10 = 10 . Lists: Lists are data structures used to store multiple values in one variable. . Iteration: Iteration is a type of control flow that allows for the execution of certain code multiple times. . print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Ethan Tran&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 15 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot; , &quot;Bash&quot; , &quot;C&quot; , &quot;R&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs, } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Ethan Tran &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 15 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 100.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;C&#39;, &#39;R&#39;] &lt;class &#39;list&#39;&gt; length 6 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Ethan Tran&#39;, &#39;age&#39;: 15, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;C&#39;, &#39;R&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Ethan Tran &lt;class &#39;str&#39;&gt; . Logical Operator: A logical operator is a type of operator in computer science that performs a logical operation, such as a comparison or a boolean operation, on two or more values or variables. Examples of logical operators include AND, OR, NOT, XOR, and NAND. . Tru = True equals = &quot;=&quot; opposite = not(Tru) print(opposite) fun = &quot;fun&quot; awesome = fun if fun and awesome == &quot;fun&quot;: print(&quot;AND&quot;) else: print(&quot;NOT AND&quot;) . False . fun = &quot;fun&quot; awesome = fun if fun and awesome == &quot;fun&quot;: print(&quot;AND&quot;) else: print(&quot;NOT AND&quot;) . AND . import random numList = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;] ranNum = random.randrange(len(numList)) print(ranNum) if ranNum == 2 or ranNum == 5: print(&quot;OR&quot;) else: print(&quot;NOT OR&quot;) . 3 NOT OR .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%203/vocabulary/2023/03/07/unit-3-vocabulary.html",
            "relUrl": "/unit%203/vocabulary/2023/03/07/unit-3-vocabulary.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post37": {
            "title": "PyGame Testing",
            "content": "import pygame import sys # Initialize Pygame pygame.init() # Set up the window window_size = (800, 600) window = pygame.display.set_mode(window_size) pygame.display.set_caption(&quot;Catch the Fish!&quot;) # define colors BLACK = ( 0, 0, 0) WHITE = (255, 255, 255) BLUE = ( 0, 0, 255) GREEN = ( 0, 255, 0) RED = (255, 0, 0) # Set up the variables needed clock = pygame.time.Clock() FPS = 30 score = 0 # The player player_size = 50 player_position = [350, 550] # The fish fish_size = 50 fish_position = [random.randint(0, window_size[0]-fish_size), 0] fish_speed = 5 # The game loop while True: for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() sys.exit() # Move the player # Get keys pressed keys = pygame.key.get_pressed() # Check if left or right arrow is pressed and move the player if keys[pygame.K_LEFT] and player_position[0] &gt; 0: player_position[0] -= 5 if keys[pygame.K_RIGHT] and player_position[0] &lt; window_size[0] - player_size: player_position[0] += 5 # Move the fish if fish_position[1] &gt;= window_size[1]: fish_position[0] = random.randint(0, window_size[0] - fish_size) fish_position[1] = 0 else: fish_position[1] += fish_speed # Check if the player caught the fish if fish_position[1] + fish_size &gt;= player_position[1]: # Check if the fish is in the same x position as the player if fish_position[0] &gt; player_position[0] and fish_position[0] &lt; player_position[0] + player_size or fish_position[0] + fish_size &gt; player_position[0] and fish_position[0] + fish_size &lt; player_position[0] + player_size: score += 1 fish_position[0] = random.randint(0, window_size[0] - fish_size) fish_position[1] = 0 # Draw the window window.fill(BLACK) pygame.draw.rect(window, WHITE, [player_position[0], player_position[1], player_size, player_size]) pygame.draw.rect(window, GREEN, [fish_position[0], fish_position[1], fish_size, fish_size]) # Display the score font = pygame.font.SysFont(&quot;Arial&quot;, 25) text = font.render(&quot;Score: &quot; + str(score), True, WHITE) window.blit(text, [window_size[0]-100, 20]) # Update the screen pygame.display.update() # Tick the clock clock.tick(FPS) . pygame 2.1.2 (SDL 2.0.18, Python 3.10.6) Hello from the pygame community. https://www.pygame.org/contribute.html . NameError Traceback (most recent call last) c: Users etran .vscode fastpages_EthanT _notebooks python_game.ipynb Cell 2 in &lt;cell line: 30&gt;() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; # The fish &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=28&#39;&gt;29&lt;/a&gt; fish_size = 50 &gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; fish_position = [random.randint(0, window_size[0]-fish_size), 0] &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=30&#39;&gt;31&lt;/a&gt; fish_speed = 5 &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=32&#39;&gt;33&lt;/a&gt; # The game loop NameError: name &#39;random&#39; is not defined . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/03/07/python_game.html",
            "relUrl": "/2023/03/07/python_game.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post38": {
            "title": "Object-Oriented Programming Hacks",
            "content": "Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . | Add classOf attribute to define year of graduation . | Add setter and getter for classOf | Add dob attribute to define date of birth | This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | Add instance variable for age, make sure if dob changes age changes | Add getter for age, but don&#39;t add/allow setter for age | Update and format tester function to work with changes | . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf, make): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf self._make = make @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def uid(self): return self._uid @uid.setter def uid(self, uid): self._uid = uid def is_uid(self, uid): return self._uid == uid @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string @dob.setter def dob(self, dob): if type(dob) == date: self._dob = dob #classOf @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf # Getter for car make @property def make(self): return self._make # Adding a setter function for make @make.setter def make(self, make): self._make = make @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;classOf&quot; : self.classOf, &quot;make&quot; : self.make } return dict def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result def __str__(self): return json.dumps(self.dictionary) def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob}, classOf={self._classOf}, make={self._make})&#39; def tester(users, uid, psw): result = &quot;&quot; for user in users: if user.uid == uid and user.is_password(psw): print(&quot;* &quot;, end=&quot;&quot;) result = user print(user) return result # Adding a second user if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11) , classOf=1865 , make=&quot;Ford&quot;) u2 = User(name=&#39;Ethan Tran&#39;, uid=&#39;ethan&#39;, password=&#39;ethan123&#39;, dob=date(2007, 5, 19) , classOf=2025 , make=&quot;BMW&quot;) users = [u1, u2] # Output shows a star or &quot;*&quot; due to the tester using the correct password tester(users, u2.uid, &quot;ethan123&quot;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: 1865, &#34;make&#34;: &#34;Ford&#34;} * {&#34;name&#34;: &#34;Ethan Tran&#34;, &#34;uid&#34;: &#34;ethan&#34;, &#34;dob&#34;: &#34;05-19-2007&#34;, &#34;age&#34;: 15, &#34;classOf&#34;: 2025, &#34;make&#34;: &#34;BMW&#34;} JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: 1865, &#34;make&#34;: &#34;Ford&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$PRhIHZBTIUef4gJZ$8d8568942cb27d88636af7a201be31f751afb271fccace59c0b6ab77c78db143&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_classOf&#39;: 1865, &#39;_make&#39;: &#39;Ford&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_make&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;make&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$PRhIHZBTIUef4gJZ$8d8568942cb27d88636af7a201be31f751afb271fccace59c0b6ab77c78db143,dob=1847-02-11, classOf=1865, make=Ford) . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . import json class Car: def __init__(self, make, model, price, year): # Adding instance attributes self._make = make self._model = model self._price = price self._year = year # Add getters and setters for make, model, price, year @property def make(self): return self._make @make.setter def make(self, make): self._make = make @property def model(self): return self._model @model.setter def model(self, model): self._model = model @property def price(self): return self._price @price.setter def price(self, price): self._price = price @property def year(self): return self._year @year.setter def year(self, year): self._year = year #Calculating Depreciation def calculate_depreciation(self, years): depreciation = 0.9**years * self._price return depreciation @property def dictionary(self): dict = { &quot;make&quot; : self.make, &quot;model&quot; : self.model, &quot;price&quot; : self.price, &quot;year&quot; : self.year, } return dict def __str__(self): return json.dumps(self.dictionary) if __name__ == &quot;__main__&quot;: car1 = Car(make=&quot;Lexus&quot;, model=&quot;IS 500&quot;, price=&quot;$58,000&quot;, year=&quot;2022&quot;) print(car1) . {&#34;make&#34;: &#34;Lexus&#34;, &#34;model&#34;: &#34;IS 500&#34;, &#34;price&#34;: &#34;$58,000&#34;, &#34;year&#34;: &#34;2022&#34;} .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/object%20oriented%20programming/obb/2023/03/07/obb-hacks.html",
            "relUrl": "/object%20oriented%20programming/obb/2023/03/07/obb-hacks.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post39": {
            "title": "Night at the Museum Trimester 2",
            "content": "My Experience . This trimester&#39;s Night at the Museum was amazing! There were many amazing sites I was able to view, along with other pieces of art from the various other exhibitions at the event. It was gratifying to present my feature and to show my team&#39;s project off to visitors. During the event, we were able to allow people to actually test out our website and describe the behind the scenes &quot;magic,&quot; which was our frontend to backend communication for various features ie. my car search and Taiyo&#39;s comments. . Presentation Photos . These are some images/highlights of the night when I was presenting our project . . Presentation to the teacher . Here is an image of when I was presenting to Mr. Mortensen at Night at the Museum . . Other CSP Groups . Here are two photos of groups that I thought had really fascinating projects - one used an API to display information on various stocks, while the other group featured a website that had many useful tools for students. One of those tools was a notes tracker by Amay Advani. This allowed notes to be saved for specific classes, these notes were then saved into a database in the their group&#39;s backend. . . Notable Fine Arts Pieces . These were some of my favorite art pieces from the event, my favorite would have to be the painting of Ken Block&#39;s &quot;Hoonipigasus&quot; Porsche 911. . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/n@m/final/2023/03/07/night-at-museum.html",
            "relUrl": "/n@m/final/2023/03/07/night-at-museum.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post40": {
            "title": "MCQ Test 3",
            "content": "My Thoughts... . Overall, I believe that I did pretty well on this MCQ. I got 4 questions wrong, and decided to go back and check the answers. This allowed me to rework each of them to understand where I may have messed up in my thinking while taking the MCQ. . This option is incorrect because in Grid II, the robot lands in the square in the middle of the grid facing right. It cannot turn right, but it can turn left. It moves forward up to the middle square of the top row, at which point it is facing up. At this point, it turns right and moves forward to the square in the upper right corner of the grid. At this point, the robot cannot move right, it cannot move left, and it cannot move forward. It thus stays in the REPEAT UNTIL loop forever, since Goal_Reached is never true. . This option is correct. In Grid I, the robot moves forward to the end of the bottom row, turns right twice, moves forward twice, turns right twice, moves forward until the end of the middle row, turns left twice, moves forward twice, turns left twice, and moves forward until Goal_Reached is true. . Incorrect, as the fourth statement assigns the value false to a. The fifth statement assigns the value false to c. . Correct. The first three statements assign values to the variables. The fourth statement assigns the value of (NOT (a OR b)) AND c to a. Since a OR b is true, NOT (a OR b) is false, so (NOT (a OR b)) AND c is false. The fifth statement assigns the value of c AND a to c. Since a is now false, c AND a is false. The last three statements display the values of the variables. . This algorithm will turn on the motor in some cases when the gate is already open, thus, this option is not correct. . Correct. The algorithm continues past the first check if the time is during business hours, the algorithm continues past the second check if the gate sensor is activated, and the algorithm continues past the third check if the gate is not open. Performing the checks in this order will ensure that the gate is opened only under the appropriate conditions. . Incorrect. This code segment leaves the robot four rows above its starting position and two rows above the gray square. . Correct. The loop that repeats four times returns the robot to its starting position. The three lines of code that follow the loop move the robot one row up and leave it facing right. When this has been repeated twice, the robot is in the gray square. . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/finals/trimester%202/collegeboard/2023/03/07/mcq-three.html",
            "relUrl": "/finals/trimester%202/collegeboard/2023/03/07/mcq-three.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post41": {
            "title": "Feature Outline",
            "content": "Overview . The feature that I will use from our team’s project for the Create Performance task is the overall favoriting system of vehicles on our website. | My feature will allow users that are signed in to click a heart right beside a desired car or cars | Once they favorite a car(s) from our site’s inventory or optimal car quiz, they will be able to click the profile tab and view the cars in which they have favorited. | All of the cars that have been favorited will be stored in a database within the backend, which we plan to set up on AWS (Amazon Web Services) via a Flask server. | This feature will have use between Mati’s login system, Taiyo’s inventory system, and Luna’s “Optimal Car Quiz” | . . Row 1 - Program Purpose and Function: . Purpose: The purpose of my program is to allow users to keep track of the cars that they like the most, or fits their needs the best | Function: The function of my feature is to let users favorite cars and be able to view them via their personal profile - clicking a heart that is displayed on the top left of each car’s profile will enable this feature. | Input: The sole input required for my feature is the mouse click of the user, which they will use to favorite a given car | Output: The output of my program is the display of a given user’s favorite car or cars, which they will input through manually clicking the heart on the top left of the car’s profile. | . Row 2 - Data Abstraction: . First code segment: The first program code segment will show a user’s favorited cars within a database (I will implement the database in the future) | Second code segment: The data in the database will be used for display under our site’s “profile” page/tab. On this page, users will be able to view their unique collection of favorite cars. | Variable: The name of the variable in the list will be “favoritesCollection” | Representation: The data in the list represents the given user’s collection of favorite cars | . Row 3 - Managing Complexity: . Lists: Each user’s favorite cars will be stored in a list. These lists will be stored, managed, and retrieved from our database | Explanation: This data will be under the “favoritesCollection” variable. Without these lists, the program would not function properly, as each user&#39;s collection of favorite cars would not be properly stored - thus, the data will not be properly displayed on our website. | . Row 4 - Procedural Abstraction: . Procedure: A procedure named “add_favorite_car” will take action which takes three parameters: username, car, and the “favoritesCollection” list. The procedure appends the car to the favoritesCollection and prints a confirmation message indicating that the car was added to the user&#39;s favorite cars list. | Contribution: The procedure “add_favorite_car” contributes to the overall functionality of the program by allowing the user to add cars to their favorite cars list. This information can then be stored in a database or used for other purposes in the program. | . Row 5 - Algorithm Implementation: . This is my plan for the algorithm I plan to code and implement into my team’s website. . Iteration:The algorithm will obtain a given user’s username and their associated list of favorite cars from the database. A variable “i” will be initialized to keep track of the current car number being displayed. A for loop will then be used to iterate through each car in the favorite cars list. | Selection: An if/else statement will be used to determine if the list is empty or not. If the list is empty, print a message indicating that the user has no favorite cars. | Sequencing: Within the for loop, sequencing will be used to print the car number (i) and car name. | . Row 6 - Testing: . Call 1: Condition tested = The favorite cars list associated with &quot;user1&quot; is not empty. Result = The car names and their respective numbers are displayed for &quot;user1&quot;. | Call 2: Condition tested = The favorite cars list associated with &quot;user2&quot; is empty. Result = A message is printed indicating that &quot;user2&quot; has no favorite cars. | Explanation: The condition being tested by each call is whether the favorite cars list associated with the given username is empty or not. The result of each call is either the display of the user&#39;s favorite cars and their respective numbers or a message indicating that the user has no favorite cars. | . Video Demonstration Considerations . My video will have to show my codes input, output, and overall program functionality. This means that my code must function as intended without any mistakes or fatal errors. In my video, I will have to be logged in to an account on our website, which is a part of Mati&#39;s feature. I will need to show my feature by favoriting cars from our site&#39;s inventory and from my &quot;Optimal Car Quiz&quot; results - Luna&#39;s feature. To show that my program properly functions, I will need to go to my personal profile and show the display of my favorite cars based upon my input. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/feature/cb/outline/2023/03/07/feature-outline.html",
            "relUrl": "/feature/cb/outline/2023/03/07/feature-outline.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post42": {
            "title": "Notes Sections 8-10",
            "content": "1) Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . 2) Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . 3) Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop . For list operations, write expressions that use list indexing and list procedures | For algorithms involving elements of a list, write iteration statements to traverse a list | For list operations, evaluate expression that use list indexing and list procedures | For algorithms involving elements of a list, determine the result of an algorithm that includes list traversals | List procedures are implemented in accordance with the syntax rules of the programming language | Iteration Statements can be used to traverse a list . | AP EXAM provides pseudocode for loops . | Knowledge of existing algorithms that use iteration can help in constructing new algorithms | . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] potentialMin = int(nums.pop()) while len(nums) != 0: newNum = int(nums.pop()) if newNum &lt; potentialMin: potentialMin = newNum print(potentialMin, &quot;is the minimum value.&quot;) . 10 is the minimum value. . fruit = [&quot;apple&quot;, &quot;orange&quot;, &quot;strawberry&quot;, &quot;pear&quot;] i = 0 for x in fruit: print(fruit[i]) i += 1 . apple orange strawberry pear .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/hacks/turkey/tree/notes/2023/03/07/Unit-8-10-notes.html",
            "relUrl": "/hacks/turkey/tree/notes/2023/03/07/Unit-8-10-notes.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post43": {
            "title": "Hacks Sections 5-7",
            "content": "Notes . Boolean: A denoting a system of algebraic notation used to represent logical arguments | Relational Operators: The mathematical relationship shared between two given variables. Determines whether a statement is true or false based on the output. | Conditionals: Allow the expression of an algorithms that utilize selection to occur without the use of a programming language. | Conditional Statement: A statement that affects the sequence of control by executing certain statements depending on the value of a boolean. | . Unit 3.5 Hacks . Explain in your own words what each logical operator does NOT: Outputs the opposite of the given data and is typically used for true or false statements - has no effect on the variable. AND: Evaluates two separate conditions and determines if they are all met. OR: Checks for if only one condition is met. . | Code your own scenario that makes sense for each logical operator . | . Tru = True equals = &quot;=&quot; opposite = not(Tru) print(opposite) . False . fun = &quot;fun&quot; awesome = fun if fun and awesome == &quot;fun&quot;: print(&quot;AND&quot;) else: print(&quot;NOT AND&quot;) . AND . import random numList = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;] ranNum = random.randrange(len(numList)) print(ranNum) if ranNum == 2 or ranNum == 5: print(&quot;OR&quot;) else: print(&quot;NOT OR&quot;) . 2 OR . Unit 3.6 Hacks . 1 point for defining all the key terms in your own words. 0.5 points if you use examples that show you truly understand it. | 1 point for writing a program that uses binary conditional logic. 0.5 points if it is original and shows complexity | . 1) Selection: A construct in which the code will only run if a given condition is met. . Example: If an answer is true, then the program will run 2) Algorithm: A procedure utilized for completing mathematical operations or problem solving. | Example: An algorithm that takes in the correct and incorrect (overall points) of a test/quiz, that then displays the users&#39; score. 3) Conditional statement: When a program only runs if a set of conditions are met. | Example: a) If the basketball is not flat, the game will proceed. b) If the basketball is not broken, then the game will be able to continue. | . firstNum = int(input(&quot;Input your first number.&quot;)) secondNum = int(input(&quot;Input your second number.&quot;)) conditional = input(&quot;AND, OR, XOR?&quot;).lower() if conditional == &quot;and&quot;: print(&quot;Selection:&quot; , &quot;AND&quot;, firstNum, &quot;&amp;&quot;, secondNum, &quot;=&quot;, firstNum &amp; secondNum) elif conditional ==&quot;or&quot;: print(&quot;Selection:&quot; , &quot;OR &quot;, firstNum, &quot;|&quot;, secondNum, &quot;=&quot;, firstNum | secondNum) elif conditional ==&quot;xor&quot;: print(&quot;Selection:&quot; , &quot;XOR&quot;, firstNum, &quot;^&quot;, secondNum, &quot;=&quot;, firstNum ^ secondNum) else: print(&quot;Error&quot;) . Selection: AND 5 &amp; 10 = 0 . . color = &quot;orange&quot; item = &quot;fruit&quot; if color == &quot;orange&quot;: print(&quot;Right color, wrong item!&quot;) else: color != &quot;orange&quot; , item == &quot;fruit&quot; print(&quot;Wrong color, right item!&quot;) if color ==&quot;green&quot;: print(&quot;Wrong color, wrong item!&quot;) else: item != &quot;fruit&quot; , color != &quot;orange&quot; print(&quot;Right item, right color!&quot;) print(color) . Right color, wrong item! Right item, right color! orange . . Temperature = 85 Cloudy = True if Temperature &gt; 85: if Cloudy == True: print(&quot;Hot and cloudy!&quot;) elif Cloudy == False: print(&quot;Hot, but not cloudy!&quot;) elif Temperature &lt; 80: if Cloudy == True: print(&quot;Neither hot nor cloudy!&quot;) elif Cloudy == False: print(&quot;Neither hot nor cloudy!&quot;) . . if spice &gt; 1000: if tongue == &quot;strong!&quot;: print(&quot;Not spicy!&quot;) elif milk == &quot;present&quot;: print(&quot;Not spicy!&quot;) elif tongue == &quot;weak&quot;: print(&quot;Spicy!&quot;) else: print(&quot;Not spicy at all!&quot;) . Create a piece of code that displays four statements instead of three. Try to do more if you can. . make = &quot;BMW&quot; model = &quot;M4 Competition&quot; year = &quot;2022&quot; if make == &quot;BMW&quot;: print(make) if model == &quot;M4 Competition&quot;: print(model) if year == &quot;2022&quot;: print(year) print(&quot;Nice car!&quot;) . BMW M4 Competition 2022 Nice car! . Make piece of code that gives three different recommendations for possible classes to take at a school based on two different conditions. These conditions could be if the student likes STEM or not. . STEM = True MISC = True if STEM: print(&quot;Algebra, AP CSP, AP Biology&quot;) elif PE: print(&quot;Art, Racket sports, Photography&quot;) else: print(&quot;PE&quot;) . Algebra, AP CSP, AP Biology .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/hacks/turkey/post%20tree/notes/2023/03/07/Section_5_7_Hacks.html",
            "relUrl": "/hacks/turkey/post%20tree/notes/2023/03/07/Section_5_7_Hacks.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post44": {
            "title": "Hacks Unit 3 Sections 9-11",
            "content": "Notes . 1) Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm This may allow for the coding process to be more efficient and effective . 2) Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration Algorithms with selection only go through certain functions if certain things are true or false . 3) Why use algorithms? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . Hacks 3.9.1 . 1) Why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? . It is vital to know that algorithms that appear different are capable of performing the same functions, and that algorithms that look the same may have different results. This is because it allows for creativity when coding, leading to finding new or different ways of solving the same issue(s). | . 2) For the converted conditional to boolean conversion . isSunny = True isRainy = False if isSunny == True: print(&quot;No umbrella necessary!&quot;) else: if isRainy == True: print(&quot;Might want an umbrella!&quot;) else: print(&quot;No umbrella necessary!&quot;) . No umbrella necessary! . isSunny = False isRainy = True # setting variables here (same as above to make comparison easier) puddles = not(isSunny) and isRainy if isRainy == False: print(&quot;Puddles!&quot;) if isSunny == True: print(&quot;No puddles!&quot;) . Hacks 3.9.2 . Develop your own complex algorithm using a flowchart and natural language, then code it! | Requirements: | Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . . 1) Once the code starts, the starting amount of money is set to $10. . 2) The variable, spendMoney, is set to True. . 3) While spendMoney remains true, $1 is deducted from the money variable. . 4) Once the variable, money, reaches a value of 0, spendMoney is set to False and the string, &quot;You&#39;re out of money!&quot; is printed. . 5) End . money = 10 spendMoney = True while(spendMoney == True): money -= 1 if money == 0: spendMoney == False print(&quot;You&#39;re out of money!&quot;) . You&#39;re out of money! . Hacks 3.9.3 . Fix the number guessing game | . 1) Make a flow chart for the algorithm number guessing game . 2) Make a function that gets the user guess . 3) Modify the existing search function to give more encouraging feedback . . import random #sets variables for the game num_guesses = 0 user_guess = -1 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(0,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 0 and 100.&quot;) print(number) #Write a function that gets a guess from the user using input() def guess(): num = input(&quot;Input your guess&quot;) #add something here return num #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;Too low, try again! :)&quot;) #change this lower_bound = guess return lower_bound, upper_bound elif int(guess) &gt; int(number): print(&quot;Too high, try again! :D&quot;) #change this upper_bound = guess return lower_bound, upper_bound else: upper_bound, lower_bound = guess, guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 0 and 100. 92 You guessed 10. Too low, try again! :) Guess a number between 10 and 100. You guessed 99. Too high, try again! :D Guess a number between 10 and 99. You guessed 92. You guessed the number in 3 guesses! . Hacks 3.11 . 1) calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 92, 43, 74, 66, 30, 12, 1 7, 13, 96, 111, 33, 84, 60 . Answer: Below . . 2) Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? Set 1: 80, Set 2: 74, Set 3: 96 . Answer: Set 1: 80, Set 2: 74, Set 3: 96 . . 3) Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . Answer: C . . numListOne = [12,14,44,57,79,80,99] numListTwo = [92,43,74,66,30,12,1] numListThree = [7,13,96,111,33,84,60] numLists = [numListOne, numListTwo, numListThree] for x in range(len(numLists)): numLists[x].sort() middle = int(len(numLists[x])/2) print(&quot;Middle Index of List #&quot;,x+1,&quot;is&quot;,numLists[x][middle]) . Middle Index of List # 1 is 57 Middle Index of List # 2 is 43 Middle Index of List # 3 is 60 .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%203/sections%209-11/notes%20hacks/2023/03/07/Section-9_11_Hacks.html",
            "relUrl": "/unit%203/sections%209-11/notes%20hacks/2023/03/07/Section-9_11_Hacks.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post45": {
            "title": "Performance Task 1",
            "content": "Submission 1 . My Scoring Table (1st Comment) . | College Board Scoring Guide . | . My Score: 5/6 . College Board&#39;s Score: 4/6 . Reflection . Discrepancies: In terms of scoring, I had given this submission a total score of 5/6, while College Board graded it a 4/6. Both College Board and myself agreed upon a lack of managing complexity. Where I was mistaken was when I was grading the program purpose and function. For the criteria of the written portion, I had thought that the submission checked all of the boxes. College Board took a point off due to a lack of actually explaining the purpose of the program - rather the submission only explained the function. . What my program will need: My program will need to meet all of the criteria, leaving no possibilities of mistake. This is due to the fact that even if a single point is marked off, then the entire submission will be graded a 0. For example, Submission 1 was missing the explanation of the purpose of their program and program management that was not as efficient as College Board had wanted - resulting in an F/Fail. . Why the submission may have failed: The submission may have failed because College Board took a point off due to a lack of actually explaining the purpose of the program - rather the submission only explained the function. Additionally, the use of program management was lackluster, which also invoked a 0/1 from College Board. . Submission 2 . My Scoring Table (2nd Comment) | College Board Scoring Guide | . My Score: 6/6 . College Board&#39;s Score: 6/6 . Discrepancies: There were no differences between the score College Board gave and I gave. We each graded the submission 6/6. This made sense, as this submission followed each and every one of the requirements from the rubric. . What my program will need: I would need to follow all of the criteria on the rubric provided by College Board just as in second submission. The submission features a lot of detail in the answers of the written portion, perhaps there was more detail than was asked for/necessary. This is good to keep in mind as I will make sure to be very precise and detailed in my answers for the actual AP Test. . Why the submission did not fail: This submission met each and every criteria as well as additional information, leaving no door open for failure. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/performance%20task/1/2023/03/07/Performance-Task-1.html",
            "relUrl": "/performance%20task/1/2023/03/07/Performance-Task-1.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post46": {
            "title": "MCQ",
            "content": "Review . To be quite honest, I was suprised yet not suprised that I recieved a score of 50/50 on MCQ #2. The reason behind this is because as I went through the test, I made sure to take my time for each and every problem and write out my thinking in my notebook. The overall test took me up till the end of the day on January 30th, just a day before the entire test was due. Furthermore, I made sure to look over the test questions with my classmate, Luna Iwazaki, during class time. This allowed me to get a second point of view other than my own when going through these problems. Finally, in terms of the concepts from the test, when I was confused on them I made sure to go back and watch the videos provided by College Board. These videos were essential in helping me build a foundation to answer these problems - though some of them were educated guesses, it appears that they were all correct. . . As I got a perfect score, I will go over the few problems that I had guessed my answers . Problem 2 . For this problem, I had figured out that answers &quot;a&quot; and &quot;b&quot; were not correct. From here, I had to guess between answers &quot;c&quot; and &quot;d.&quot; I ended up picking answer &quot;c,&quot; which ended up being correct as moving the statement from line 5 between lines 2 and 3 would allow the procedure to properly function. From my research, I found that it would be beneficial to move line 5 between lines 2 and three as initializing count to 0 would avoid any error in the program. It initializes the variable to a known value before the loop starts. This is necessary because the count variable is used to track the number of times the value &quot;val&quot; appears in the list myList. If count is not initialized to 0, its value will be undefined | . . Problem 12 . For this question, I had figured that answer &quot;b&quot; must have been the only right choice. This answer I consider to be a guess because though on the scratch sheet of paper I used I marked this question as having the answer &quot;b,&quot; I wrote a question mark next to it. The reason behind this was because though I figured that the rest of the answers were not correct, I could not explain why &quot;b&quot; was the only option. Now, I know that &quot;b&quot; is the answer because it provides two events in which the elevator would require movement - either from floor 1 moving up to floor 2 or vice versa. | . . Problem 50 . This problem was tricky, my answer was not an educated guess as for the previous two, but rather a completely random guess. I had tried to go over the College Board material in terms of the ASCII characters with hexidecimals, but could not quite grasp the concept - my guess was quite lucky to say the least. | . . Notes + My Explanation . ASCII code is code or decimal numbers representing text | ASCII encodes characters into binary data consisting of seven bits | In ASCII character encoding, each character is represented by a unique number between 0 and 127 | To convert from decimal to hexadecimal, you divide the decimal number by 16 and keep track of the remainders | The first remainder (when divided by 16) is the right-most digit in the hexadecimal representation, the second remainder is the next digit to the left, and so on, until you reach the quotient of 0. | 86/16 = 5, remainder = 6 | Thus, hexadecimal representation of 86 is 56 (5 &amp; 6) | This means the letter from decimal (base 10) 86 is equal to the (base 16) 56, which is &quot;V.&quot; | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cb/2023/03/07/MCQ-Review-2.html",
            "relUrl": "/cb/2023/03/07/MCQ-Review-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post47": {
            "title": "Hacks Sections 12-13",
            "content": "Notes . Procedures: A procedure is a block of code that performs a particular task. It can contain variables, constants, data structures, and other programming constructs. Procedures are also known as subroutines, functions, methods, or routines. They are used to break up large programs into smaller, more manageable pieces. . Parameters: Parameters are values that are passed to a procedure or function. They are used to customize the behavior of the procedure or function and can be used to modify its input and output. . Return Values: Return values are values that are returned from a procedure or function. They can be used to indicate the success or failure of a procedure or function, as well as return a value or set of values. . Output Parameters: Output parameters are values that are passed out of a procedure or function. They are used to return values from a procedure or function and can be used to modify its output. . Section 3.12 Hacks . 1. Define procedure and parameter in your own words &amp; Define Return Values and Output Parameters in your own words . a) Procedure: A block of code that is created to perform a given task - essentially a function. . b) Parameter: A variable that is utilized in a function that enables data to be imported into said function. . 2. Paste a screenshot of completion of the quiz . . 3. Define Return Values and Output Parameters in your own words . a) Return Values: A return value is a value that is returned by a function or method to the calling code after it has finished executing. It is the value that is passed back to the calling code once the function or method has finished its job. . b) Output Parameters: Output parameters are variables that are passed by reference to a function or method and are used to return a value to the calling code. They are typically used to return multiple values from a single function or method. . Code a procedure that finds the square root of any given number. (make sure to call and return the function) . import math userNum = float(input()) def sqrt(userNum): return userNum sqrt = math.sqrt(userNum) print(&quot;Input:&quot; , userNum) print(&quot;Square root:&quot; , int(sqrt)) . Input: 225.0 Square root: 15 . import math userNum = float(input()) sqrt = math.sqrt(userNum) print(&quot;Input:&quot; , userNum) print(sqrt) . Input: 25.0 5.0 . Section 3.13 (3.B) Hacks . 1) Q: Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective . A: Abstracting away program logic into separate, modular functions is effective when coding because it makes the code easier to read and understand, more reusable and maintainable, and allows for better organization and structure. By breaking down large, complex tasks into smaller, more manageable functions, it can help to simplify the code and make it more organized, which makes debugging and troubleshooting much easier. Additionally, modular functions are easier to update and extend, since they can be tested, modified, and replaced independently. This can help reduce the amount of code needed to be written and improve the overall code quality. Finally, modular functions make code more reusable, as they can be used in multiple projects and functions, which can lead to faster development times and reduced maintenance costs. . 2) Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) . The procedure below requires abstraction as it allows the function to organize the code as a whole. Abstracting the variables x and y allows me to not have to call the variables over and over again within the same function. . x = 20 y = 100 # Set function def addition(x,y): sum = x + y return(sum) #Print the result print(addition(x,y)) . 120 . 3) Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) . def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count def any_count(sentence, letter): words = split_string(sentence) count = count_words_starting_with_letter(words, letter) return count userLetter = input(&quot;Type any letter&quot;) answer = count_anything(s, str(userLetter)) print(str(answer) + &quot; word(s) starting with &quot; + str(userLetter)) . 0 word(s) starting with 2 . Section 3.13 (3.C) Hacks . 1) Define procedure names and arguments in your own words. Procedures and arguments are used to describe chunks of code that accomplish specific tasks. A procedure name is a label used to identify the code, while arguments are the inputs that the procedure can accept. . 2) Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) . Add two numbers . | Subtract two numbers . | Multiply two numbers . | Divide two numbers . | . Extra Work: Calculator uses binary . . Binary Calculator for +, -, * . &amp; Normal integer division . + - * / Clear . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%203/sections%2012-13/notes%20hacks/2023/03/07/Hacks-Section-12-13.html",
            "relUrl": "/unit%203/sections%2012-13/notes%20hacks/2023/03/07/Hacks-Section-12-13.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post48": {
            "title": "Fixing Errors (Menu Problem)",
            "content": "import sys total = 0 menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;Burger&quot;: 3.99, &quot;Fries&quot;: 1.99, &quot;Drink&quot;: 0.99} print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) ordering = True while ordering: food = input(&quot;Please select an item from the menu. Press enter when you are done.&quot;) if food in menu: total += menu[food] print(&quot;Your total: $&quot; + &quot;{:.2f}&quot;.format(total)) else: print(&quot;Your order will be ready soon!&quot;) ordering = False . Menu burger $3.99 fries $1.99 drink $0.99 Your total: $3.99 Your total: $5.98 Your total: $6.97 Your total: $7.96 Your total: $11.95 Your order will be ready soon! .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/python/lists/iterations/menu/2023/03/07/ErrorFixing.html",
            "relUrl": "/fastpages/python/lists/iterations/menu/2023/03/07/ErrorFixing.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post49": {
            "title": "CPT Write-up Trimester 2",
            "content": "Video . The link to my Video . Write-up . Car Search and Add . 3.a.i. . The purpose of my program is to allow users to add their car builds and search through the cars of others, in order to help people discover new cars and to develop a car community. . 3.a.ii. . The program allows a user to input their car and give it a unique description. Some people may have the same cars or may have multiple of the same car, thus, the descriptions are unique in order to allow people to save their various car builds/configurations. A user can input the make, model, price, year, body style and engine of any car - along with a description and the name of the car’s owner. The addition of cars allows the search feature to shine, as it works as a filter. The search feature iterates through specific criteria such as a specific make, model, body style, or multiple attributes/criteria at the same time. The search creates a table that allows the user to easily view specific cars. . 3.a.iii. . The user inputs a car to add to the database. At first, they add a car that is already in the database (a duplicate), which returns an error message. After, a new car is added and can be viewed in the table. The user also uses different criteria to filter through the database of cars, causing only a specific list of cars to appear on the table. . 3.b.i. . A POST method is used to submit a new car to the database. &quot;Data&quot; is the variable that is used to represent the list of car data later on in the code. . // Add an event listener to the form to submit car data const form = document.getElementById(&#39;carForm&#39;); form.addEventListener(&#39;submit&#39;, async function(event) { event.preventDefault(); // Retrieve the input values from the form const make = document.getElementById(&#39;make&#39;).value; const model = document.getElementById(&#39;model&#39;).value; const price = document.getElementById(&#39;price&#39;).value; const year = document.getElementById(&#39;year&#39;).value; const desc = document.getElementById(&#39;desc&#39;).value; const bodyStyle = document.getElementById(&#39;body_style&#39;).value; const engine = document.getElementById(&#39;engine&#39;).value; const owner = document.getElementById(&#39;owner&#39;).value; try { // Use the Fetch API to submit car data to the server const response = await fetch(&#39;https://cars.nighthawkcodingsociety.com/api/cars/create&#39;, { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, // Use JSON.stringify to convert the input values into a JSON string that can be sent to the server as the request body body: JSON.stringify({ make: make, model: model, price: price, year: year, desc: desc, body_style: bodyStyle, engine: engine, owner: owner }) }); // Check if the response from the server is ok if (!response.ok) { throw new Error(&#39;Network response was not ok&#39;); } // Display a success message to the user alert(&quot;Car has been added successfully!&quot;); } catch (error) { // If an error occurs, log it to the console and display an error message to the user console.error(&#39;Error:&#39;, error); alert(&quot;Please enter all fields or check if the added car is a duplicate.&quot;) } }); . 3.b.ii. . const resultContainer = document.getElementById(&quot;result&quot;); const url = &quot;https://cars.nighthawkcodingsociety.com/api/cars/&quot;; const headers = { method: &#39;GET&#39;, mode: &#39;cors&#39;, cache: &#39;default&#39;, credentials: &#39;omit&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, }; // Fetch data from the database fetch(url, headers) .then(response =&gt; { // If the response is not OK, log the error and display it on the webpage if (response.status != 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = errorMsg; tr.appendChild(td); resultContainer.appendChild(tr); return; } // Parse the json and add it to the webpage response.json().then(data =&gt; { console.log(data); for (const row of data) { // Create new table row and cells for each car attribute const tr = document.createElement(&quot;tr&quot;); const make = document.createElement(&quot;td&quot;); const model = document.createElement(&quot;td&quot;); const year = document.createElement(&quot;td&quot;); const price = document.createElement(&quot;td&quot;); const engine = document.createElement(&quot;td&quot;); const body_style = document.createElement(&quot;td&quot;); const desc = document.createElement(&quot;td&quot;); const owner = document.createElement(&quot;td&quot;); // Set the inner HTML of each cell to the corresponding car attribute value make.innerHTML = row.make; model.innerHTML = row.model; year.innerHTML = row.year; price.innerHTML = row.price; engine.innerHTML = row.engine; body_style.innerHTML = row.body_style; desc.innerHTML = row.desc; owner.innerHTML = row.owner // Append each cell to the row // Allows the data to be added to the newly made table tr.appendChild(make); tr.appendChild(model); tr.appendChild(year); tr.appendChild(price); tr.appendChild(engine); tr.appendChild(body_style); tr.appendChild(desc); tr.appendChild(owner); // Append the row to the container element resultContainer.appendChild(tr); } }) }) . 3.b.iii. . The variable that represents the list is “data.” &quot;Data&quot; is the data of the cars that the program fetches from our database using a GET request - the data is represented by JSON. This data is used to populate the table with various attributes including make, model, year, etc. . 3.b.iv. . The data contained within the list is the make, model, price, year, engine, body style, and owner of each car from the database. . 3.b.v. . Without using the json “data” the car search would cease to work. This is because the car search uses the data to build tables based on specific criteria from the data itself. . 3.c.i. . // Table creation after search button is pressed function makeTable(data){ // Remove current carData - prepare for new search document.getElementById(&quot;carData&quot;).remove() const [desiredMake, desiredModel, desiredPrice, desiredYear, desiredEngine, desiredBodyStyle, desiredOwner] = getInput() const tbody = document.createElement(&quot;tbody&quot;) // Set tbody id to carData - ensure that carData is still on page tbody.id = &quot;carData&quot; // Iterate over each row from the data in the database for (const row of data) { // Filter // Check if each row value matches user input, skip to the next iteration if there is no match if (desiredMake &amp;&amp; !(row.make.toUpperCase() === desiredMake.toUpperCase())) continue if (desiredModel &amp;&amp; !(row.model.toUpperCase() === desiredModel.toUpperCase())) continue if (desiredPrice &amp;&amp; !(row.price &lt;= parseInt(desiredPrice))) continue if (desiredYear &amp;&amp; !(row.year === parseInt(desiredYear))) continue if (desiredEngine &amp;&amp; !(row.engine.toUpperCase() === desiredEngine.toUpperCase())) continue if (desiredBodyStyle &amp;&amp; !(row.body_style.toUpperCase() === desiredBodyStyle.toUpperCase())) continue if (desiredOwner &amp;&amp; !(row.owner.toUpperCase() === desiredOwner.toUpperCase())) continue // If all values match, create table elements const tr = document.createElement(&quot;tr&quot;); const make = document.createElement(&quot;td&quot;); const model = document.createElement(&quot;td&quot;); const year = document.createElement(&quot;td&quot;); const price = document.createElement(&quot;td&quot;); const engine = document.createElement(&quot;td&quot;); const body_style = document.createElement(&quot;td&quot;); const owner = document.createElement(&quot;td&quot;); // Set innerHTML to values of make, model, year, etc. from the API make.innerHTML = row.make; model.innerHTML = row.model; year.innerHTML = row.year; price.innerHTML = row.price; engine.innerHTML = row.engine; body_style.innerHTML = row.body_style; owner.innerHTML = row.owner; // Add data for make, model, price, etc. to the table row tr.appendChild(make); tr.appendChild(model); tr.appendChild(year); tr.appendChild(price); tr.appendChild(engine); tr.appendChild(body_style); tr.appendChild(owner); // Add row to the table tbody.appendChild(tr); } // Add the data from tbody into the table document.getElementById(&quot;table&quot;).appendChild(tbody) } . 3.c.ii. . &lt;h1&gt;Car Search&lt;/h1&gt; &lt;table id=&quot;table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Make&lt;/th&gt; &lt;th&gt;Model&lt;/th&gt; &lt;th&gt;Year&lt;/th&gt; &lt;th&gt;Price&lt;/th&gt; &lt;th&gt;Engine&lt;/th&gt; &lt;th&gt;Body Style&lt;/th&gt; &lt;th&gt;Owner&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tr id=&quot;result&quot;&gt;&lt;/tr&gt; &lt;tbody id=&quot;carData&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;!-- Set label and input ids - allows for use in getInput() function --&gt; &lt;label for=&quot;make&quot;&gt;Make&lt;/label&gt; &lt;input name=&quot;make&quot; id=&quot;make&quot;&gt; &lt;label for=&quot;model&quot;&gt;Model&lt;/label&gt; &lt;input name=&quot;model&quot; id=&quot;model&quot;&gt; &lt;label for=&quot;year&quot;&gt;Year&lt;/label&gt; &lt;input name=&quot;year&quot; id=&quot;year&quot;&gt; &lt;label for=&quot;price&quot;&gt;Price&lt;/label&gt; &lt;input name=&quot;price&quot; id=&quot;price&quot;&gt; &lt;label for=&quot;engine&quot;&gt;Engine&lt;/label&gt; &lt;input name=&quot;engine&quot; id=&quot;engine&quot;&gt; &lt;label for=&quot;body_style&quot;&gt;Body Style&lt;/label&gt; &lt;input name=&quot;body_style&quot; id=&quot;body_style&quot;&gt; &lt;label for=&quot;owner&quot;&gt;Owner&lt;/label&gt; &lt;input name=&quot;owner&quot; id=&quot;owner&quot;&gt; &lt;button onclick=&quot;makeTable(carData)&quot; style=&quot;background-color: #ffff; color: black;&quot;&gt;Search&lt;/button&gt; &lt;button onclick=&quot;clearTable(carData)&quot; style=&quot;background-color: #f2f2f2; color: black&quot;&gt;Clear&lt;/button&gt; . 3.c.iii. . The identified procedure “makeTable” iterates through the list of cars from the data in our database. Cars that match the specific criteria set via the user’s input are the only cars that populate the table - thus, allowing the cars to be filtered/searched. uses a for loop to iterate through the list of cars from the data in our database. . 3.c.iv. . The function first gets the user input values for desired make, model, price, year, engine, body style, and owner by calling the &quot;getInput&quot; function.The function first gets the user input values for desired make, model, price, year, engine, body style, and owner by calling the &quot;getInput&quot; function. The function then removes any previous data by removing the table with id &quot;carData&quot;. The function creates a new table body element using the &quot;createElement&quot; method and sets its id to &quot;carData&quot;. This table body element will hold the rows of car data that match the user&#39;s search criteria. The function then loops through each row of data from the database using a for-of loop. For each row of data, the function checks if each value matches the user input values using if statements. If a value doesn&#39;t match, the loop moves on to the next row using the &quot;continue&quot; statement. This filters the data to only show rows that match the user&#39;s search criteria. If all values match, the function creates a new table row element using the &quot;createElement&quot; method and creates new table data elements (td) for each column (make, model, year, price, engine, body style, and owner) using the same method. Set innerHTML: The function then sets the innerHTML of each td element to the corresponding value from the current row of data. The function appends each td element to the table row using the &quot;appendChild&quot; method.The function appends each td element to the table row using the &quot;appendChild&quot; method. The function appends the table row to the table body using the &quot;appendChild&quot; method. After all rows have been processed, the function appends the table body to the table with id &quot;table&quot; using the &quot;appendChild&quot; method. . 3.d.i. . Call One In call one, makes a search with no values - makeTable has no user input. . | Call Two This call will execute the algorithm with user input that filters the rows of data based on certain criteria. For example, the input would be &quot;Lexus&quot; for the desired make and &quot;Coupe&quot; for the desired body style. . | . 3.d.ii. . Condition(s) tested by Call One As there is no user input, all of the &quot;continue&quot; statements when iterating through the data will be skipped and all of the rows will pass through to the table creation section of the algorithm. . | Condition(s) tested by Call Two When the algorithm loops through each row of data, it will only create a new table row if the make matches &quot;Lexus&quot; and the body style matches &quot;Coupe&quot;. All other rows will be skipped due to the &quot;continue&quot; statements in the filtering section of the algorithm. . | . 3.d.iii. . Results of Call One The resulting table will include all rows of data from the &quot;data&quot; array. . | Results of Call Two The resulting table will only include rows that match the user&#39;s input criteria, and not all rows from the filtered list of data. . | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cpt/cb/final/2023/03/07/CPT.html",
            "relUrl": "/cpt/cb/final/2023/03/07/CPT.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post50": {
            "title": "Algorithm Hacks",
            "content": "def xor(x,y): return (x or y) and not (x and y) def F(A, B, C, D): P = xor(A, B) Q = xor(C, D) R = xor(P, Q) return R def f(a,b,c,d): t = &#39;T&#39; (A,B,C,D) = (a==t, b==t, c==t, d==t) R = F(A, B, C, D) return &quot;FT&quot;[R] print(&quot;Truth Table&quot;) print() print(&quot;A B C D | f(A,B,C,D)&quot;) print(&quot;========|===========&quot;) r = &quot;TF&quot; for a in r: for b in r: for c in r: for d in r: print(a, b, c, d, &quot;| &quot;, f(a, b, c, d)) . Truth Table A B C D | f(A,B,C,D) ========|=========== T T T T | F T T T r | F T T T u | F T T T e | F T T T F | F T T T a | F T T T l | F T T T s | F T T T e | F T T r T | F T T r r | F T T r u | F T T r e | F T T r F | F T T r a | F T T r l | F T T r s | F T T r e | F T T u T | F T T u r | F T T u u | F T T u e | F T T u F | F T T u a | F T T u l | F T T u s | F T T u e | F T T e T | F T T e r | F T T e u | F T T e e | F T T e F | F T T e a | F T T e l | F T T e s | F T T e e | F T T F T | F T T F r | F T T F u | F T T F e | F T T F F | F T T F a | F T T F l | F T T F s | F T T F e | F T T a T | F T T a r | F T T a u | F T T a e | F T T a F | F T T a a | F T T a l | F T T a s | F T T a e | F T T l T | F T T l r | F T T l u | F T T l e | F T T l F | F T T l a | F T T l l | F T T l s | F T T l e | F T T s T | F T T s r | F T T s u | F T T s e | F T T s F | F T T s a | F T T s l | F T T s s | F T T s e | F T T e T | F T T e r | F T T e u | F T T e e | F T T e F | F T T e a | F T T e l | F T T e s | F T T e e | F T r T T | F T r T r | F T r T u | F T r T e | F T r T F | F T r T a | F T r T l | F T r T s | F T r T e | F T r r T | F T r r r | F T r r u | F T r r e | F T r r F | F T r r a | F T r r l | F T r r s | F T r r e | F T r u T | F T r u r | F T r u u | F T r u e | F T r u F | F T r u a | F T r u l | F T r u s | F T r u e | F T r e T | F T r e r | F T r e u | F T r e e | F T r e F | F T r e a | F T r e l | F T r e s | F T r e e | F T r F T | F T r F r | F T r F u | F T r F e | F T r F F | F T r F a | F T r F l | F T r F s | F T r F e | F T r a T | F T r a r | F T r a u | F T r a e | F T r a F | F T r a a | F T r a l | F T r a s | F T r a e | F T r l T | F T r l r | F T r l u | F T r l e | F T r l F | F T r l a | F T r l l | F T r l s | F T r l e | F T r s T | F T r s r | F T r s u | F T r s e | F T r s F | F T r s a | F T r s l | F T r s s | F T r s e | F T r e T | F T r e r | F T r e u | F T r e e | F T r e F | F T r e a | F T r e l | F T r e s | F T r e e | F T u T T | F T u T r | F T u T u | F T u T e | F T u T F | F T u T a | F T u T l | F T u T s | F T u T e | F T u r T | F T u r r | F T u r u | F T u r e | F T u r F | F T u r a | F T u r l | F T u r s | F T u r e | F T u u T | F T u u r | F T u u u | F T u u e | F T u u F | F T u u a | F T u u l | F T u u s | F T u u e | F T u e T | F T u e r | F T u e u | F T u e e | F T u e F | F T u e a | F T u e l | F T u e s | F T u e e | F T u F T | F T u F r | F T u F u | F T u F e | F T u F F | F T u F a | F T u F l | F T u F s | F T u F e | F T u a T | F T u a r | F T u a u | F T u a e | F T u a F | F T u a a | F T u a l | F T u a s | F T u a e | F T u l T | F T u l r | F T u l u | F T u l e | F T u l F | F T u l a | F T u l l | F T u l s | F T u l e | F T u s T | F T u s r | F T u s u | F T u s e | F T u s F | F T u s a | F T u s l | F T u s s | F T u s e | F T u e T | F T u e r | F T u e u | F T u e e | F T u e F | F T u e a | F T u e l | F T u e s | F T u e e | F T e T T | F T e T r | F T e T u | F T e T e | F T e T F | F T e T a | F T e T l | F T e T s | F T e T e | F T e r T | F T e r r | F T e r u | F T e r e | F T e r F | F T e r a | F T e r l | F T e r s | F T e r e | F T e u T | F T e u r | F T e u u | F T e u e | F T e u F | F T e u a | F T e u l | F T e u s | F T e u e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T e F T | F T e F r | F T e F u | F T e F e | F T e F F | F T e F a | F T e F l | F T e F s | F T e F e | F T e a T | F T e a r | F T e a u | F T e a e | F T e a F | F T e a a | F T e a l | F T e a s | F T e a e | F T e l T | F T e l r | F T e l u | F T e l e | F T e l F | F T e l a | F T e l l | F T e l s | F T e l e | F T e s T | F T e s r | F T e s u | F T e s e | F T e s F | F T e s a | F T e s l | F T e s s | F T e s e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T F T T | F T F T r | F T F T u | F T F T e | F T F T F | F T F T a | F T F T l | F T F T s | F T F T e | F T F r T | F T F r r | F T F r u | F T F r e | F T F r F | F T F r a | F T F r l | F T F r s | F T F r e | F T F u T | F T F u r | F T F u u | F T F u e | F T F u F | F T F u a | F T F u l | F T F u s | F T F u e | F T F e T | F T F e r | F T F e u | F T F e e | F T F e F | F T F e a | F T F e l | F T F e s | F T F e e | F T F F T | F T F F r | F T F F u | F T F F e | F T F F F | F T F F a | F T F F l | F T F F s | F T F F e | F T F a T | F T F a r | F T F a u | F T F a e | F T F a F | F T F a a | F T F a l | F T F a s | F T F a e | F T F l T | F T F l r | F T F l u | F T F l e | F T F l F | F T F l a | F T F l l | F T F l s | F T F l e | F T F s T | F T F s r | F T F s u | F T F s e | F T F s F | F T F s a | F T F s l | F T F s s | F T F s e | F T F e T | F T F e r | F T F e u | F T F e e | F T F e F | F T F e a | F T F e l | F T F e s | F T F e e | F T a T T | F T a T r | F T a T u | F T a T e | F T a T F | F T a T a | F T a T l | F T a T s | F T a T e | F T a r T | F T a r r | F T a r u | F T a r e | F T a r F | F T a r a | F T a r l | F T a r s | F T a r e | F T a u T | F T a u r | F T a u u | F T a u e | F T a u F | F T a u a | F T a u l | F T a u s | F T a u e | F T a e T | F T a e r | F T a e u | F T a e e | F T a e F | F T a e a | F T a e l | F T a e s | F T a e e | F T a F T | F T a F r | F T a F u | F T a F e | F T a F F | F T a F a | F T a F l | F T a F s | F T a F e | F T a a T | F T a a r | F T a a u | F T a a e | F T a a F | F T a a a | F T a a l | F T a a s | F T a a e | F T a l T | F T a l r | F T a l u | F T a l e | F T a l F | F T a l a | F T a l l | F T a l s | F T a l e | F T a s T | F T a s r | F T a s u | F T a s e | F T a s F | F T a s a | F T a s l | F T a s s | F T a s e | F T a e T | F T a e r | F T a e u | F T a e e | F T a e F | F T a e a | F T a e l | F T a e s | F T a e e | F T l T T | F T l T r | F T l T u | F T l T e | F T l T F | F T l T a | F T l T l | F T l T s | F T l T e | F T l r T | F T l r r | F T l r u | F T l r e | F T l r F | F T l r a | F T l r l | F T l r s | F T l r e | F T l u T | F T l u r | F T l u u | F T l u e | F T l u F | F T l u a | F T l u l | F T l u s | F T l u e | F T l e T | F T l e r | F T l e u | F T l e e | F T l e F | F T l e a | F T l e l | F T l e s | F T l e e | F T l F T | F T l F r | F T l F u | F T l F e | F T l F F | F T l F a | F T l F l | F T l F s | F T l F e | F T l a T | F T l a r | F T l a u | F T l a e | F T l a F | F T l a a | F T l a l | F T l a s | F T l a e | F T l l T | F T l l r | F T l l u | F T l l e | F T l l F | F T l l a | F T l l l | F T l l s | F T l l e | F T l s T | F T l s r | F T l s u | F T l s e | F T l s F | F T l s a | F T l s l | F T l s s | F T l s e | F T l e T | F T l e r | F T l e u | F T l e e | F T l e F | F T l e a | F T l e l | F T l e s | F T l e e | F T s T T | F T s T r | F T s T u | F T s T e | F T s T F | F T s T a | F T s T l | F T s T s | F T s T e | F T s r T | F T s r r | F T s r u | F T s r e | F T s r F | F T s r a | F T s r l | F T s r s | F T s r e | F T s u T | F T s u r | F T s u u | F T s u e | F T s u F | F T s u a | F T s u l | F T s u s | F T s u e | F T s e T | F T s e r | F T s e u | F T s e e | F T s e F | F T s e a | F T s e l | F T s e s | F T s e e | F T s F T | F T s F r | F T s F u | F T s F e | F T s F F | F T s F a | F T s F l | F T s F s | F T s F e | F T s a T | F T s a r | F T s a u | F T s a e | F T s a F | F T s a a | F T s a l | F T s a s | F T s a e | F T s l T | F T s l r | F T s l u | F T s l e | F T s l F | F T s l a | F T s l l | F T s l s | F T s l e | F T s s T | F T s s r | F T s s u | F T s s e | F T s s F | F T s s a | F T s s l | F T s s s | F T s s e | F T s e T | F T s e r | F T s e u | F T s e e | F T s e F | F T s e a | F T s e l | F T s e s | F T s e e | F T e T T | F T e T r | F T e T u | F T e T e | F T e T F | F T e T a | F T e T l | F T e T s | F T e T e | F T e r T | F T e r r | F T e r u | F T e r e | F T e r F | F T e r a | F T e r l | F T e r s | F T e r e | F T e u T | F T e u r | F T e u u | F T e u e | F T e u F | F T e u a | F T e u l | F T e u s | F T e u e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T e F T | F T e F r | F T e F u | F T e F e | F T e F F | F T e F a | F T e F l | F T e F s | F T e F e | F T e a T | F T e a r | F T e a u | F T e a e | F T e a F | F T e a a | F T e a l | F T e a s | F T e a e | F T e l T | F T e l r | F T e l u | F T e l e | F T e l F | F T e l a | F T e l l | F T e l s | F T e l e | F T e s T | F T e s r | F T e s u | F T e s e | F T e s F | F T e s a | F T e s l | F T e s s | F T e s e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F r T T T | F r T T r | F r T T u | F r T T e | F r T T F | F r T T a | F r T T l | F r T T s | F r T T e | F r T r T | F r T r r | F r T r u | F r T r e | F r T r F | F r T r a | F r T r l | F r T r s | F r T r e | F r T u T | F r T u r | F r T u u | F r T u e | F r T u F | F r T u a | F r T u l | F r T u s | F r T u e | F r T e T | F r T e r | F r T e u | F r T e e | F r T e F | F r T e a | F r T e l | F r T e s | F r T e e | F r T F T | F r T F r | F r T F u | F r T F e | F r T F F | F r T F a | F r T F l | F r T F s | F r T F e | F r T a T | F r T a r | F r T a u | F r T a e | F r T a F | F r T a a | F r T a l | F r T a s | F r T a e | F r T l T | F r T l r | F r T l u | F r T l e | F r T l F | F r T l a | F r T l l | F r T l s | F r T l e | F r T s T | F r T s r | F r T s u | F r T s e | F r T s F | F r T s a | F r T s l | F r T s s | F r T s e | F r T e T | F r T e r | F r T e u | F r T e e | F r T e F | F r T e a | F r T e l | F r T e s | F r T e e | F r r T T | F r r T r | F r r T u | F r r T e | F r r T F | F r r T a | F r r T l | F r r T s | F r r T e | F r r r T | F r r r r | F r r r u | F r r r e | F r r r F | F r r r a | F r r r l | F r r r s | F r r r e | F r r u T | F r r u r | F r r u u | F r r u e | F r r u F | F r r u a | F r r u l | F r r u s | F r r u e | F r r e T | F r r e r | F r r e u | F r r e e | F r r e F | F r r e a | F r r e l | F r r e s | F r r e e | F r r F T | F r r F r | F r r F u | F r r F e | F r r F F | F r r F a | F r r F l | F r r F s | F r r F e | F r r a T | F r r a r | F r r a u | F r r a e | F r r a F | F r r a a | F r r a l | F r r a s | F r r a e | F r r l T | F r r l r | F r r l u | F r r l e | F r r l F | F r r l a | F r r l l | F r r l s | F r r l e | F r r s T | F r r s r | F r r s u | F r r s e | F r r s F | F r r s a | F r r s l | F r r s s | F r r s e | F r r e T | F r r e r | F r r e u | F r r e e | F r r e F | F r r e a | F r r e l | F r r e s | F r r e e | F r u T T | F r u T r | F r u T u | F r u T e | F r u T F | F r u T a | F r u T l | F r u T s | F r u T e | F r u r T | F r u r r | F r u r u | F r u r e | F r u r F | F r u r a | F r u r l | F r u r s | F r u r e | F r u u T | F r u u r | F r u u u | F r u u e | F r u u F | F r u u a | F r u u l | F r u u s | F r u u e | F r u e T | F r u e r | F r u e u | F r u e e | F r u e F | F r u e a | F r u e l | F r u e s | F r u e e | F r u F T | F r u F r | F r u F u | F r u F e | F r u F F | F r u F a | F r u F l | F r u F s | F r u F e | F r u a T | F r u a r | F r u a u | F r u a e | F r u a F | F r u a a | F r u a l | F r u a s | F r u a e | F r u l T | F r u l r | F r u l u | F r u l e | F r u l F | F r u l a | F r u l l | F r u l s | F r u l e | F r u s T | F r u s r | F r u s u | F r u s e | F r u s F | F r u s a | F r u s l | F r u s s | F r u s e | F r u e T | F r u e r | F r u e u | F r u e e | F r u e F | F r u e a | F r u e l | F r u e s | F r u e e | F r e T T | F r e T r | F r e T u | F r e T e | F r e T F | F r e T a | F r e T l | F r e T s | F r e T e | F r e r T | F r e r r | F r e r u | F r e r e | F r e r F | F r e r a | F r e r l | F r e r s | F r e r e | F r e u T | F r e u r | F r e u u | F r e u e | F r e u F | F r e u a | F r e u l | F r e u s | F r e u e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r e F T | F r e F r | F r e F u | F r e F e | F r e F F | F r e F a | F r e F l | F r e F s | F r e F e | F r e a T | F r e a r | F r e a u | F r e a e | F r e a F | F r e a a | F r e a l | F r e a s | F r e a e | F r e l T | F r e l r | F r e l u | F r e l e | F r e l F | F r e l a | F r e l l | F r e l s | F r e l e | F r e s T | F r e s r | F r e s u | F r e s e | F r e s F | F r e s a | F r e s l | F r e s s | F r e s e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r F T T | F r F T r | F r F T u | F r F T e | F r F T F | F r F T a | F r F T l | F r F T s | F r F T e | F r F r T | F r F r r | F r F r u | F r F r e | F r F r F | F r F r a | F r F r l | F r F r s | F r F r e | F r F u T | F r F u r | F r F u u | F r F u e | F r F u F | F r F u a | F r F u l | F r F u s | F r F u e | F r F e T | F r F e r | F r F e u | F r F e e | F r F e F | F r F e a | F r F e l | F r F e s | F r F e e | F r F F T | F r F F r | F r F F u | F r F F e | F r F F F | F r F F a | F r F F l | F r F F s | F r F F e | F r F a T | F r F a r | F r F a u | F r F a e | F r F a F | F r F a a | F r F a l | F r F a s | F r F a e | F r F l T | F r F l r | F r F l u | F r F l e | F r F l F | F r F l a | F r F l l | F r F l s | F r F l e | F r F s T | F r F s r | F r F s u | F r F s e | F r F s F | F r F s a | F r F s l | F r F s s | F r F s e | F r F e T | F r F e r | F r F e u | F r F e e | F r F e F | F r F e a | F r F e l | F r F e s | F r F e e | F r a T T | F r a T r | F r a T u | F r a T e | F r a T F | F r a T a | F r a T l | F r a T s | F r a T e | F r a r T | F r a r r | F r a r u | F r a r e | F r a r F | F r a r a | F r a r l | F r a r s | F r a r e | F r a u T | F r a u r | F r a u u | F r a u e | F r a u F | F r a u a | F r a u l | F r a u s | F r a u e | F r a e T | F r a e r | F r a e u | F r a e e | F r a e F | F r a e a | F r a e l | F r a e s | F r a e e | F r a F T | F r a F r | F r a F u | F r a F e | F r a F F | F r a F a | F r a F l | F r a F s | F r a F e | F r a a T | F r a a r | F r a a u | F r a a e | F r a a F | F r a a a | F r a a l | F r a a s | F r a a e | F r a l T | F r a l r | F r a l u | F r a l e | F r a l F | F r a l a | F r a l l | F r a l s | F r a l e | F r a s T | F r a s r | F r a s u | F r a s e | F r a s F | F r a s a | F r a s l | F r a s s | F r a s e | F r a e T | F r a e r | F r a e u | F r a e e | F r a e F | F r a e a | F r a e l | F r a e s | F r a e e | F r l T T | F r l T r | F r l T u | F r l T e | F r l T F | F r l T a | F r l T l | F r l T s | F r l T e | F r l r T | F r l r r | F r l r u | F r l r e | F r l r F | F r l r a | F r l r l | F r l r s | F r l r e | F r l u T | F r l u r | F r l u u | F r l u e | F r l u F | F r l u a | F r l u l | F r l u s | F r l u e | F r l e T | F r l e r | F r l e u | F r l e e | F r l e F | F r l e a | F r l e l | F r l e s | F r l e e | F r l F T | F r l F r | F r l F u | F r l F e | F r l F F | F r l F a | F r l F l | F r l F s | F r l F e | F r l a T | F r l a r | F r l a u | F r l a e | F r l a F | F r l a a | F r l a l | F r l a s | F r l a e | F r l l T | F r l l r | F r l l u | F r l l e | F r l l F | F r l l a | F r l l l | F r l l s | F r l l e | F r l s T | F r l s r | F r l s u | F r l s e | F r l s F | F r l s a | F r l s l | F r l s s | F r l s e | F r l e T | F r l e r | F r l e u | F r l e e | F r l e F | F r l e a | F r l e l | F r l e s | F r l e e | F r s T T | F r s T r | F r s T u | F r s T e | F r s T F | F r s T a | F r s T l | F r s T s | F r s T e | F r s r T | F r s r r | F r s r u | F r s r e | F r s r F | F r s r a | F r s r l | F r s r s | F r s r e | F r s u T | F r s u r | F r s u u | F r s u e | F r s u F | F r s u a | F r s u l | F r s u s | F r s u e | F r s e T | F r s e r | F r s e u | F r s e e | F r s e F | F r s e a | F r s e l | F r s e s | F r s e e | F r s F T | F r s F r | F r s F u | F r s F e | F r s F F | F r s F a | F r s F l | F r s F s | F r s F e | F r s a T | F r s a r | F r s a u | F r s a e | F r s a F | F r s a a | F r s a l | F r s a s | F r s a e | F r s l T | F r s l r | F r s l u | F r s l e | F r s l F | F r s l a | F r s l l | F r s l s | F r s l e | F r s s T | F r s s r | F r s s u | F r s s e | F r s s F | F r s s a | F r s s l | F r s s s | F r s s e | F r s e T | F r s e r | F r s e u | F r s e e | F r s e F | F r s e a | F r s e l | F r s e s | F r s e e | F r e T T | F r e T r | F r e T u | F r e T e | F r e T F | F r e T a | F r e T l | F r e T s | F r e T e | F r e r T | F r e r r | F r e r u | F r e r e | F r e r F | F r e r a | F r e r l | F r e r s | F r e r e | F r e u T | F r e u r | F r e u u | F r e u e | F r e u F | F r e u a | F r e u l | F r e u s | F r e u e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r e F T | F r e F r | F r e F u | F r e F e | F r e F F | F r e F a | F r e F l | F r e F s | F r e F e | F r e a T | F r e a r | F r e a u | F r e a e | F r e a F | F r e a a | F r e a l | F r e a s | F r e a e | F r e l T | F r e l r | F r e l u | F r e l e | F r e l F | F r e l a | F r e l l | F r e l s | F r e l e | F r e s T | F r e s r | F r e s u | F r e s e | F r e s F | F r e s a | F r e s l | F r e s s | F r e s e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F u T T T | F u T T r | F u T T u | F u T T e | F u T T F | F u T T a | F u T T l | F u T T s | F u T T e | F u T r T | F u T r r | F u T r u | F u T r e | F u T r F | F u T r a | F u T r l | F u T r s | F u T r e | F u T u T | F u T u r | F u T u u | F u T u e | F u T u F | F u T u a | F u T u l | F u T u s | F u T u e | F u T e T | F u T e r | F u T e u | F u T e e | F u T e F | F u T e a | F u T e l | F u T e s | F u T e e | F u T F T | F u T F r | F u T F u | F u T F e | F u T F F | F u T F a | F u T F l | F u T F s | F u T F e | F u T a T | F u T a r | F u T a u | F u T a e | F u T a F | F u T a a | F u T a l | F u T a s | F u T a e | F u T l T | F u T l r | F u T l u | F u T l e | F u T l F | F u T l a | F u T l l | F u T l s | F u T l e | F u T s T | F u T s r | F u T s u | F u T s e | F u T s F | F u T s a | F u T s l | F u T s s | F u T s e | F u T e T | F u T e r | F u T e u | F u T e e | F u T e F | F u T e a | F u T e l | F u T e s | F u T e e | F u r T T | F u r T r | F u r T u | F u r T e | F u r T F | F u r T a | F u r T l | F u r T s | F u r T e | F u r r T | F u r r r | F u r r u | F u r r e | F u r r F | F u r r a | F u r r l | F u r r s | F u r r e | F u r u T | F u r u r | F u r u u | F u r u e | F u r u F | F u r u a | F u r u l | F u r u s | F u r u e | F u r e T | F u r e r | F u r e u | F u r e e | F u r e F | F u r e a | F u r e l | F u r e s | F u r e e | F u r F T | F u r F r | F u r F u | F u r F e | F u r F F | F u r F a | F u r F l | F u r F s | F u r F e | F u r a T | F u r a r | F u r a u | F u r a e | F u r a F | F u r a a | F u r a l | F u r a s | F u r a e | F u r l T | F u r l r | F u r l u | F u r l e | F u r l F | F u r l a | F u r l l | F u r l s | F u r l e | F u r s T | F u r s r | F u r s u | F u r s e | F u r s F | F u r s a | F u r s l | F u r s s | F u r s e | F u r e T | F u r e r | F u r e u | F u r e e | F u r e F | F u r e a | F u r e l | F u r e s | F u r e e | F u u T T | F u u T r | F u u T u | F u u T e | F u u T F | F u u T a | F u u T l | F u u T s | F u u T e | F u u r T | F u u r r | F u u r u | F u u r e | F u u r F | F u u r a | F u u r l | F u u r s | F u u r e | F u u u T | F u u u r | F u u u u | F u u u e | F u u u F | F u u u a | F u u u l | F u u u s | F u u u e | F u u e T | F u u e r | F u u e u | F u u e e | F u u e F | F u u e a | F u u e l | F u u e s | F u u e e | F u u F T | F u u F r | F u u F u | F u u F e | F u u F F | F u u F a | F u u F l | F u u F s | F u u F e | F u u a T | F u u a r | F u u a u | F u u a e | F u u a F | F u u a a | F u u a l | F u u a s | F u u a e | F u u l T | F u u l r | F u u l u | F u u l e | F u u l F | F u u l a | F u u l l | F u u l s | F u u l e | F u u s T | F u u s r | F u u s u | F u u s e | F u u s F | F u u s a | F u u s l | F u u s s | F u u s e | F u u e T | F u u e r | F u u e u | F u u e e | F u u e F | F u u e a | F u u e l | F u u e s | F u u e e | F u e T T | F u e T r | F u e T u | F u e T e | F u e T F | F u e T a | F u e T l | F u e T s | F u e T e | F u e r T | F u e r r | F u e r u | F u e r e | F u e r F | F u e r a | F u e r l | F u e r s | F u e r e | F u e u T | F u e u r | F u e u u | F u e u e | F u e u F | F u e u a | F u e u l | F u e u s | F u e u e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u e F T | F u e F r | F u e F u | F u e F e | F u e F F | F u e F a | F u e F l | F u e F s | F u e F e | F u e a T | F u e a r | F u e a u | F u e a e | F u e a F | F u e a a | F u e a l | F u e a s | F u e a e | F u e l T | F u e l r | F u e l u | F u e l e | F u e l F | F u e l a | F u e l l | F u e l s | F u e l e | F u e s T | F u e s r | F u e s u | F u e s e | F u e s F | F u e s a | F u e s l | F u e s s | F u e s e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u F T T | F u F T r | F u F T u | F u F T e | F u F T F | F u F T a | F u F T l | F u F T s | F u F T e | F u F r T | F u F r r | F u F r u | F u F r e | F u F r F | F u F r a | F u F r l | F u F r s | F u F r e | F u F u T | F u F u r | F u F u u | F u F u e | F u F u F | F u F u a | F u F u l | F u F u s | F u F u e | F u F e T | F u F e r | F u F e u | F u F e e | F u F e F | F u F e a | F u F e l | F u F e s | F u F e e | F u F F T | F u F F r | F u F F u | F u F F e | F u F F F | F u F F a | F u F F l | F u F F s | F u F F e | F u F a T | F u F a r | F u F a u | F u F a e | F u F a F | F u F a a | F u F a l | F u F a s | F u F a e | F u F l T | F u F l r | F u F l u | F u F l e | F u F l F | F u F l a | F u F l l | F u F l s | F u F l e | F u F s T | F u F s r | F u F s u | F u F s e | F u F s F | F u F s a | F u F s l | F u F s s | F u F s e | F u F e T | F u F e r | F u F e u | F u F e e | F u F e F | F u F e a | F u F e l | F u F e s | F u F e e | F u a T T | F u a T r | F u a T u | F u a T e | F u a T F | F u a T a | F u a T l | F u a T s | F u a T e | F u a r T | F u a r r | F u a r u | F u a r e | F u a r F | F u a r a | F u a r l | F u a r s | F u a r e | F u a u T | F u a u r | F u a u u | F u a u e | F u a u F | F u a u a | F u a u l | F u a u s | F u a u e | F u a e T | F u a e r | F u a e u | F u a e e | F u a e F | F u a e a | F u a e l | F u a e s | F u a e e | F u a F T | F u a F r | F u a F u | F u a F e | F u a F F | F u a F a | F u a F l | F u a F s | F u a F e | F u a a T | F u a a r | F u a a u | F u a a e | F u a a F | F u a a a | F u a a l | F u a a s | F u a a e | F u a l T | F u a l r | F u a l u | F u a l e | F u a l F | F u a l a | F u a l l | F u a l s | F u a l e | F u a s T | F u a s r | F u a s u | F u a s e | F u a s F | F u a s a | F u a s l | F u a s s | F u a s e | F u a e T | F u a e r | F u a e u | F u a e e | F u a e F | F u a e a | F u a e l | F u a e s | F u a e e | F u l T T | F u l T r | F u l T u | F u l T e | F u l T F | F u l T a | F u l T l | F u l T s | F u l T e | F u l r T | F u l r r | F u l r u | F u l r e | F u l r F | F u l r a | F u l r l | F u l r s | F u l r e | F u l u T | F u l u r | F u l u u | F u l u e | F u l u F | F u l u a | F u l u l | F u l u s | F u l u e | F u l e T | F u l e r | F u l e u | F u l e e | F u l e F | F u l e a | F u l e l | F u l e s | F u l e e | F u l F T | F u l F r | F u l F u | F u l F e | F u l F F | F u l F a | F u l F l | F u l F s | F u l F e | F u l a T | F u l a r | F u l a u | F u l a e | F u l a F | F u l a a | F u l a l | F u l a s | F u l a e | F u l l T | F u l l r | F u l l u | F u l l e | F u l l F | F u l l a | F u l l l | F u l l s | F u l l e | F u l s T | F u l s r | F u l s u | F u l s e | F u l s F | F u l s a | F u l s l | F u l s s | F u l s e | F u l e T | F u l e r | F u l e u | F u l e e | F u l e F | F u l e a | F u l e l | F u l e s | F u l e e | F u s T T | F u s T r | F u s T u | F u s T e | F u s T F | F u s T a | F u s T l | F u s T s | F u s T e | F u s r T | F u s r r | F u s r u | F u s r e | F u s r F | F u s r a | F u s r l | F u s r s | F u s r e | F u s u T | F u s u r | F u s u u | F u s u e | F u s u F | F u s u a | F u s u l | F u s u s | F u s u e | F u s e T | F u s e r | F u s e u | F u s e e | F u s e F | F u s e a | F u s e l | F u s e s | F u s e e | F u s F T | F u s F r | F u s F u | F u s F e | F u s F F | F u s F a | F u s F l | F u s F s | F u s F e | F u s a T | F u s a r | F u s a u | F u s a e | F u s a F | F u s a a | F u s a l | F u s a s | F u s a e | F u s l T | F u s l r | F u s l u | F u s l e | F u s l F | F u s l a | F u s l l | F u s l s | F u s l e | F u s s T | F u s s r | F u s s u | F u s s e | F u s s F | F u s s a | F u s s l | F u s s s | F u s s e | F u s e T | F u s e r | F u s e u | F u s e e | F u s e F | F u s e a | F u s e l | F u s e s | F u s e e | F u e T T | F u e T r | F u e T u | F u e T e | F u e T F | F u e T a | F u e T l | F u e T s | F u e T e | F u e r T | F u e r r | F u e r u | F u e r e | F u e r F | F u e r a | F u e r l | F u e r s | F u e r e | F u e u T | F u e u r | F u e u u | F u e u e | F u e u F | F u e u a | F u e u l | F u e u s | F u e u e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u e F T | F u e F r | F u e F u | F u e F e | F u e F F | F u e F a | F u e F l | F u e F s | F u e F e | F u e a T | F u e a r | F u e a u | F u e a e | F u e a F | F u e a a | F u e a l | F u e a s | F u e a e | F u e l T | F u e l r | F u e l u | F u e l e | F u e l F | F u e l a | F u e l l | F u e l s | F u e l e | F u e s T | F u e s r | F u e s u | F u e s e | F u e s F | F u e s a | F u e s l | F u e s s | F u e s e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F e T T T | F e T T r | F e T T u | F e T T e | F e T T F | F e T T a | F e T T l | F e T T s | F e T T e | F e T r T | F e T r r | F e T r u | F e T r e | F e T r F | F e T r a | F e T r l | F e T r s | F e T r e | F e T u T | F e T u r | F e T u u | F e T u e | F e T u F | F e T u a | F e T u l | F e T u s | F e T u e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e T F T | F e T F r | F e T F u | F e T F e | F e T F F | F e T F a | F e T F l | F e T F s | F e T F e | F e T a T | F e T a r | F e T a u | F e T a e | F e T a F | F e T a a | F e T a l | F e T a s | F e T a e | F e T l T | F e T l r | F e T l u | F e T l e | F e T l F | F e T l a | F e T l l | F e T l s | F e T l e | F e T s T | F e T s r | F e T s u | F e T s e | F e T s F | F e T s a | F e T s l | F e T s s | F e T s e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e r T T | F e r T r | F e r T u | F e r T e | F e r T F | F e r T a | F e r T l | F e r T s | F e r T e | F e r r T | F e r r r | F e r r u | F e r r e | F e r r F | F e r r a | F e r r l | F e r r s | F e r r e | F e r u T | F e r u r | F e r u u | F e r u e | F e r u F | F e r u a | F e r u l | F e r u s | F e r u e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e r F T | F e r F r | F e r F u | F e r F e | F e r F F | F e r F a | F e r F l | F e r F s | F e r F e | F e r a T | F e r a r | F e r a u | F e r a e | F e r a F | F e r a a | F e r a l | F e r a s | F e r a e | F e r l T | F e r l r | F e r l u | F e r l e | F e r l F | F e r l a | F e r l l | F e r l s | F e r l e | F e r s T | F e r s r | F e r s u | F e r s e | F e r s F | F e r s a | F e r s l | F e r s s | F e r s e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e u T T | F e u T r | F e u T u | F e u T e | F e u T F | F e u T a | F e u T l | F e u T s | F e u T e | F e u r T | F e u r r | F e u r u | F e u r e | F e u r F | F e u r a | F e u r l | F e u r s | F e u r e | F e u u T | F e u u r | F e u u u | F e u u e | F e u u F | F e u u a | F e u u l | F e u u s | F e u u e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e u F T | F e u F r | F e u F u | F e u F e | F e u F F | F e u F a | F e u F l | F e u F s | F e u F e | F e u a T | F e u a r | F e u a u | F e u a e | F e u a F | F e u a a | F e u a l | F e u a s | F e u a e | F e u l T | F e u l r | F e u l u | F e u l e | F e u l F | F e u l a | F e u l l | F e u l s | F e u l e | F e u s T | F e u s r | F e u s u | F e u s e | F e u s F | F e u s a | F e u s l | F e u s s | F e u s e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e F T T | F e F T r | F e F T u | F e F T e | F e F T F | F e F T a | F e F T l | F e F T s | F e F T e | F e F r T | F e F r r | F e F r u | F e F r e | F e F r F | F e F r a | F e F r l | F e F r s | F e F r e | F e F u T | F e F u r | F e F u u | F e F u e | F e F u F | F e F u a | F e F u l | F e F u s | F e F u e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e F F T | F e F F r | F e F F u | F e F F e | F e F F F | F e F F a | F e F F l | F e F F s | F e F F e | F e F a T | F e F a r | F e F a u | F e F a e | F e F a F | F e F a a | F e F a l | F e F a s | F e F a e | F e F l T | F e F l r | F e F l u | F e F l e | F e F l F | F e F l a | F e F l l | F e F l s | F e F l e | F e F s T | F e F s r | F e F s u | F e F s e | F e F s F | F e F s a | F e F s l | F e F s s | F e F s e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e a T T | F e a T r | F e a T u | F e a T e | F e a T F | F e a T a | F e a T l | F e a T s | F e a T e | F e a r T | F e a r r | F e a r u | F e a r e | F e a r F | F e a r a | F e a r l | F e a r s | F e a r e | F e a u T | F e a u r | F e a u u | F e a u e | F e a u F | F e a u a | F e a u l | F e a u s | F e a u e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e a F T | F e a F r | F e a F u | F e a F e | F e a F F | F e a F a | F e a F l | F e a F s | F e a F e | F e a a T | F e a a r | F e a a u | F e a a e | F e a a F | F e a a a | F e a a l | F e a a s | F e a a e | F e a l T | F e a l r | F e a l u | F e a l e | F e a l F | F e a l a | F e a l l | F e a l s | F e a l e | F e a s T | F e a s r | F e a s u | F e a s e | F e a s F | F e a s a | F e a s l | F e a s s | F e a s e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e l T T | F e l T r | F e l T u | F e l T e | F e l T F | F e l T a | F e l T l | F e l T s | F e l T e | F e l r T | F e l r r | F e l r u | F e l r e | F e l r F | F e l r a | F e l r l | F e l r s | F e l r e | F e l u T | F e l u r | F e l u u | F e l u e | F e l u F | F e l u a | F e l u l | F e l u s | F e l u e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e l F T | F e l F r | F e l F u | F e l F e | F e l F F | F e l F a | F e l F l | F e l F s | F e l F e | F e l a T | F e l a r | F e l a u | F e l a e | F e l a F | F e l a a | F e l a l | F e l a s | F e l a e | F e l l T | F e l l r | F e l l u | F e l l e | F e l l F | F e l l a | F e l l l | F e l l s | F e l l e | F e l s T | F e l s r | F e l s u | F e l s e | F e l s F | F e l s a | F e l s l | F e l s s | F e l s e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e s T T | F e s T r | F e s T u | F e s T e | F e s T F | F e s T a | F e s T l | F e s T s | F e s T e | F e s r T | F e s r r | F e s r u | F e s r e | F e s r F | F e s r a | F e s r l | F e s r s | F e s r e | F e s u T | F e s u r | F e s u u | F e s u e | F e s u F | F e s u a | F e s u l | F e s u s | F e s u e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e s F T | F e s F r | F e s F u | F e s F e | F e s F F | F e s F a | F e s F l | F e s F s | F e s F e | F e s a T | F e s a r | F e s a u | F e s a e | F e s a F | F e s a a | F e s a l | F e s a s | F e s a e | F e s l T | F e s l r | F e s l u | F e s l e | F e s l F | F e s l a | F e s l l | F e s l s | F e s l e | F e s s T | F e s s r | F e s s u | F e s s e | F e s s F | F e s s a | F e s s l | F e s s s | F e s s e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F F T T T | F F T T r | F F T T u | F F T T e | F F T T F | F F T T a | F F T T l | F F T T s | F F T T e | F F T r T | F F T r r | F F T r u | F F T r e | F F T r F | F F T r a | F F T r l | F F T r s | F F T r e | F F T u T | F F T u r | F F T u u | F F T u e | F F T u F | F F T u a | F F T u l | F F T u s | F F T u e | F F T e T | F F T e r | F F T e u | F F T e e | F F T e F | F F T e a | F F T e l | F F T e s | F F T e e | F F T F T | F F T F r | F F T F u | F F T F e | F F T F F | F F T F a | F F T F l | F F T F s | F F T F e | F F T a T | F F T a r | F F T a u | F F T a e | F F T a F | F F T a a | F F T a l | F F T a s | F F T a e | F F T l T | F F T l r | F F T l u | F F T l e | F F T l F | F F T l a | F F T l l | F F T l s | F F T l e | F F T s T | F F T s r | F F T s u | F F T s e | F F T s F | F F T s a | F F T s l | F F T s s | F F T s e | F F T e T | F F T e r | F F T e u | F F T e e | F F T e F | F F T e a | F F T e l | F F T e s | F F T e e | F F r T T | F F r T r | F F r T u | F F r T e | F F r T F | F F r T a | F F r T l | F F r T s | F F r T e | F F r r T | F F r r r | F F r r u | F F r r e | F F r r F | F F r r a | F F r r l | F F r r s | F F r r e | F F r u T | F F r u r | F F r u u | F F r u e | F F r u F | F F r u a | F F r u l | F F r u s | F F r u e | F F r e T | F F r e r | F F r e u | F F r e e | F F r e F | F F r e a | F F r e l | F F r e s | F F r e e | F F r F T | F F r F r | F F r F u | F F r F e | F F r F F | F F r F a | F F r F l | F F r F s | F F r F e | F F r a T | F F r a r | F F r a u | F F r a e | F F r a F | F F r a a | F F r a l | F F r a s | F F r a e | F F r l T | F F r l r | F F r l u | F F r l e | F F r l F | F F r l a | F F r l l | F F r l s | F F r l e | F F r s T | F F r s r | F F r s u | F F r s e | F F r s F | F F r s a | F F r s l | F F r s s | F F r s e | F F r e T | F F r e r | F F r e u | F F r e e | F F r e F | F F r e a | F F r e l | F F r e s | F F r e e | F F u T T | F F u T r | F F u T u | F F u T e | F F u T F | F F u T a | F F u T l | F F u T s | F F u T e | F F u r T | F F u r r | F F u r u | F F u r e | F F u r F | F F u r a | F F u r l | F F u r s | F F u r e | F F u u T | F F u u r | F F u u u | F F u u e | F F u u F | F F u u a | F F u u l | F F u u s | F F u u e | F F u e T | F F u e r | F F u e u | F F u e e | F F u e F | F F u e a | F F u e l | F F u e s | F F u e e | F F u F T | F F u F r | F F u F u | F F u F e | F F u F F | F F u F a | F F u F l | F F u F s | F F u F e | F F u a T | F F u a r | F F u a u | F F u a e | F F u a F | F F u a a | F F u a l | F F u a s | F F u a e | F F u l T | F F u l r | F F u l u | F F u l e | F F u l F | F F u l a | F F u l l | F F u l s | F F u l e | F F u s T | F F u s r | F F u s u | F F u s e | F F u s F | F F u s a | F F u s l | F F u s s | F F u s e | F F u e T | F F u e r | F F u e u | F F u e e | F F u e F | F F u e a | F F u e l | F F u e s | F F u e e | F F e T T | F F e T r | F F e T u | F F e T e | F F e T F | F F e T a | F F e T l | F F e T s | F F e T e | F F e r T | F F e r r | F F e r u | F F e r e | F F e r F | F F e r a | F F e r l | F F e r s | F F e r e | F F e u T | F F e u r | F F e u u | F F e u e | F F e u F | F F e u a | F F e u l | F F e u s | F F e u e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F e F T | F F e F r | F F e F u | F F e F e | F F e F F | F F e F a | F F e F l | F F e F s | F F e F e | F F e a T | F F e a r | F F e a u | F F e a e | F F e a F | F F e a a | F F e a l | F F e a s | F F e a e | F F e l T | F F e l r | F F e l u | F F e l e | F F e l F | F F e l a | F F e l l | F F e l s | F F e l e | F F e s T | F F e s r | F F e s u | F F e s e | F F e s F | F F e s a | F F e s l | F F e s s | F F e s e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F F T T | F F F T r | F F F T u | F F F T e | F F F T F | F F F T a | F F F T l | F F F T s | F F F T e | F F F r T | F F F r r | F F F r u | F F F r e | F F F r F | F F F r a | F F F r l | F F F r s | F F F r e | F F F u T | F F F u r | F F F u u | F F F u e | F F F u F | F F F u a | F F F u l | F F F u s | F F F u e | F F F e T | F F F e r | F F F e u | F F F e e | F F F e F | F F F e a | F F F e l | F F F e s | F F F e e | F F F F T | F F F F r | F F F F u | F F F F e | F F F F F | F F F F a | F F F F l | F F F F s | F F F F e | F F F a T | F F F a r | F F F a u | F F F a e | F F F a F | F F F a a | F F F a l | F F F a s | F F F a e | F F F l T | F F F l r | F F F l u | F F F l e | F F F l F | F F F l a | F F F l l | F F F l s | F F F l e | F F F s T | F F F s r | F F F s u | F F F s e | F F F s F | F F F s a | F F F s l | F F F s s | F F F s e | F F F e T | F F F e r | F F F e u | F F F e e | F F F e F | F F F e a | F F F e l | F F F e s | F F F e e | F F a T T | F F a T r | F F a T u | F F a T e | F F a T F | F F a T a | F F a T l | F F a T s | F F a T e | F F a r T | F F a r r | F F a r u | F F a r e | F F a r F | F F a r a | F F a r l | F F a r s | F F a r e | F F a u T | F F a u r | F F a u u | F F a u e | F F a u F | F F a u a | F F a u l | F F a u s | F F a u e | F F a e T | F F a e r | F F a e u | F F a e e | F F a e F | F F a e a | F F a e l | F F a e s | F F a e e | F F a F T | F F a F r | F F a F u | F F a F e | F F a F F | F F a F a | F F a F l | F F a F s | F F a F e | F F a a T | F F a a r | F F a a u | F F a a e | F F a a F | F F a a a | F F a a l | F F a a s | F F a a e | F F a l T | F F a l r | F F a l u | F F a l e | F F a l F | F F a l a | F F a l l | F F a l s | F F a l e | F F a s T | F F a s r | F F a s u | F F a s e | F F a s F | F F a s a | F F a s l | F F a s s | F F a s e | F F a e T | F F a e r | F F a e u | F F a e e | F F a e F | F F a e a | F F a e l | F F a e s | F F a e e | F F l T T | F F l T r | F F l T u | F F l T e | F F l T F | F F l T a | F F l T l | F F l T s | F F l T e | F F l r T | F F l r r | F F l r u | F F l r e | F F l r F | F F l r a | F F l r l | F F l r s | F F l r e | F F l u T | F F l u r | F F l u u | F F l u e | F F l u F | F F l u a | F F l u l | F F l u s | F F l u e | F F l e T | F F l e r | F F l e u | F F l e e | F F l e F | F F l e a | F F l e l | F F l e s | F F l e e | F F l F T | F F l F r | F F l F u | F F l F e | F F l F F | F F l F a | F F l F l | F F l F s | F F l F e | F F l a T | F F l a r | F F l a u | F F l a e | F F l a F | F F l a a | F F l a l | F F l a s | F F l a e | F F l l T | F F l l r | F F l l u | F F l l e | F F l l F | F F l l a | F F l l l | F F l l s | F F l l e | F F l s T | F F l s r | F F l s u | F F l s e | F F l s F | F F l s a | F F l s l | F F l s s | F F l s e | F F l e T | F F l e r | F F l e u | F F l e e | F F l e F | F F l e a | F F l e l | F F l e s | F F l e e | F F s T T | F F s T r | F F s T u | F F s T e | F F s T F | F F s T a | F F s T l | F F s T s | F F s T e | F F s r T | F F s r r | F F s r u | F F s r e | F F s r F | F F s r a | F F s r l | F F s r s | F F s r e | F F s u T | F F s u r | F F s u u | F F s u e | F F s u F | F F s u a | F F s u l | F F s u s | F F s u e | F F s e T | F F s e r | F F s e u | F F s e e | F F s e F | F F s e a | F F s e l | F F s e s | F F s e e | F F s F T | F F s F r | F F s F u | F F s F e | F F s F F | F F s F a | F F s F l | F F s F s | F F s F e | F F s a T | F F s a r | F F s a u | F F s a e | F F s a F | F F s a a | F F s a l | F F s a s | F F s a e | F F s l T | F F s l r | F F s l u | F F s l e | F F s l F | F F s l a | F F s l l | F F s l s | F F s l e | F F s s T | F F s s r | F F s s u | F F s s e | F F s s F | F F s s a | F F s s l | F F s s s | F F s s e | F F s e T | F F s e r | F F s e u | F F s e e | F F s e F | F F s e a | F F s e l | F F s e s | F F s e e | F F e T T | F F e T r | F F e T u | F F e T e | F F e T F | F F e T a | F F e T l | F F e T s | F F e T e | F F e r T | F F e r r | F F e r u | F F e r e | F F e r F | F F e r a | F F e r l | F F e r s | F F e r e | F F e u T | F F e u r | F F e u u | F F e u e | F F e u F | F F e u a | F F e u l | F F e u s | F F e u e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F e F T | F F e F r | F F e F u | F F e F e | F F e F F | F F e F a | F F e F l | F F e F s | F F e F e | F F e a T | F F e a r | F F e a u | F F e a e | F F e a F | F F e a a | F F e a l | F F e a s | F F e a e | F F e l T | F F e l r | F F e l u | F F e l e | F F e l F | F F e l a | F F e l l | F F e l s | F F e l e | F F e s T | F F e s r | F F e s u | F F e s e | F F e s F | F F e s a | F F e s l | F F e s s | F F e s e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F a T T T | F a T T r | F a T T u | F a T T e | F a T T F | F a T T a | F a T T l | F a T T s | F a T T e | F a T r T | F a T r r | F a T r u | F a T r e | F a T r F | F a T r a | F a T r l | F a T r s | F a T r e | F a T u T | F a T u r | F a T u u | F a T u e | F a T u F | F a T u a | F a T u l | F a T u s | F a T u e | F a T e T | F a T e r | F a T e u | F a T e e | F a T e F | F a T e a | F a T e l | F a T e s | F a T e e | F a T F T | F a T F r | F a T F u | F a T F e | F a T F F | F a T F a | F a T F l | F a T F s | F a T F e | F a T a T | F a T a r | F a T a u | F a T a e | F a T a F | F a T a a | F a T a l | F a T a s | F a T a e | F a T l T | F a T l r | F a T l u | F a T l e | F a T l F | F a T l a | F a T l l | F a T l s | F a T l e | F a T s T | F a T s r | F a T s u | F a T s e | F a T s F | F a T s a | F a T s l | F a T s s | F a T s e | F a T e T | F a T e r | F a T e u | F a T e e | F a T e F | F a T e a | F a T e l | F a T e s | F a T e e | F a r T T | F a r T r | F a r T u | F a r T e | F a r T F | F a r T a | F a r T l | F a r T s | F a r T e | F a r r T | F a r r r | F a r r u | F a r r e | F a r r F | F a r r a | F a r r l | F a r r s | F a r r e | F a r u T | F a r u r | F a r u u | F a r u e | F a r u F | F a r u a | F a r u l | F a r u s | F a r u e | F a r e T | F a r e r | F a r e u | F a r e e | F a r e F | F a r e a | F a r e l | F a r e s | F a r e e | F a r F T | F a r F r | F a r F u | F a r F e | F a r F F | F a r F a | F a r F l | F a r F s | F a r F e | F a r a T | F a r a r | F a r a u | F a r a e | F a r a F | F a r a a | F a r a l | F a r a s | F a r a e | F a r l T | F a r l r | F a r l u | F a r l e | F a r l F | F a r l a | F a r l l | F a r l s | F a r l e | F a r s T | F a r s r | F a r s u | F a r s e | F a r s F | F a r s a | F a r s l | F a r s s | F a r s e | F a r e T | F a r e r | F a r e u | F a r e e | F a r e F | F a r e a | F a r e l | F a r e s | F a r e e | F a u T T | F a u T r | F a u T u | F a u T e | F a u T F | F a u T a | F a u T l | F a u T s | F a u T e | F a u r T | F a u r r | F a u r u | F a u r e | F a u r F | F a u r a | F a u r l | F a u r s | F a u r e | F a u u T | F a u u r | F a u u u | F a u u e | F a u u F | F a u u a | F a u u l | F a u u s | F a u u e | F a u e T | F a u e r | F a u e u | F a u e e | F a u e F | F a u e a | F a u e l | F a u e s | F a u e e | F a u F T | F a u F r | F a u F u | F a u F e | F a u F F | F a u F a | F a u F l | F a u F s | F a u F e | F a u a T | F a u a r | F a u a u | F a u a e | F a u a F | F a u a a | F a u a l | F a u a s | F a u a e | F a u l T | F a u l r | F a u l u | F a u l e | F a u l F | F a u l a | F a u l l | F a u l s | F a u l e | F a u s T | F a u s r | F a u s u | F a u s e | F a u s F | F a u s a | F a u s l | F a u s s | F a u s e | F a u e T | F a u e r | F a u e u | F a u e e | F a u e F | F a u e a | F a u e l | F a u e s | F a u e e | F a e T T | F a e T r | F a e T u | F a e T e | F a e T F | F a e T a | F a e T l | F a e T s | F a e T e | F a e r T | F a e r r | F a e r u | F a e r e | F a e r F | F a e r a | F a e r l | F a e r s | F a e r e | F a e u T | F a e u r | F a e u u | F a e u e | F a e u F | F a e u a | F a e u l | F a e u s | F a e u e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a e F T | F a e F r | F a e F u | F a e F e | F a e F F | F a e F a | F a e F l | F a e F s | F a e F e | F a e a T | F a e a r | F a e a u | F a e a e | F a e a F | F a e a a | F a e a l | F a e a s | F a e a e | F a e l T | F a e l r | F a e l u | F a e l e | F a e l F | F a e l a | F a e l l | F a e l s | F a e l e | F a e s T | F a e s r | F a e s u | F a e s e | F a e s F | F a e s a | F a e s l | F a e s s | F a e s e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a F T T | F a F T r | F a F T u | F a F T e | F a F T F | F a F T a | F a F T l | F a F T s | F a F T e | F a F r T | F a F r r | F a F r u | F a F r e | F a F r F | F a F r a | F a F r l | F a F r s | F a F r e | F a F u T | F a F u r | F a F u u | F a F u e | F a F u F | F a F u a | F a F u l | F a F u s | F a F u e | F a F e T | F a F e r | F a F e u | F a F e e | F a F e F | F a F e a | F a F e l | F a F e s | F a F e e | F a F F T | F a F F r | F a F F u | F a F F e | F a F F F | F a F F a | F a F F l | F a F F s | F a F F e | F a F a T | F a F a r | F a F a u | F a F a e | F a F a F | F a F a a | F a F a l | F a F a s | F a F a e | F a F l T | F a F l r | F a F l u | F a F l e | F a F l F | F a F l a | F a F l l | F a F l s | F a F l e | F a F s T | F a F s r | F a F s u | F a F s e | F a F s F | F a F s a | F a F s l | F a F s s | F a F s e | F a F e T | F a F e r | F a F e u | F a F e e | F a F e F | F a F e a | F a F e l | F a F e s | F a F e e | F a a T T | F a a T r | F a a T u | F a a T e | F a a T F | F a a T a | F a a T l | F a a T s | F a a T e | F a a r T | F a a r r | F a a r u | F a a r e | F a a r F | F a a r a | F a a r l | F a a r s | F a a r e | F a a u T | F a a u r | F a a u u | F a a u e | F a a u F | F a a u a | F a a u l | F a a u s | F a a u e | F a a e T | F a a e r | F a a e u | F a a e e | F a a e F | F a a e a | F a a e l | F a a e s | F a a e e | F a a F T | F a a F r | F a a F u | F a a F e | F a a F F | F a a F a | F a a F l | F a a F s | F a a F e | F a a a T | F a a a r | F a a a u | F a a a e | F a a a F | F a a a a | F a a a l | F a a a s | F a a a e | F a a l T | F a a l r | F a a l u | F a a l e | F a a l F | F a a l a | F a a l l | F a a l s | F a a l e | F a a s T | F a a s r | F a a s u | F a a s e | F a a s F | F a a s a | F a a s l | F a a s s | F a a s e | F a a e T | F a a e r | F a a e u | F a a e e | F a a e F | F a a e a | F a a e l | F a a e s | F a a e e | F a l T T | F a l T r | F a l T u | F a l T e | F a l T F | F a l T a | F a l T l | F a l T s | F a l T e | F a l r T | F a l r r | F a l r u | F a l r e | F a l r F | F a l r a | F a l r l | F a l r s | F a l r e | F a l u T | F a l u r | F a l u u | F a l u e | F a l u F | F a l u a | F a l u l | F a l u s | F a l u e | F a l e T | F a l e r | F a l e u | F a l e e | F a l e F | F a l e a | F a l e l | F a l e s | F a l e e | F a l F T | F a l F r | F a l F u | F a l F e | F a l F F | F a l F a | F a l F l | F a l F s | F a l F e | F a l a T | F a l a r | F a l a u | F a l a e | F a l a F | F a l a a | F a l a l | F a l a s | F a l a e | F a l l T | F a l l r | F a l l u | F a l l e | F a l l F | F a l l a | F a l l l | F a l l s | F a l l e | F a l s T | F a l s r | F a l s u | F a l s e | F a l s F | F a l s a | F a l s l | F a l s s | F a l s e | F a l e T | F a l e r | F a l e u | F a l e e | F a l e F | F a l e a | F a l e l | F a l e s | F a l e e | F a s T T | F a s T r | F a s T u | F a s T e | F a s T F | F a s T a | F a s T l | F a s T s | F a s T e | F a s r T | F a s r r | F a s r u | F a s r e | F a s r F | F a s r a | F a s r l | F a s r s | F a s r e | F a s u T | F a s u r | F a s u u | F a s u e | F a s u F | F a s u a | F a s u l | F a s u s | F a s u e | F a s e T | F a s e r | F a s e u | F a s e e | F a s e F | F a s e a | F a s e l | F a s e s | F a s e e | F a s F T | F a s F r | F a s F u | F a s F e | F a s F F | F a s F a | F a s F l | F a s F s | F a s F e | F a s a T | F a s a r | F a s a u | F a s a e | F a s a F | F a s a a | F a s a l | F a s a s | F a s a e | F a s l T | F a s l r | F a s l u | F a s l e | F a s l F | F a s l a | F a s l l | F a s l s | F a s l e | F a s s T | F a s s r | F a s s u | F a s s e | F a s s F | F a s s a | F a s s l | F a s s s | F a s s e | F a s e T | F a s e r | F a s e u | F a s e e | F a s e F | F a s e a | F a s e l | F a s e s | F a s e e | F a e T T | F a e T r | F a e T u | F a e T e | F a e T F | F a e T a | F a e T l | F a e T s | F a e T e | F a e r T | F a e r r | F a e r u | F a e r e | F a e r F | F a e r a | F a e r l | F a e r s | F a e r e | F a e u T | F a e u r | F a e u u | F a e u e | F a e u F | F a e u a | F a e u l | F a e u s | F a e u e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a e F T | F a e F r | F a e F u | F a e F e | F a e F F | F a e F a | F a e F l | F a e F s | F a e F e | F a e a T | F a e a r | F a e a u | F a e a e | F a e a F | F a e a a | F a e a l | F a e a s | F a e a e | F a e l T | F a e l r | F a e l u | F a e l e | F a e l F | F a e l a | F a e l l | F a e l s | F a e l e | F a e s T | F a e s r | F a e s u | F a e s e | F a e s F | F a e s a | F a e s l | F a e s s | F a e s e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F l T T T | F l T T r | F l T T u | F l T T e | F l T T F | F l T T a | F l T T l | F l T T s | F l T T e | F l T r T | F l T r r | F l T r u | F l T r e | F l T r F | F l T r a | F l T r l | F l T r s | F l T r e | F l T u T | F l T u r | F l T u u | F l T u e | F l T u F | F l T u a | F l T u l | F l T u s | F l T u e | F l T e T | F l T e r | F l T e u | F l T e e | F l T e F | F l T e a | F l T e l | F l T e s | F l T e e | F l T F T | F l T F r | F l T F u | F l T F e | F l T F F | F l T F a | F l T F l | F l T F s | F l T F e | F l T a T | F l T a r | F l T a u | F l T a e | F l T a F | F l T a a | F l T a l | F l T a s | F l T a e | F l T l T | F l T l r | F l T l u | F l T l e | F l T l F | F l T l a | F l T l l | F l T l s | F l T l e | F l T s T | F l T s r | F l T s u | F l T s e | F l T s F | F l T s a | F l T s l | F l T s s | F l T s e | F l T e T | F l T e r | F l T e u | F l T e e | F l T e F | F l T e a | F l T e l | F l T e s | F l T e e | F l r T T | F l r T r | F l r T u | F l r T e | F l r T F | F l r T a | F l r T l | F l r T s | F l r T e | F l r r T | F l r r r | F l r r u | F l r r e | F l r r F | F l r r a | F l r r l | F l r r s | F l r r e | F l r u T | F l r u r | F l r u u | F l r u e | F l r u F | F l r u a | F l r u l | F l r u s | F l r u e | F l r e T | F l r e r | F l r e u | F l r e e | F l r e F | F l r e a | F l r e l | F l r e s | F l r e e | F l r F T | F l r F r | F l r F u | F l r F e | F l r F F | F l r F a | F l r F l | F l r F s | F l r F e | F l r a T | F l r a r | F l r a u | F l r a e | F l r a F | F l r a a | F l r a l | F l r a s | F l r a e | F l r l T | F l r l r | F l r l u | F l r l e | F l r l F | F l r l a | F l r l l | F l r l s | F l r l e | F l r s T | F l r s r | F l r s u | F l r s e | F l r s F | F l r s a | F l r s l | F l r s s | F l r s e | F l r e T | F l r e r | F l r e u | F l r e e | F l r e F | F l r e a | F l r e l | F l r e s | F l r e e | F l u T T | F l u T r | F l u T u | F l u T e | F l u T F | F l u T a | F l u T l | F l u T s | F l u T e | F l u r T | F l u r r | F l u r u | F l u r e | F l u r F | F l u r a | F l u r l | F l u r s | F l u r e | F l u u T | F l u u r | F l u u u | F l u u e | F l u u F | F l u u a | F l u u l | F l u u s | F l u u e | F l u e T | F l u e r | F l u e u | F l u e e | F l u e F | F l u e a | F l u e l | F l u e s | F l u e e | F l u F T | F l u F r | F l u F u | F l u F e | F l u F F | F l u F a | F l u F l | F l u F s | F l u F e | F l u a T | F l u a r | F l u a u | F l u a e | F l u a F | F l u a a | F l u a l | F l u a s | F l u a e | F l u l T | F l u l r | F l u l u | F l u l e | F l u l F | F l u l a | F l u l l | F l u l s | F l u l e | F l u s T | F l u s r | F l u s u | F l u s e | F l u s F | F l u s a | F l u s l | F l u s s | F l u s e | F l u e T | F l u e r | F l u e u | F l u e e | F l u e F | F l u e a | F l u e l | F l u e s | F l u e e | F l e T T | F l e T r | F l e T u | F l e T e | F l e T F | F l e T a | F l e T l | F l e T s | F l e T e | F l e r T | F l e r r | F l e r u | F l e r e | F l e r F | F l e r a | F l e r l | F l e r s | F l e r e | F l e u T | F l e u r | F l e u u | F l e u e | F l e u F | F l e u a | F l e u l | F l e u s | F l e u e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l e F T | F l e F r | F l e F u | F l e F e | F l e F F | F l e F a | F l e F l | F l e F s | F l e F e | F l e a T | F l e a r | F l e a u | F l e a e | F l e a F | F l e a a | F l e a l | F l e a s | F l e a e | F l e l T | F l e l r | F l e l u | F l e l e | F l e l F | F l e l a | F l e l l | F l e l s | F l e l e | F l e s T | F l e s r | F l e s u | F l e s e | F l e s F | F l e s a | F l e s l | F l e s s | F l e s e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l F T T | F l F T r | F l F T u | F l F T e | F l F T F | F l F T a | F l F T l | F l F T s | F l F T e | F l F r T | F l F r r | F l F r u | F l F r e | F l F r F | F l F r a | F l F r l | F l F r s | F l F r e | F l F u T | F l F u r | F l F u u | F l F u e | F l F u F | F l F u a | F l F u l | F l F u s | F l F u e | F l F e T | F l F e r | F l F e u | F l F e e | F l F e F | F l F e a | F l F e l | F l F e s | F l F e e | F l F F T | F l F F r | F l F F u | F l F F e | F l F F F | F l F F a | F l F F l | F l F F s | F l F F e | F l F a T | F l F a r | F l F a u | F l F a e | F l F a F | F l F a a | F l F a l | F l F a s | F l F a e | F l F l T | F l F l r | F l F l u | F l F l e | F l F l F | F l F l a | F l F l l | F l F l s | F l F l e | F l F s T | F l F s r | F l F s u | F l F s e | F l F s F | F l F s a | F l F s l | F l F s s | F l F s e | F l F e T | F l F e r | F l F e u | F l F e e | F l F e F | F l F e a | F l F e l | F l F e s | F l F e e | F l a T T | F l a T r | F l a T u | F l a T e | F l a T F | F l a T a | F l a T l | F l a T s | F l a T e | F l a r T | F l a r r | F l a r u | F l a r e | F l a r F | F l a r a | F l a r l | F l a r s | F l a r e | F l a u T | F l a u r | F l a u u | F l a u e | F l a u F | F l a u a | F l a u l | F l a u s | F l a u e | F l a e T | F l a e r | F l a e u | F l a e e | F l a e F | F l a e a | F l a e l | F l a e s | F l a e e | F l a F T | F l a F r | F l a F u | F l a F e | F l a F F | F l a F a | F l a F l | F l a F s | F l a F e | F l a a T | F l a a r | F l a a u | F l a a e | F l a a F | F l a a a | F l a a l | F l a a s | F l a a e | F l a l T | F l a l r | F l a l u | F l a l e | F l a l F | F l a l a | F l a l l | F l a l s | F l a l e | F l a s T | F l a s r | F l a s u | F l a s e | F l a s F | F l a s a | F l a s l | F l a s s | F l a s e | F l a e T | F l a e r | F l a e u | F l a e e | F l a e F | F l a e a | F l a e l | F l a e s | F l a e e | F l l T T | F l l T r | F l l T u | F l l T e | F l l T F | F l l T a | F l l T l | F l l T s | F l l T e | F l l r T | F l l r r | F l l r u | F l l r e | F l l r F | F l l r a | F l l r l | F l l r s | F l l r e | F l l u T | F l l u r | F l l u u | F l l u e | F l l u F | F l l u a | F l l u l | F l l u s | F l l u e | F l l e T | F l l e r | F l l e u | F l l e e | F l l e F | F l l e a | F l l e l | F l l e s | F l l e e | F l l F T | F l l F r | F l l F u | F l l F e | F l l F F | F l l F a | F l l F l | F l l F s | F l l F e | F l l a T | F l l a r | F l l a u | F l l a e | F l l a F | F l l a a | F l l a l | F l l a s | F l l a e | F l l l T | F l l l r | F l l l u | F l l l e | F l l l F | F l l l a | F l l l l | F l l l s | F l l l e | F l l s T | F l l s r | F l l s u | F l l s e | F l l s F | F l l s a | F l l s l | F l l s s | F l l s e | F l l e T | F l l e r | F l l e u | F l l e e | F l l e F | F l l e a | F l l e l | F l l e s | F l l e e | F l s T T | F l s T r | F l s T u | F l s T e | F l s T F | F l s T a | F l s T l | F l s T s | F l s T e | F l s r T | F l s r r | F l s r u | F l s r e | F l s r F | F l s r a | F l s r l | F l s r s | F l s r e | F l s u T | F l s u r | F l s u u | F l s u e | F l s u F | F l s u a | F l s u l | F l s u s | F l s u e | F l s e T | F l s e r | F l s e u | F l s e e | F l s e F | F l s e a | F l s e l | F l s e s | F l s e e | F l s F T | F l s F r | F l s F u | F l s F e | F l s F F | F l s F a | F l s F l | F l s F s | F l s F e | F l s a T | F l s a r | F l s a u | F l s a e | F l s a F | F l s a a | F l s a l | F l s a s | F l s a e | F l s l T | F l s l r | F l s l u | F l s l e | F l s l F | F l s l a | F l s l l | F l s l s | F l s l e | F l s s T | F l s s r | F l s s u | F l s s e | F l s s F | F l s s a | F l s s l | F l s s s | F l s s e | F l s e T | F l s e r | F l s e u | F l s e e | F l s e F | F l s e a | F l s e l | F l s e s | F l s e e | F l e T T | F l e T r | F l e T u | F l e T e | F l e T F | F l e T a | F l e T l | F l e T s | F l e T e | F l e r T | F l e r r | F l e r u | F l e r e | F l e r F | F l e r a | F l e r l | F l e r s | F l e r e | F l e u T | F l e u r | F l e u u | F l e u e | F l e u F | F l e u a | F l e u l | F l e u s | F l e u e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l e F T | F l e F r | F l e F u | F l e F e | F l e F F | F l e F a | F l e F l | F l e F s | F l e F e | F l e a T | F l e a r | F l e a u | F l e a e | F l e a F | F l e a a | F l e a l | F l e a s | F l e a e | F l e l T | F l e l r | F l e l u | F l e l e | F l e l F | F l e l a | F l e l l | F l e l s | F l e l e | F l e s T | F l e s r | F l e s u | F l e s e | F l e s F | F l e s a | F l e s l | F l e s s | F l e s e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F s T T T | F s T T r | F s T T u | F s T T e | F s T T F | F s T T a | F s T T l | F s T T s | F s T T e | F s T r T | F s T r r | F s T r u | F s T r e | F s T r F | F s T r a | F s T r l | F s T r s | F s T r e | F s T u T | F s T u r | F s T u u | F s T u e | F s T u F | F s T u a | F s T u l | F s T u s | F s T u e | F s T e T | F s T e r | F s T e u | F s T e e | F s T e F | F s T e a | F s T e l | F s T e s | F s T e e | F s T F T | F s T F r | F s T F u | F s T F e | F s T F F | F s T F a | F s T F l | F s T F s | F s T F e | F s T a T | F s T a r | F s T a u | F s T a e | F s T a F | F s T a a | F s T a l | F s T a s | F s T a e | F s T l T | F s T l r | F s T l u | F s T l e | F s T l F | F s T l a | F s T l l | F s T l s | F s T l e | F s T s T | F s T s r | F s T s u | F s T s e | F s T s F | F s T s a | F s T s l | F s T s s | F s T s e | F s T e T | F s T e r | F s T e u | F s T e e | F s T e F | F s T e a | F s T e l | F s T e s | F s T e e | F s r T T | F s r T r | F s r T u | F s r T e | F s r T F | F s r T a | F s r T l | F s r T s | F s r T e | F s r r T | F s r r r | F s r r u | F s r r e | F s r r F | F s r r a | F s r r l | F s r r s | F s r r e | F s r u T | F s r u r | F s r u u | F s r u e | F s r u F | F s r u a | F s r u l | F s r u s | F s r u e | F s r e T | F s r e r | F s r e u | F s r e e | F s r e F | F s r e a | F s r e l | F s r e s | F s r e e | F s r F T | F s r F r | F s r F u | F s r F e | F s r F F | F s r F a | F s r F l | F s r F s | F s r F e | F s r a T | F s r a r | F s r a u | F s r a e | F s r a F | F s r a a | F s r a l | F s r a s | F s r a e | F s r l T | F s r l r | F s r l u | F s r l e | F s r l F | F s r l a | F s r l l | F s r l s | F s r l e | F s r s T | F s r s r | F s r s u | F s r s e | F s r s F | F s r s a | F s r s l | F s r s s | F s r s e | F s r e T | F s r e r | F s r e u | F s r e e | F s r e F | F s r e a | F s r e l | F s r e s | F s r e e | F s u T T | F s u T r | F s u T u | F s u T e | F s u T F | F s u T a | F s u T l | F s u T s | F s u T e | F s u r T | F s u r r | F s u r u | F s u r e | F s u r F | F s u r a | F s u r l | F s u r s | F s u r e | F s u u T | F s u u r | F s u u u | F s u u e | F s u u F | F s u u a | F s u u l | F s u u s | F s u u e | F s u e T | F s u e r | F s u e u | F s u e e | F s u e F | F s u e a | F s u e l | F s u e s | F s u e e | F s u F T | F s u F r | F s u F u | F s u F e | F s u F F | F s u F a | F s u F l | F s u F s | F s u F e | F s u a T | F s u a r | F s u a u | F s u a e | F s u a F | F s u a a | F s u a l | F s u a s | F s u a e | F s u l T | F s u l r | F s u l u | F s u l e | F s u l F | F s u l a | F s u l l | F s u l s | F s u l e | F s u s T | F s u s r | F s u s u | F s u s e | F s u s F | F s u s a | F s u s l | F s u s s | F s u s e | F s u e T | F s u e r | F s u e u | F s u e e | F s u e F | F s u e a | F s u e l | F s u e s | F s u e e | F s e T T | F s e T r | F s e T u | F s e T e | F s e T F | F s e T a | F s e T l | F s e T s | F s e T e | F s e r T | F s e r r | F s e r u | F s e r e | F s e r F | F s e r a | F s e r l | F s e r s | F s e r e | F s e u T | F s e u r | F s e u u | F s e u e | F s e u F | F s e u a | F s e u l | F s e u s | F s e u e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s e F T | F s e F r | F s e F u | F s e F e | F s e F F | F s e F a | F s e F l | F s e F s | F s e F e | F s e a T | F s e a r | F s e a u | F s e a e | F s e a F | F s e a a | F s e a l | F s e a s | F s e a e | F s e l T | F s e l r | F s e l u | F s e l e | F s e l F | F s e l a | F s e l l | F s e l s | F s e l e | F s e s T | F s e s r | F s e s u | F s e s e | F s e s F | F s e s a | F s e s l | F s e s s | F s e s e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s F T T | F s F T r | F s F T u | F s F T e | F s F T F | F s F T a | F s F T l | F s F T s | F s F T e | F s F r T | F s F r r | F s F r u | F s F r e | F s F r F | F s F r a | F s F r l | F s F r s | F s F r e | F s F u T | F s F u r | F s F u u | F s F u e | F s F u F | F s F u a | F s F u l | F s F u s | F s F u e | F s F e T | F s F e r | F s F e u | F s F e e | F s F e F | F s F e a | F s F e l | F s F e s | F s F e e | F s F F T | F s F F r | F s F F u | F s F F e | F s F F F | F s F F a | F s F F l | F s F F s | F s F F e | F s F a T | F s F a r | F s F a u | F s F a e | F s F a F | F s F a a | F s F a l | F s F a s | F s F a e | F s F l T | F s F l r | F s F l u | F s F l e | F s F l F | F s F l a | F s F l l | F s F l s | F s F l e | F s F s T | F s F s r | F s F s u | F s F s e | F s F s F | F s F s a | F s F s l | F s F s s | F s F s e | F s F e T | F s F e r | F s F e u | F s F e e | F s F e F | F s F e a | F s F e l | F s F e s | F s F e e | F s a T T | F s a T r | F s a T u | F s a T e | F s a T F | F s a T a | F s a T l | F s a T s | F s a T e | F s a r T | F s a r r | F s a r u | F s a r e | F s a r F | F s a r a | F s a r l | F s a r s | F s a r e | F s a u T | F s a u r | F s a u u | F s a u e | F s a u F | F s a u a | F s a u l | F s a u s | F s a u e | F s a e T | F s a e r | F s a e u | F s a e e | F s a e F | F s a e a | F s a e l | F s a e s | F s a e e | F s a F T | F s a F r | F s a F u | F s a F e | F s a F F | F s a F a | F s a F l | F s a F s | F s a F e | F s a a T | F s a a r | F s a a u | F s a a e | F s a a F | F s a a a | F s a a l | F s a a s | F s a a e | F s a l T | F s a l r | F s a l u | F s a l e | F s a l F | F s a l a | F s a l l | F s a l s | F s a l e | F s a s T | F s a s r | F s a s u | F s a s e | F s a s F | F s a s a | F s a s l | F s a s s | F s a s e | F s a e T | F s a e r | F s a e u | F s a e e | F s a e F | F s a e a | F s a e l | F s a e s | F s a e e | F s l T T | F s l T r | F s l T u | F s l T e | F s l T F | F s l T a | F s l T l | F s l T s | F s l T e | F s l r T | F s l r r | F s l r u | F s l r e | F s l r F | F s l r a | F s l r l | F s l r s | F s l r e | F s l u T | F s l u r | F s l u u | F s l u e | F s l u F | F s l u a | F s l u l | F s l u s | F s l u e | F s l e T | F s l e r | F s l e u | F s l e e | F s l e F | F s l e a | F s l e l | F s l e s | F s l e e | F s l F T | F s l F r | F s l F u | F s l F e | F s l F F | F s l F a | F s l F l | F s l F s | F s l F e | F s l a T | F s l a r | F s l a u | F s l a e | F s l a F | F s l a a | F s l a l | F s l a s | F s l a e | F s l l T | F s l l r | F s l l u | F s l l e | F s l l F | F s l l a | F s l l l | F s l l s | F s l l e | F s l s T | F s l s r | F s l s u | F s l s e | F s l s F | F s l s a | F s l s l | F s l s s | F s l s e | F s l e T | F s l e r | F s l e u | F s l e e | F s l e F | F s l e a | F s l e l | F s l e s | F s l e e | F s s T T | F s s T r | F s s T u | F s s T e | F s s T F | F s s T a | F s s T l | F s s T s | F s s T e | F s s r T | F s s r r | F s s r u | F s s r e | F s s r F | F s s r a | F s s r l | F s s r s | F s s r e | F s s u T | F s s u r | F s s u u | F s s u e | F s s u F | F s s u a | F s s u l | F s s u s | F s s u e | F s s e T | F s s e r | F s s e u | F s s e e | F s s e F | F s s e a | F s s e l | F s s e s | F s s e e | F s s F T | F s s F r | F s s F u | F s s F e | F s s F F | F s s F a | F s s F l | F s s F s | F s s F e | F s s a T | F s s a r | F s s a u | F s s a e | F s s a F | F s s a a | F s s a l | F s s a s | F s s a e | F s s l T | F s s l r | F s s l u | F s s l e | F s s l F | F s s l a | F s s l l | F s s l s | F s s l e | F s s s T | F s s s r | F s s s u | F s s s e | F s s s F | F s s s a | F s s s l | F s s s s | F s s s e | F s s e T | F s s e r | F s s e u | F s s e e | F s s e F | F s s e a | F s s e l | F s s e s | F s s e e | F s e T T | F s e T r | F s e T u | F s e T e | F s e T F | F s e T a | F s e T l | F s e T s | F s e T e | F s e r T | F s e r r | F s e r u | F s e r e | F s e r F | F s e r a | F s e r l | F s e r s | F s e r e | F s e u T | F s e u r | F s e u u | F s e u e | F s e u F | F s e u a | F s e u l | F s e u s | F s e u e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s e F T | F s e F r | F s e F u | F s e F e | F s e F F | F s e F a | F s e F l | F s e F s | F s e F e | F s e a T | F s e a r | F s e a u | F s e a e | F s e a F | F s e a a | F s e a l | F s e a s | F s e a e | F s e l T | F s e l r | F s e l u | F s e l e | F s e l F | F s e l a | F s e l l | F s e l s | F s e l e | F s e s T | F s e s r | F s e s u | F s e s e | F s e s F | F s e s a | F s e s l | F s e s s | F s e s e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F e T T T | F e T T r | F e T T u | F e T T e | F e T T F | F e T T a | F e T T l | F e T T s | F e T T e | F e T r T | F e T r r | F e T r u | F e T r e | F e T r F | F e T r a | F e T r l | F e T r s | F e T r e | F e T u T | F e T u r | F e T u u | F e T u e | F e T u F | F e T u a | F e T u l | F e T u s | F e T u e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e T F T | F e T F r | F e T F u | F e T F e | F e T F F | F e T F a | F e T F l | F e T F s | F e T F e | F e T a T | F e T a r | F e T a u | F e T a e | F e T a F | F e T a a | F e T a l | F e T a s | F e T a e | F e T l T | F e T l r | F e T l u | F e T l e | F e T l F | F e T l a | F e T l l | F e T l s | F e T l e | F e T s T | F e T s r | F e T s u | F e T s e | F e T s F | F e T s a | F e T s l | F e T s s | F e T s e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e r T T | F e r T r | F e r T u | F e r T e | F e r T F | F e r T a | F e r T l | F e r T s | F e r T e | F e r r T | F e r r r | F e r r u | F e r r e | F e r r F | F e r r a | F e r r l | F e r r s | F e r r e | F e r u T | F e r u r | F e r u u | F e r u e | F e r u F | F e r u a | F e r u l | F e r u s | F e r u e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e r F T | F e r F r | F e r F u | F e r F e | F e r F F | F e r F a | F e r F l | F e r F s | F e r F e | F e r a T | F e r a r | F e r a u | F e r a e | F e r a F | F e r a a | F e r a l | F e r a s | F e r a e | F e r l T | F e r l r | F e r l u | F e r l e | F e r l F | F e r l a | F e r l l | F e r l s | F e r l e | F e r s T | F e r s r | F e r s u | F e r s e | F e r s F | F e r s a | F e r s l | F e r s s | F e r s e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e u T T | F e u T r | F e u T u | F e u T e | F e u T F | F e u T a | F e u T l | F e u T s | F e u T e | F e u r T | F e u r r | F e u r u | F e u r e | F e u r F | F e u r a | F e u r l | F e u r s | F e u r e | F e u u T | F e u u r | F e u u u | F e u u e | F e u u F | F e u u a | F e u u l | F e u u s | F e u u e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e u F T | F e u F r | F e u F u | F e u F e | F e u F F | F e u F a | F e u F l | F e u F s | F e u F e | F e u a T | F e u a r | F e u a u | F e u a e | F e u a F | F e u a a | F e u a l | F e u a s | F e u a e | F e u l T | F e u l r | F e u l u | F e u l e | F e u l F | F e u l a | F e u l l | F e u l s | F e u l e | F e u s T | F e u s r | F e u s u | F e u s e | F e u s F | F e u s a | F e u s l | F e u s s | F e u s e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e F T T | F e F T r | F e F T u | F e F T e | F e F T F | F e F T a | F e F T l | F e F T s | F e F T e | F e F r T | F e F r r | F e F r u | F e F r e | F e F r F | F e F r a | F e F r l | F e F r s | F e F r e | F e F u T | F e F u r | F e F u u | F e F u e | F e F u F | F e F u a | F e F u l | F e F u s | F e F u e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e F F T | F e F F r | F e F F u | F e F F e | F e F F F | F e F F a | F e F F l | F e F F s | F e F F e | F e F a T | F e F a r | F e F a u | F e F a e | F e F a F | F e F a a | F e F a l | F e F a s | F e F a e | F e F l T | F e F l r | F e F l u | F e F l e | F e F l F | F e F l a | F e F l l | F e F l s | F e F l e | F e F s T | F e F s r | F e F s u | F e F s e | F e F s F | F e F s a | F e F s l | F e F s s | F e F s e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e a T T | F e a T r | F e a T u | F e a T e | F e a T F | F e a T a | F e a T l | F e a T s | F e a T e | F e a r T | F e a r r | F e a r u | F e a r e | F e a r F | F e a r a | F e a r l | F e a r s | F e a r e | F e a u T | F e a u r | F e a u u | F e a u e | F e a u F | F e a u a | F e a u l | F e a u s | F e a u e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e a F T | F e a F r | F e a F u | F e a F e | F e a F F | F e a F a | F e a F l | F e a F s | F e a F e | F e a a T | F e a a r | F e a a u | F e a a e | F e a a F | F e a a a | F e a a l | F e a a s | F e a a e | F e a l T | F e a l r | F e a l u | F e a l e | F e a l F | F e a l a | F e a l l | F e a l s | F e a l e | F e a s T | F e a s r | F e a s u | F e a s e | F e a s F | F e a s a | F e a s l | F e a s s | F e a s e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e l T T | F e l T r | F e l T u | F e l T e | F e l T F | F e l T a | F e l T l | F e l T s | F e l T e | F e l r T | F e l r r | F e l r u | F e l r e | F e l r F | F e l r a | F e l r l | F e l r s | F e l r e | F e l u T | F e l u r | F e l u u | F e l u e | F e l u F | F e l u a | F e l u l | F e l u s | F e l u e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e l F T | F e l F r | F e l F u | F e l F e | F e l F F | F e l F a | F e l F l | F e l F s | F e l F e | F e l a T | F e l a r | F e l a u | F e l a e | F e l a F | F e l a a | F e l a l | F e l a s | F e l a e | F e l l T | F e l l r | F e l l u | F e l l e | F e l l F | F e l l a | F e l l l | F e l l s | F e l l e | F e l s T | F e l s r | F e l s u | F e l s e | F e l s F | F e l s a | F e l s l | F e l s s | F e l s e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e s T T | F e s T r | F e s T u | F e s T e | F e s T F | F e s T a | F e s T l | F e s T s | F e s T e | F e s r T | F e s r r | F e s r u | F e s r e | F e s r F | F e s r a | F e s r l | F e s r s | F e s r e | F e s u T | F e s u r | F e s u u | F e s u e | F e s u F | F e s u a | F e s u l | F e s u s | F e s u e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e s F T | F e s F r | F e s F u | F e s F e | F e s F F | F e s F a | F e s F l | F e s F s | F e s F e | F e s a T | F e s a r | F e s a u | F e s a e | F e s a F | F e s a a | F e s a l | F e s a s | F e s a e | F e s l T | F e s l r | F e s l u | F e s l e | F e s l F | F e s l a | F e s l l | F e s l s | F e s l e | F e s s T | F e s s r | F e s s u | F e s s e | F e s s F | F e s s a | F e s s l | F e s s s | F e s s e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/03/07/Algorithm_Hacks.html",
            "relUrl": "/2023/03/07/Algorithm_Hacks.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post51": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-original.jpg&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;odd_smile.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-original.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-original.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano-original.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | . . Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . from PIL import Image im = Image.open(r&quot;/home/etran/vscode/fastpages_EthanT/_notebooks/images/odd_smile.png&quot;) image = im.show() . Error: no &#34;view&#34; mailcap rules found for type &#34;image/png&#34; Error: no &#34;view&#34; mailcap rules found for type &#34;image/png&#34; Error: no &#34;view&#34; mailcap rules found for type &#34;image/png&#34; WARNING: You don&#39;t seem to have any mimeinfo.cache files. Try running the update-desktop-database command. If you don&#39;t have this command you should install the desktop-file-utils package. This package is available from http://freedesktop.org/wiki/Software/desktop-file-utils/ WARNING: You don&#39;t seem to have any mimeinfo.cache files. Try running the update-desktop-database command. If you don&#39;t have this command you should install the desktop-file-utils package. This package is available from http://freedesktop.org/wiki/Software/desktop-file-utils/ WARNING: You don&#39;t seem to have any mimeinfo.cache files. Try running the update-desktop-database command. If you don&#39;t have this command you should install the desktop-file-utils package. This package is available from http://freedesktop.org/wiki/Software/desktop-file-utils/ Can&#39;t call method &#34;get_value&#34; on an undefined value at /usr/bin/mimeopen line 159. Can&#39;t call method &#34;get_value&#34; on an undefined value at /usr/bin/mimeopen line 159. Can&#39;t call method &#34;get_value&#34; on an undefined value at /usr/bin/mimeopen line 159. Start : This command cannot be run due to the error: The system cannot find the file specified. At line:1 char:1 + Start &#34;/tmp/tmptlplkvfr.PNG&#34; + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : InvalidOperation: (:) [Start-Process], InvalidOperationException + FullyQualifiedErrorId : InvalidOperationException,Microsoft.PowerShell.Commands.StartProcessCommand Start : This command cannot be run due to the error: The system cannot find the file specified. Start : This command cannot be run due to the error: The system cannot find the file specified. At line:1 char:1 + Start &#34;/tmp/tmpo752xg96.PNG&#34; At line:1 char:1 + Start &#34;/tmp/tmpnfzyd7z0.PNG&#34; + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : InvalidOperation: (:) [Start-Process], InvalidOperationException + FullyQualifiedErrorId : InvalidOperationException,Microsoft.PowerShell.Commands.StartProcessCommand + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : InvalidOperation: (:) [Start-Process], InvalidOperationException + FullyQualifiedErrorId : InvalidOperationException,Microsoft.PowerShell.Commands.StartProcessCommand .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post52": {
            "title": "Binary Calculator",
            "content": "&lt;html&gt; &lt;head&gt; &lt;title&gt;Binary Calculator&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Binary Calculator&lt;/h1&gt; &lt;form&gt; &lt;input type=&quot;text&quot; id=&quot;first-number&quot; placeholder=&quot;First Number&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;second-number&quot; placeholder=&quot;Second Number&quot;&gt; &lt;button type=&quot;button&quot; id=&quot;add-button&quot;&gt;+&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;subtract-button&quot;&gt;-&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;multiply-button&quot;&gt;*&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;divide-button&quot;&gt;/&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;modulo-button&quot;&gt;%&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;clear-button&quot;&gt;Clear&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;/form&gt; &lt;script&gt; function binaryToDecimal(binary) { var decimal = 0; var power = 0; for (var i = binary.length - 1; i &gt;= 0; i--) { decimal += binary[i] * Math.pow(2, power); power++; } return decimal; } function decimalToBinary(decimal) { var binary = &quot;&quot;; while (decimal &gt; 0) { binary = decimal % 2 + binary; decimal = Math.floor(decimal / 2); } return binary; } function add(a, b) { return a + b; } function subtract(a, b) { return a - b; } function multiply(a, b) { return a * b; } function divide(a, b) { return a / b; } function modulo(a, b) { return a % b; } function calculate(a, b, operation) { var decimalA = binaryToDecimal(a); var decimalB = binaryToDecimal(b); var decimalResult = operation(decimalA, decimalB); var binaryResult = decimalToBinary(decimalResult); return binaryResult; } var firstNumber = document.getElementById(&quot;first-number&quot;); var secondNumber = document.getElementById(&quot;second-number&quot;); var addButton = document.getElementById(&quot;add-button&quot;); var subtractButton = document.getElementById(&quot;subtract-button&quot;); var moduloButton = document.getElementById(&quot;modulo-button&quot;); var clearButton = document.getElementById(&quot;clear-button&quot;); var result = document.getElementById(&quot;result&quot;); addButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, add); }); subtractButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, subtract); }); multiplyButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, multiply); }); divideButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, divide); }); moduloButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, modulo); }); clearButton.addEventListener(&quot;click&quot;, function() { firstNumber.value = &quot;&quot;; secondNumber.value = &quot;&quot;; result.innerHTML = &quot;&quot;; }); &lt;/script&gt; &lt;/body&gt; &lt;/html var multiplyButton = document.getElementById(&quot;multiply-button&quot;); var divideButton = document.getElementById(&quot;divide-button&quot;); var moduloButton = document.getElementById(&quot;modulo-button&quot;); var clearButton = document.getElementById(&quot;clear-button&quot;); var result = document.getElementById(&quot;result&quot;); addButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, add); }); subtractButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, subtract); }); multiplyButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, multiply); }); divideButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, divide); }); moduloButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, modulo); }); clearButton.addEventListener(&quot;click&quot;, function() { firstNumber.value = &quot;&quot;; secondNumber.value = &quot;&quot;; result.innerHTML = &quot;&quot;; }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . File &lt;tokenize&gt;:112 &lt;/script&gt; ^ IndentationError: unindent does not match any outer indentation level .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/binary/calculator/2023/03/07/.binarycalc.html",
            "relUrl": "/binary/calculator/2023/03/07/.binarycalc.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post53": {
            "title": "5.5 & 5.6 Hacks",
            "content": "Unit 5.5 Blog Notes . When you create a GitHub repository it requests a license type. | There were many lawyers who made a profession out of patents | Qualcomm desires compensation for derivative work and requires a royalty payment for the use of ideas and patents. | Utilizing software under the GPL license could forfeit your ability to charge for the software and related patents. | The GPL open source license mandates that any work derived from the original must be free and the code must be shared. | The cost of using software under the GPL license might be greater than anticipated due to the loss of rights to charge for the software and patents. | Open source licenses such as the GPL have specific guidelines for sharing and distributing works derived from the original. | Companies like Qualcomm aim to be reimbursed for the usage of their patents and ideas, even within the realm of open source software. | . Creative Commons Zero v1.0 Universal . The Creative Commons CC0 Public Domain Dedication relinquishes any copyright claims on a work that you have created and opens it up for the use of the global public. | . Open Source MIT License . The MIT License enables the free use of code and the creation and distribution of proprietary versions. Generally, the author of software under the MIT License desires acknowledgment, which may be as basic as including their name in comments. A proprietary project can be kept private on GitHub. | . Unit 5.6 Blog Notes . Personal Identifiable Information (PII) is information that can be used to identify a person. | PII can be easily obtained through social media, online searches, and other online activities. | Be cautious of the information you share online, as it can be easily accessed by others. | Keep sensitive information such as financial credentials, two-factor authentication codes, and social security numbers private. | Multi-factor authentication and biometrics can increase the security of your systems. | Symmetric and Asymmetric Encryption can also enhance the security of your systems. | Phishing and malware are potential threats that can compromise the security of your PII. | It is important to regularly review your PII vulnerabilities and take steps to protect your information. | . Units 5.5 &amp; 5.6 Reflections . 1) Personal Identifiable Information (PII) is information that can be used to identify a specific individual, such as their name, social security number, date of birth, address, or phone number. In the context of computer science, PII is often collected and stored by websites, applications, and organizations. In a project I have seen, PII was collected from users during the registration process and was used to personalize their experience on the website. . 2) The exposure of PII can have serious consequences for individuals, such as identity theft, financial fraud, and privacy violations. It is important for organizations to properly secure and manage PII to prevent these types of incidents from occurring. Good passwords are typically long, complex, and random, making them difficult to guess or crack. On the other hand, bad passwords are short, easily guessable, or commonly used. Another step that can be used to assist in authentication is two-factor authentication (2FA), which adds an extra layer of security by requiring something you know (such as a password) and something you have (such as a smartphone) to access an account. . 3) Symmetric encryption is a method of encryption where the same key is used for both encryption and decryption. This means that both the sender and recipient of the encrypted message must have access to the same key in order to communicate securely. On the other hand, asymmetric encryption uses two different keys: one for encryption and one for decryption. This allows for secure communication between two parties without having to exchange the key beforehand. . 4) One example of encryption used in AWS deployment is the use of Secure Sockets Layer (SSL) certificates, which encrypt communication between a user&#39;s browser and a website to prevent eavesdropping and tampering. . 5) Personally, I have not fallen for any phishing schemes up till this point. A phishing scheme I have learned about is one where an attacker sends an email that appears to be from a trusted source, such as a bank or an online retailer, and asks the recipient to click on a link or provide sensitive information. Another common phishing technique is to create a fake login page that resembles a legitimate website, in an attempt to trick the user into entering their username and password. Finally, malicious attachments can also be used as a phishing scheme. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cb/5.5/5.6/hacks/2023/03/07/.5-5.6-hacks.html",
            "relUrl": "/cb/5.5/5.6/hacks/2023/03/07/.5-5.6-hacks.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post54": {
            "title": "5.3 & 5.4 Hacks",
            "content": "Unit 5.3 . What age groups use Facebook vs TikTok . TikTok 60 percent of US users are aged between 16-24 | 23.7 percent of Facebook users in the US are aged between 25 and 34 years of age | . Why do virtual assistants have female voices? Amazon, Alexa, Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . Female voices can be seen as being soothing or calming, attributing to overall customer satisfaction | Yes, this was likely purposeful and is harmful, because it attributes a wide demographic of tech users to associate personal assistants as being a woman’s job or role:this reinforces sexism . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) . | Applications such as Netflix, Amazon, and Facebook use algorithms to display posts or items that they believe you would want to see . | These algorithms use data collected from your account | This can fortify biased information | . HP Computers are Racist . The HP computer not being able to pick up the face of people with darker skin is harmful, as it can infer that the computer believes that those with darker skin are not human - due to the fact that the program is supposed to recognize human faces. | This issue should absolutely be corrected | The creator of the video believes that HP computers are racist! They recognize the face of his white friend, Wanda, but not his. | . Hacks . Write summary/thoughts/conclusions from each of the exercises above. Focus on avoiding Bias in algorithms or code you write. . Regarding the use of social media, it was found that TikTok has a high proportion of US users aged 16-24, while Facebook has a higher percentage of users aged 25-34. With regards to virtual assistants having female voices, it was determined that this was likely a purposeful decision by companies like Amazon, Alexa, Google, and Apple Siri, as female voices are perceived to be soothing and calming. However, this decision reinforces sexism and associates personal assistants as being a female role, which is harmful. The use of algorithms by companies such as Netflix, Amazon, and Facebook can reinforce biased information, as these algorithms use data collected from the user&#39;s account to display content that they believe the user would like to see. Finally, the issue of an HP computer not being able to recognize the faces of people with darker skin was deemed harmful and should be corrected, as this implies that the computer does not view them as human. In conclusion, the use of algorithms and AI systems in today&#39;s technology has a significant impact on how people are perceived and treated. To ensure that technology is developed and used in an ethical and unbiased manner, it is essential to consider the potential consequences and impact of the decisions made during the development process. This includes being mindful of the biases that may exist in the data sets used to train algorithms and the potential impact of these biases on the users. . Unit 5.4 . Crowdsourcing . Crowdsourcing helps to reduce computer bias by reaching outside the bounds of a given community | Wikipedia relies on crowdsourced information | Although it may contain inaccuracies, these are often corrected by the self-regulated community, leading many to view it as a more trustworthy source than official information. | Cryptocurrency and its underlying blockchain technology ensure the security of financial transactions through validation by three independent miners. In the event of an error, the process is rechecked. | This crowdsourced innovation has prompted rethinking of currency by governments, and blockchain algorithms are being explored for securing sensitive data, such as medical records. | COVID data provides insights into areas that are effectively addressing the pandemic and those that are not. This information has a significant impact on decisions such as attending public events, traveling by plane, and wearing masks. The community of data analysts and researchers will drive new approaches to analyzing and utilizing data that affects our lives. | . Hacks . Think of a use case for crowdsourcing in your project … CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? What kind of data could you capture at N@tM to make the evening interesting? Perhaps use this data to impress Teachers during finals week. . At N@TM, we can conduct a survey to determine how many students have trouble with finding suitable cars that meet their criteria. Our project purpose is to help ease the car searching process, especially for students such as ourselves - so this form of crowdsourcing can be very helpful to bettering our overall project and website. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cb/5.3/5.4/hacks/2023/03/07/.3-5.4-hacks.html",
            "relUrl": "/cb/5.3/5.4/hacks/2023/03/07/.3-5.4-hacks.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post55": {
            "title": "5.1 & 5.2 Blog",
            "content": "Notes . Chat GPT was sponsored by Microsoft and now has 10 billion dollars since they think it&#39;s the google killer. The GPT saves from the secondary clicking, don’t know the source (cite sources). Good because you can answer right away. | Computer bias: Are we inserting our own bias into our programs? Can an AI be biased? Ex. HP facial scan bias based on skintones | Digital Divide: There is division between social classes and access to technology | . 5.1 Blog Post Reflection . Three Benefits of computing: | . 1) Increased productivity and efficiency through automation of tasks. . 2) Enhanced scientific research and discovery through data analysis and simulation. . 3) Improved communication and access to information through the internet. . Three Harmful Effects of computing: | . 1) Increased dependence on technology and potential for digital addiction. . 2) Decreased privacy and security due to the collection and storage of personal information. . 3) Job loss and unemployment due to automation of certain tasks. . The effects of Dopamine: | Personally, I believe that video games can be quite addicting for some people. However, I believe that the dependency on video games and affect that they have on an individual&#39;s livelihood depend on the individual themself. If a person holds themself accountable for their hours online, then I think that there are no issues and that the impacts on studying can be eliminated. | . 5.2 Blog Post Reflection . 1) In the digital world, one can empower themselves by preventing cyber bullying and by developing skills to protect their privacy online. To add, they can also seek out various different perspectives and opinions online to help broaden their understanding of the real and digital world. . 2) One who is digitally empowered can use their knowledge to teach others. At Del Norte, students can help each other understand technology better and have discussions regarding online privacy and safety. . 3) At times, paper or red tape can prevent digital empowerment. This is because they do not support the use of technology. At Del Norte, I do not believe that such barriers are common as most classes have options to take digital notes and many assignments are performed/completed via a device such as a computer or laptop. In other parts of the world, even in San Diego County, there are schools in which not all of the students can afford to own their own devices. This prevents digital empowerment and is known as digital divide. . Three beneficial effects of your projects based on Unit 5.1 . 1) Easy access to information on a variety of cars . 2) Helps users find a car that fits their needs . 3) Introduces users to a variety of cars they may not have known about, ie. diesel, electric, etc.&#39; . Three harmful effects . 1) The promotion of pollution-inducing vehicles . 2) If consumers become overly reliant on the information provided by the website, they may neglect to conduct their own research or seek additional input from other sources, potentially leading to poor decision making. . 3) Our website may reduce the need for a car salesperson to provide information on a given vehicle. This can have an effect on that line of work - affecting those who have that job. . Pros/Cons of internet blockers at routers and lack of admin passwords on lab machines at school . Pros: | . 1) Increased control and management over internet access, allowing for a safer and more productive environment. . 2) Reduction in distractions and improved focus on academic tasks. . 3) Improved security by limiting the potential for unauthorized changes or installations on the system. . Cons: | . 1) Difficulty for students to access personal accounts or online tools needed for their education. . 2) Difficulty in installing necessary software or tools for specific classes or projects. . 3) Difficulty for students to access personal accounts or online tools needed for their education. . My concerns regarding digital divide . Inequality in access to education and job opportunities, as those without access to technology may have limited resources and information. | Reduced innovation and economic growth in certain communities, as those without access to technology may not have the means to contribute to or benefit from the technological advancements of society. | Worsening of socio-economic differences, as those without access to technology may face even greater challenges in areas such as finance, healthcare, and government services. | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cb/5.1/5.2/2023/03/07/.1-5.1.html",
            "relUrl": "/cb/5.1/5.2/2023/03/07/.1-5.1.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post56": {
            "title": "Completed Code for the lesson",
            "content": "import random # Define a list of items on the wheel wheel_items = [&quot;Prize 1&quot;, &quot;Prize 2&quot;, &quot;Prize 3&quot;, &quot;Prize 4&quot;, &quot;Prize 5&quot;] # Define a function to spin the wheel def spin_wheel(): # Choose a random item from the wheel_items list spin_result = random.choice(wheel_items) return spin_result # Call the spin_wheel function to spin the wheel result = spin_wheel() # Print the result print(&quot;You spun the wheel and landed on:&quot;, result) . You spun the wheel and landed on: Prize 2 . Explanation of the code . My code is a simple Python program that simulates a spinning wheel game. Here&#39;s what it does: It imports the &quot;random&quot; module, which contains functions for generating random numbers and random selections from a list. It defines a list called &quot;wheel_items&quot; that contains five items (prizes) that can be won on the spinning wheel. It then defines a function called &quot;spin_wheel()&quot; that chooses a random item from the &quot;wheel_items&quot; list using the &quot;random.choice()&quot; function and returns it. Finally, the program calls the &quot;spin_wheel()&quot; function and assigns the result to a variable called &quot;result&quot;. It prints the result of the spin to the console. . Implementation . One way that I can implement this code into my group&#39;s lesson it to allow students to visualize the data structure used in this code is to by creating a visual version of this code. This version can utilize something such as a a pie chart that represents the probabilities of landing on each prize. The size of each slice of the pie would be proportional to the probability of landing on that prize. . For example, if we assume that the spinning wheel is equally likely to land on each prize, then each slice of the pie would be the same size (1/5 or 20% of the total area). We could use a library like Matplotlib to create a pie chart of the probabilities, and then display the chart to students to help them understand how the data is structured and how it relates to the code. . Additionally, we could use this code as an example to teach iteration in Python. For example, we could modify the code to simulate spinning the wheel multiple times and keeping track of the results. We could use a loop to repeat the spin process a certain number of times, and then create a histogram or bar chart of the results to show the frequency of each prize. This would help students understand how iteration can be used to process large amounts of data and visualize the results. . import random def flip_coin(): result = random.choice([&#39;Heads&#39;, &#39;Tails&#39;]) return result # Example usage print(flip_coin()) # Output: Heads or Tails . Tails . Explanation of the code . This code defines a function called flip_coin() that uses the random.choice() method to randomly select either &quot;Heads&quot; or &quot;Tails&quot;. The function returns the result of the coin flip. The program then calls the flip_coin() function to get a random result. Note that since this is a random process, the result of the coin flip will be different each time you run the code. . Implementation . The code for flipping a coin can be a great addition to our lesson on using lists and dictionaries in Python. One way to use this code is to demonstrate how a list can be used to store the results of multiple coin flips. For example, we can modify the flip_coin() function to return the result of the coin flip as well as store it in a list. Additionally, we can use a dictionary to keep track of the number of times each side of the coin appears in the list. This provides an opportunity to teach students how to manipulate lists and dictionaries, as well as how to use basic Python functions like append() and get(). Furthermore, this code can be used to demonstrate how to use loops and conditionals to perform multiple coin flips and to analyze the results. Overall, the code for flipping a coin can be a fun and engaging way to teach the fundamentals of lists and dictionaries in Python. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/lesson/2023/03/06/simulation-lesson.html",
            "relUrl": "/lesson/2023/03/06/simulation-lesson.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post57": {
            "title": "MCQ Test 3",
            "content": "My Thoughts... . Overall, I believe that I did pretty well on this MCQ. I got 4 questions wrong, and decided to go back and check the answers. This allowed me to rework each of them to understand where I may have messed up in my thinking while taking the MCQ. . This option is incorrect because in Grid II, the robot lands in the square in the middle of the grid facing right. It cannot turn right, but it can turn left. It moves forward up to the middle square of the top row, at which point it is facing up. At this point, it turns right and moves forward to the square in the upper right corner of the grid. At this point, the robot cannot move right, it cannot move left, and it cannot move forward. It thus stays in the REPEAT UNTIL loop forever, since Goal_Reached is never true. . This option is correct. In Grid I, the robot moves forward to the end of the bottom row, turns right twice, moves forward twice, turns right twice, moves forward until the end of the middle row, turns left twice, moves forward twice, turns left twice, and moves forward until Goal_Reached is true. . Incorrect, as the fourth statement assigns the value false to a. The fifth statement assigns the value false to c. . Correct. The first three statements assign values to the variables. The fourth statement assigns the value of (NOT (a OR b)) AND c to a. Since a OR b is true, NOT (a OR b) is false, so (NOT (a OR b)) AND c is false. The fifth statement assigns the value of c AND a to c. Since a is now false, c AND a is false. The last three statements display the values of the variables. . This algorithm will turn on the motor in some cases when the gate is already open, thus, this option is not correct. . Correct. The algorithm continues past the first check if the time is during business hours, the algorithm continues past the second check if the gate sensor is activated, and the algorithm continues past the third check if the gate is not open. Performing the checks in this order will ensure that the gate is opened only under the appropriate conditions. . Incorrect. This code segment leaves the robot four rows above its starting position and two rows above the gray square. . Correct. The loop that repeats four times returns the robot to its starting position. The three lines of code that follow the loop move the robot one row up and leave it facing right. When this has been repeated twice, the robot is in the gray square. . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/finals/trimester%202/collegeboard/2023/03/06/mcq-three.html",
            "relUrl": "/finals/trimester%202/collegeboard/2023/03/06/mcq-three.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post58": {
            "title": "Night at the Museum Trimester 2",
            "content": "My Experience . This trimester&#39;s Night at the Museum was amazing! There were many amazing sites I was able to view, along with other pieces of art from the various other exhibitions at the event. It was gratifying to present my feature and to show my team&#39;s project off to visitors. During the event, we were able to allow people to actually test out our website and describe the behind the scenes &quot;magic,&quot; which was our frontend to backend communication for various features ie. my car search and Taiyo&#39;s comments. . Presentation Photos . These are some images/highlights of the night when I was presenting our project . . Presentation to the teacher . Here is an image of when I was presenting to Mr. Mortensen at Night at the Museum . . Other CSP Groups . Here are two photos of groups that I thought had really fascinating projects - one used an API to display information on various stocks, while the other group featured a website that had many useful tools for students. One of those tools was a notes tracker by Amay Advani. This allowed notes to be saved for specific classes, these notes were then saved into a database in the their group&#39;s backend. . . Notable Fine Arts Pieces . These were some of my favorite art pieces from the event, my favorite would have to be the painting of Ken Block&#39;s &quot;Hoonipigasus&quot; Porsche 911. . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/n@m/final/2023/02/27/night-at-museum.html",
            "relUrl": "/n@m/final/2023/02/27/night-at-museum.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post59": {
            "title": "Cpt Outline",
            "content": "Project CPT Outline . Row My Grade College Board&#39;s Grade Comments . Row 1: Program Purpose and Function (0-1 points) | 1/1 (total) | 0/1 (total) | - [x] input - [x] program functionality - [x] output - The video properly displays the user input and output, along with a functioning program. | . Row 2: No video portion | N/A | N/A | N/A | . Row 3: No video portion | N/A | N/A | N/A | . Row 4: No video portion | N/A | N/A | N/A | . Row 5: No video portion | N/A | N/A | N/A | . Row 6: No video portion | N/A | N/A | N/A | . Written Response . Row My Grade College Board&#39;s Grade Comments . Row 1: Program Purpose and Function (0-1 points) | 1/1 (total) | 0/1 (total) | - [x] describes the overall purpose of the program. - [x] describes what functionality of the program is demonstrated in the video. - [x] describes the input and output of the program demonstrated in the video. | . Row 2: Data Abstraction (0-1 points) | 1/1 | 1/1 | - [x] includes two program code segments: - one that shows how data has been stored in this list (or other collection type). - one that shows the data in this same list being used as part of fulfilling the program’s purpose. - [x] identifies the name of the variable representing the list being used in this response. - [x] describes what the data contained in this list is representing in the program. | . Row 3: Managing Complexity (0-1 points) | 0/1 | 0/1 | - [x] includes a program code segment that shows a list Complexity being used to manage complexity in the program. - [x] explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . Row 4: Procedural Abstraction (0-1 points) | 1/1 | 1/1 | - [x] includes two program code segments: - one showing a student-developed procedure includes two program code segments: with at least one parameter that has an effect on the functionality of the procedure. - one showing where the student-developed procedure is being called - [x] describes what the identified procedure does and how it contributes to the overall functionality of the program. | . Row 5: Algorithm Implentation (0-1 points) | 1/1 | 1/1 | - [x] includes a program code segment of a student-developed algorithm that includes - sequencing - selection - iteration - [x] explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . Row 6: Testing (0-1 points) | 1/1 | 1/1 | - [x] describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. - [x] describes the condition(s) being tested by each call to the procedure. - [x] identifies the result of each call | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/02/27/cpt-outline.html",
            "relUrl": "/2023/02/27/cpt-outline.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post60": {
            "title": "Hacks Unit 3 Sections 9-11",
            "content": "Notes . 1) Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm This may allow for the coding process to be more efficient and effective . 2) Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration Algorithms with selection only go through certain functions if certain things are true or false . 3) Why use algorithms? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . Hacks 3.9.1 . 1) Why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? . It is vital to know that algorithms that appear different are capable of performing the same functions, and that algorithms that look the same may have different results. This is because it allows for creativity when coding, leading to finding new or different ways of solving the same issue(s). | . 2) For the converted conditional to boolean conversion . isSunny = True isRainy = False if isSunny == True: print(&quot;No umbrella necessary!&quot;) else: if isRainy == True: print(&quot;Might want an umbrella!&quot;) else: print(&quot;No umbrella necessary!&quot;) . No umbrella necessary! . isSunny = False isRainy = True # setting variables here (same as above to make comparison easier) puddles = not(isSunny) and isRainy if isRainy == False: print(&quot;Puddles!&quot;) if isSunny == True: print(&quot;No puddles!&quot;) . Hacks 3.9.2 . Develop your own complex algorithm using a flowchart and natural language, then code it! | Requirements: | Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . . 1) Once the code starts, the starting amount of money is set to $10. . 2) The variable, spendMoney, is set to True. . 3) While spendMoney remains true, $1 is deducted from the money variable. . 4) Once the variable, money, reaches a value of 0, spendMoney is set to False and the string, &quot;You&#39;re out of money!&quot; is printed. . 5) End . money = 10 spendMoney = True while(spendMoney == True): money -= 1 if money == 0: spendMoney == False print(&quot;You&#39;re out of money!&quot;) . You&#39;re out of money! . Hacks 3.9.3 . Fix the number guessing game | . 1) Make a flow chart for the algorithm number guessing game . 2) Make a function that gets the user guess . 3) Modify the existing search function to give more encouraging feedback . . import random #sets variables for the game num_guesses = 0 user_guess = -1 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(0,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 0 and 100.&quot;) print(number) #Write a function that gets a guess from the user using input() def guess(): num = input(&quot;Input your guess&quot;) #add something here return num #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;Too low, try again! :)&quot;) #change this lower_bound = guess return lower_bound, upper_bound elif int(guess) &gt; int(number): print(&quot;Too high, try again! :D&quot;) #change this upper_bound = guess return lower_bound, upper_bound else: upper_bound, lower_bound = guess, guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 0 and 100. 92 You guessed 10. Too low, try again! :) Guess a number between 10 and 100. You guessed 99. Too high, try again! :D Guess a number between 10 and 99. You guessed 92. You guessed the number in 3 guesses! . Hacks 3.11 . 1) calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 92, 43, 74, 66, 30, 12, 1 7, 13, 96, 111, 33, 84, 60 . Answer: Below . . 2) Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? Set 1: 80, Set 2: 74, Set 3: 96 . Answer: Set 1: 80, Set 2: 74, Set 3: 96 . . 3) Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . Answer: C . . numListOne = [12,14,44,57,79,80,99] numListTwo = [92,43,74,66,30,12,1] numListThree = [7,13,96,111,33,84,60] numLists = [numListOne, numListTwo, numListThree] for x in range(len(numLists)): numLists[x].sort() middle = int(len(numLists[x])/2) print(&quot;Middle Index of List #&quot;,x+1,&quot;is&quot;,numLists[x][middle]) . Middle Index of List # 1 is 57 Middle Index of List # 2 is 43 Middle Index of List # 3 is 60 .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%203/sections%209-11/notes%20hacks/2023/02/27/Section-9_11_Hacks.html",
            "relUrl": "/unit%203/sections%209-11/notes%20hacks/2023/02/27/Section-9_11_Hacks.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post61": {
            "title": "CPT Write-up Trimester 2",
            "content": "Video . The link to my Video . Write-up . Car Search and Add . 3.a.i. . The purpose of my program is to allow users to add their car builds and search through the cars of others, in order to help people discover new cars and to develop a car community. . 3.a.ii. . The program allows a user to input their car and give it a unique description. Some people may have the same cars or may have multiple of the same car, thus, the descriptions are unique in order to allow people to save their various car builds/configurations. A user can input the make, model, price, year, body style and engine of any car - along with a description and the name of the car’s owner. The addition of cars allows the search feature to shine, as it works as a filter. The search feature iterates through specific criteria such as a specific make, model, body style, or multiple attributes/criteria at the same time. The search creates a table that allows the user to easily view specific cars. . 3.a.iii. . The user inputs a car to add to the database. At first, they add a car that is already in the database (a duplicate), which returns an error message. After, a new car is added and can be viewed in the table. The user also uses different criteria to filter through the database of cars, causing only a specific list of cars to appear on the table. . 3.b.i. . A POST method is used to submit a new car to the database. &quot;Data&quot; is the variable that is used to represent the list of car data later on in the code. . // Add an event listener to the form to submit car data const form = document.getElementById(&#39;carForm&#39;); form.addEventListener(&#39;submit&#39;, async function(event) { event.preventDefault(); // Retrieve the input values from the form const make = document.getElementById(&#39;make&#39;).value; const model = document.getElementById(&#39;model&#39;).value; const price = document.getElementById(&#39;price&#39;).value; const year = document.getElementById(&#39;year&#39;).value; const desc = document.getElementById(&#39;desc&#39;).value; const bodyStyle = document.getElementById(&#39;body_style&#39;).value; const engine = document.getElementById(&#39;engine&#39;).value; const owner = document.getElementById(&#39;owner&#39;).value; try { // Use the Fetch API to submit car data to the server const response = await fetch(&#39;https://cars.nighthawkcodingsociety.com/api/cars/create&#39;, { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, // Use JSON.stringify to convert the input values into a JSON string that can be sent to the server as the request body body: JSON.stringify({ make: make, model: model, price: price, year: year, desc: desc, body_style: bodyStyle, engine: engine, owner: owner }) }); // Check if the response from the server is ok if (!response.ok) { throw new Error(&#39;Network response was not ok&#39;); } // Display a success message to the user alert(&quot;Car has been added successfully!&quot;); } catch (error) { // If an error occurs, log it to the console and display an error message to the user console.error(&#39;Error:&#39;, error); alert(&quot;Please enter all fields or check if the added car is a duplicate.&quot;) } }); . 3.b.ii. . const resultContainer = document.getElementById(&quot;result&quot;); const url = &quot;https://cars.nighthawkcodingsociety.com/api/cars/&quot;; const headers = { method: &#39;GET&#39;, mode: &#39;cors&#39;, cache: &#39;default&#39;, credentials: &#39;omit&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39; }, }; // Fetch data from the database fetch(url, headers) .then(response =&gt; { // If the response is not OK, log the error and display it on the webpage if (response.status != 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = errorMsg; tr.appendChild(td); resultContainer.appendChild(tr); return; } // Parse the json and add it to the webpage response.json().then(data =&gt; { console.log(data); for (const row of data) { // Create new table row and cells for each car attribute const tr = document.createElement(&quot;tr&quot;); const make = document.createElement(&quot;td&quot;); const model = document.createElement(&quot;td&quot;); const year = document.createElement(&quot;td&quot;); const price = document.createElement(&quot;td&quot;); const engine = document.createElement(&quot;td&quot;); const body_style = document.createElement(&quot;td&quot;); const desc = document.createElement(&quot;td&quot;); const owner = document.createElement(&quot;td&quot;); // Set the inner HTML of each cell to the corresponding car attribute value make.innerHTML = row.make; model.innerHTML = row.model; year.innerHTML = row.year; price.innerHTML = row.price; engine.innerHTML = row.engine; body_style.innerHTML = row.body_style; desc.innerHTML = row.desc; owner.innerHTML = row.owner // Append each cell to the row // Allows the data to be added to the newly made table tr.appendChild(make); tr.appendChild(model); tr.appendChild(year); tr.appendChild(price); tr.appendChild(engine); tr.appendChild(body_style); tr.appendChild(desc); tr.appendChild(owner); // Append the row to the container element resultContainer.appendChild(tr); } }) }) . 3.b.iii. . The variable that represents the list is “data.” &quot;Data&quot; is the data of the cars that the program fetches from our database using a GET request - the data is represented by JSON. This data is used to populate the table with various attributes including make, model, year, etc. . 3.b.iv. . The data contained within the list is the make, model, price, year, engine, body style, and owner of each car from the database. . 3.b.v. . Without using the json “data” the car search would cease to work. This is because the car search uses the data to build tables based on specific criteria from the data itself. . 3.c.i. . // Table creation after search button is pressed function makeTable(data){ // Remove current carData - prepare for new search document.getElementById(&quot;carData&quot;).remove() const [desiredMake, desiredModel, desiredPrice, desiredYear, desiredEngine, desiredBodyStyle, desiredOwner] = getInput() const tbody = document.createElement(&quot;tbody&quot;) // Set tbody id to carData - ensure that carData is still on page tbody.id = &quot;carData&quot; // Iterate over each row from the data in the database for (const row of data) { // Filter // Check if each row value matches user input, skip to the next iteration if there is no match if (desiredMake &amp;&amp; !(row.make.toUpperCase() === desiredMake.toUpperCase())) continue if (desiredModel &amp;&amp; !(row.model.toUpperCase() === desiredModel.toUpperCase())) continue if (desiredPrice &amp;&amp; !(row.price &lt;= parseInt(desiredPrice))) continue if (desiredYear &amp;&amp; !(row.year === parseInt(desiredYear))) continue if (desiredEngine &amp;&amp; !(row.engine.toUpperCase() === desiredEngine.toUpperCase())) continue if (desiredBodyStyle &amp;&amp; !(row.body_style.toUpperCase() === desiredBodyStyle.toUpperCase())) continue if (desiredOwner &amp;&amp; !(row.owner.toUpperCase() === desiredOwner.toUpperCase())) continue // If all values match, create table elements const tr = document.createElement(&quot;tr&quot;); const make = document.createElement(&quot;td&quot;); const model = document.createElement(&quot;td&quot;); const year = document.createElement(&quot;td&quot;); const price = document.createElement(&quot;td&quot;); const engine = document.createElement(&quot;td&quot;); const body_style = document.createElement(&quot;td&quot;); const owner = document.createElement(&quot;td&quot;); // Set innerHTML to values of make, model, year, etc. from the API make.innerHTML = row.make; model.innerHTML = row.model; year.innerHTML = row.year; price.innerHTML = row.price; engine.innerHTML = row.engine; body_style.innerHTML = row.body_style; owner.innerHTML = row.owner; // Add data for make, model, price, etc. to the table row tr.appendChild(make); tr.appendChild(model); tr.appendChild(year); tr.appendChild(price); tr.appendChild(engine); tr.appendChild(body_style); tr.appendChild(owner); // Add row to the table tbody.appendChild(tr); } // Add the data from tbody into the table document.getElementById(&quot;table&quot;).appendChild(tbody) } . 3.c.ii. . &lt;h1&gt;Car Search&lt;/h1&gt; &lt;table id=&quot;table&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Make&lt;/th&gt; &lt;th&gt;Model&lt;/th&gt; &lt;th&gt;Year&lt;/th&gt; &lt;th&gt;Price&lt;/th&gt; &lt;th&gt;Engine&lt;/th&gt; &lt;th&gt;Body Style&lt;/th&gt; &lt;th&gt;Owner&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tr id=&quot;result&quot;&gt;&lt;/tr&gt; &lt;tbody id=&quot;carData&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;!-- Set label and input ids - allows for use in getInput() function --&gt; &lt;label for=&quot;make&quot;&gt;Make&lt;/label&gt; &lt;input name=&quot;make&quot; id=&quot;make&quot;&gt; &lt;label for=&quot;model&quot;&gt;Model&lt;/label&gt; &lt;input name=&quot;model&quot; id=&quot;model&quot;&gt; &lt;label for=&quot;year&quot;&gt;Year&lt;/label&gt; &lt;input name=&quot;year&quot; id=&quot;year&quot;&gt; &lt;label for=&quot;price&quot;&gt;Price&lt;/label&gt; &lt;input name=&quot;price&quot; id=&quot;price&quot;&gt; &lt;label for=&quot;engine&quot;&gt;Engine&lt;/label&gt; &lt;input name=&quot;engine&quot; id=&quot;engine&quot;&gt; &lt;label for=&quot;body_style&quot;&gt;Body Style&lt;/label&gt; &lt;input name=&quot;body_style&quot; id=&quot;body_style&quot;&gt; &lt;label for=&quot;owner&quot;&gt;Owner&lt;/label&gt; &lt;input name=&quot;owner&quot; id=&quot;owner&quot;&gt; &lt;button onclick=&quot;makeTable(carData)&quot; style=&quot;background-color: #ffff; color: black;&quot;&gt;Search&lt;/button&gt; &lt;button onclick=&quot;clearTable(carData)&quot; style=&quot;background-color: #f2f2f2; color: black&quot;&gt;Clear&lt;/button&gt; . 3.c.iii. . The identified procedure “makeTable” iterates through the list of cars from the data in our database. Cars that match the specific criteria set via the user’s input are the only cars that populate the table - thus, allowing the cars to be filtered/searched. uses a for loop to iterate through the list of cars from the data in our database. . 3.c.iv. . The function first gets the user input values for desired make, model, price, year, engine, body style, and owner by calling the &quot;getInput&quot; function.The function first gets the user input values for desired make, model, price, year, engine, body style, and owner by calling the &quot;getInput&quot; function. The function then removes any previous data by removing the table with id &quot;carData&quot;. The function creates a new table body element using the &quot;createElement&quot; method and sets its id to &quot;carData&quot;. This table body element will hold the rows of car data that match the user&#39;s search criteria. The function then loops through each row of data from the database using a for-of loop. For each row of data, the function checks if each value matches the user input values using if statements. If a value doesn&#39;t match, the loop moves on to the next row using the &quot;continue&quot; statement. This filters the data to only show rows that match the user&#39;s search criteria. If all values match, the function creates a new table row element using the &quot;createElement&quot; method and creates new table data elements (td) for each column (make, model, year, price, engine, body style, and owner) using the same method. Set innerHTML: The function then sets the innerHTML of each td element to the corresponding value from the current row of data. The function appends each td element to the table row using the &quot;appendChild&quot; method.The function appends each td element to the table row using the &quot;appendChild&quot; method. The function appends the table row to the table body using the &quot;appendChild&quot; method. After all rows have been processed, the function appends the table body to the table with id &quot;table&quot; using the &quot;appendChild&quot; method. . 3.d.i. . Call One In call one, makes a search with no values - makeTable has no user input. . | Call Two This call will execute the algorithm with user input that filters the rows of data based on certain criteria. For example, the input would be &quot;Lexus&quot; for the desired make and &quot;Coupe&quot; for the desired body style. . | . 3.d.ii. . Condition(s) tested by Call One As there is no user input, all of the &quot;continue&quot; statements when iterating through the data will be skipped and all of the rows will pass through to the table creation section of the algorithm. . | Condition(s) tested by Call Two When the algorithm loops through each row of data, it will only create a new table row if the make matches &quot;Lexus&quot; and the body style matches &quot;Coupe&quot;. All other rows will be skipped due to the &quot;continue&quot; statements in the filtering section of the algorithm. . | . 3.d.iii. . Results of Call One The resulting table will include all rows of data from the &quot;data&quot; array. . | Results of Call Two The resulting table will only include rows that match the user&#39;s input criteria, and not all rows from the filtered list of data. . | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cpt/cb/final/2023/02/27/CPT.html",
            "relUrl": "/cpt/cb/final/2023/02/27/CPT.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post62": {
            "title": "Flask/Python Deployment Guide",
            "content": "Server Setup and Initial Deployment . Development Operations (DevOps) begins with server setup. . Amazon Web Services (AWS): Electric Cloud Compute (EC2) Setup . To begin, head to the “Instances” dropdown on AWS and select “Instances.” | . . From here, a variety of instances will show up. For this project, depending on which teacher you have, select either “NCS.cf Yeung CSP” or “NCS.gq Mort CSP” | . . Then, run $ sudo docker ps # This allows you to observe the ports that are currently being used . | . docker-compose.yml . Next, head to VSCode on your local machine and update the docker-compose.yml and Docker files. | Select a port that is not used and change the left side of docker-compose.yml port to be an unused port XYZ:8086. The “XYZ” would be the port that you have selected. | The right side 8086 matches the port you have used in your Docker file in two locations - 8080 is typically used as an internal port. | . version: &#39;3&#39; services: web: image: flask_port_v1 # The image name should be unique to your project build: . ports: - &quot;XYZ:8086&quot; # The &quot;XYZ&quot; would be the port that you have selected. volumes: - ./volumes:/volumes - ./instance:/instance restart: unless-stopped . Dockerfile . Check that your Dockerfile is the same as below | . FROM docker.io/python:3.10 WORKDIR / # [Install python and pip] RUN apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get install -y python3 python3-pip git COPY . /app RUN pip install --no-cache-dir -r requirements.txt RUN pip install gunicorn ENV GUNICORN_CMD_ARGS=&quot;--workers=3 --bind=0.0.0.0:8080&quot; EXPOSE 8080 CMD [ &quot;gunicorn&quot;, &quot;main:app&quot; ] . In VSCode, open up your terminal. Run sudo docker-compose up and make sure it builds properly. Type localhost:XYZ in your browser (XYZ is the unused port you have selected). Check for any errors occur in the Terminal. If this fails, please be sure to review the previous steps. | If all is well, make sure to commit your changes to docker-compose.yml &amp; Dockerfile | . Clone and Change Directory to project location . This command allows you to clone your GitHub repository onto the AWS instance. In this example, the GitHub HTTPs link is: https://github.com/nighthawkcoders/flask_portfolio.git. . Head back to either the instance “NCS.cf Yeung CSP” or “NCS.gq Mort CSP” on AWS | . Note . Your repository should be using the APCSP flask_portfolio as a template . Once you are in the instance, run | . ls # Check the other repository names, make sure that the one the name you select does not match the ones that appear when running this command . Next, run | . $ cd $ git clone https://github.com/nighthawkcoders/flask_portfolio.git my-unique-name # Replace &quot;my-unique-name- with your desired name for this repository, it is recommended that your table number and period are featured in this name to avoid confusion among groups $ cd my-unique-name . Once you are in your repository, run | . docker-compose up -d --build . To make sure that your application is running, run the following command | . curl localhost:XYZ # Replace XYZ with the port you have selected . Test preparation for Docker Web Application using IP for Internet Access . Each student scrum team will perform Nginx test and verify Group Web Project is working on EC2 instance. This step is can only support a single Web Application at a time. . This Step is dependent on… . EC2 Public IPs: 3.233.212.71 | Docker Port: 8086 | . Enable Nginx to retrieve default Web Application using IP Address from internet request (Reverse Proxy)! . Install Nginx on Ubuntu servers $ sudo apt install nginx . | Go to location of Nginx server configuration files $ cd /etc/nginx/sites-available . | Open editor to Create your own “Nginx test configuration”. $ sudo nano my-unique-file # Replace &quot;my-unique-file&quot; with the name you wish to call your nginx file . | Edit your own Nginx server configuration making modifications to: IP Address: 3.233.212.71 | docker-compose, proxy pass Port: 8086 | . | . Requirements . A unique name for your file | DNS name for server Link to Jeffery F’s DNS Domain Guide . | Change the port in proxy_pass line to the one you have previously selected | . server { listen 80; listen [::]:80; server_name 3.233.212.71; location / { proxy_pass http://localhost:8086; # Simple requests if ($request_method ~* &quot;(GET|POST)&quot;) { add_header &quot;Access-Control-Allow-Origin&quot; *; } # Preflight requests if ($request_method = OPTIONS ) { add_header &quot;Access-Control-Allow-Origin&quot; *; add_header &quot;Access-Control-Allow-Methods&quot; &quot;GET, POST, OPTIONS, HEAD&quot;; add_header &quot;Access-Control-Allow-Headers&quot; &quot;Authorization, Origin, X-Requested-With, Content-Type, Accept&quot;; return 200; } } } . Activating Nginx configuration . Activate/enabled Nginx server configuration: nginx configuration file: test $ sudo ln -s /etc/nginx/sites-available/my-unique-file /etc/nginx/sites-enabled # Replace &quot;my-unique-file&quot; with the name of your nginx file $ sudo nginx -t . | . | If there are errors, something is wrong… Perhaps you are missing semicolon at the end of server)name or proxy_pass lines. | Perhaps link to file in sites-enabled is bad as a result of bad syntax in ln -a command. There are two directories /etc/nginx/sites-available and /etc/nginx/sites-enabled. | The 1st is for preliminary editing, the second is for activation. Perform ls in /etc/nginx/sites-enabled and make sure all the names look correct. | Correct by rm of mistake in /etc/nginx/sites-enabled without deleting original file in /etc/nginx/sites-available. Then repeat ln -s command. | . | . | If there are no errors, restart NGINX so the server to activate /etc/nginx/sites-enabled files: $ sudo systemctl restart nginx . | Check that your server is running on the browser using the domain using http://mydomain | Replace “mydomain” with the domain you have previously selected | . Final preparation the Docker Web Application using DNS for Internet Access . There are additional steps to this preparation. We need to direct the internet to the AWS server running the Web Application, this is done using Domain Name Service (DNS). After being directed to the Web Server, the server needs to respond to the HTTP (Hyper Text Transfer Protocol) request. The proxy of HTTP to your Web Application is manged by Nginx. Finally, we will Secure HTTP (HTTPS), with a utility called Certbot. . Certbot configuration . Each student scrum team will learn Certbot on on AWS EC2 test server, establish working https web application. The final configuration will be on AWS server managed by Teachers or Student DevOps Engineers. . $ sudo certbot --nginx . Make sure that your domain appears on the list of names to activate HTTPS… | . Saving debug log to /var/log/letsencrypt/letsencrypt.log Plugins selected: Authenticator nginx, Installer nginx Which names would you like to activate HTTPS for? - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1: coolcodersjava.pw 2: www.coolcodersjava.pw 3: ajarcade.duckdns.org 4: flowhealth.duckdns.org 5: goatedgroup.duckdns.org 6: jasj-inventory.duckdns.org 7: recipies.duckdns.org 8: ssvgcars.duckdns.org 9: userapi.duckdns.org 10: fr0st.ml 11: www.fr0st.ml 12: agenda.nighthawkcodescrums.gq 13: coolcoders.nighthawkcodescrums.gq 14: escaperoom.nighthawkcodescrums.gq 15: frost.nighthawkcodescrums.gq 16: jame.nighthawkcodescrums.gq 17: lawnmowers.nighthawkcodescrums.gq 18: loopholegames.nighthawkcodescrums.gq 19: musicmania.nighthawkcodescrums.gq 20: nba.nighthawkcodescrums.gq 21: sadv.nighthawkcodescrums.gq 22: ssjn.nighthawkcodescrums.gq 23: stocks.nighthawkcodescrums.gq 24: striver.nighthawkcodescrums.gq 25: tngc.nighthawkcodescrums.gq 26: white.nighthawkcodescrums.gq 27: workwatch.nighthawkcodescrums.gq 28: cars.nighthawkcodingsociety.com 29: dolphin.nighthawkcodingsociety.com 30: saakd.nighthawkcodingsociety.com 31: pythonalflask.tk 32: www.pythonalflask.tk 33: teambrobro.tk 34: www.teambrobro.tk 35: teamcheeseatimetime.tk 36: www.teamcheeseatimetime.tk - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Select the appropriate numbers separated by commas and/or spaces, or leave input blank to select all options shown (Enter &#39;c&#39; to cancel): # ENTER YOUR CORRESPONDING NUMBER Cert not yet due for renewal You have an existing certificate that has exactly the same domains or certificate name you requested and isn&#39;t close to expiry. (ref: /etc/letsencrypt/renewal/nighthawkcodingsociety.com-0001.conf) What would you like to do? - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1: Attempt to reinstall this existing certificate 2: Renew &amp; replace the cert (limit ~5 per 7 days) - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Select the appropriate number [1-2] then [enter] (press &#39;c&#39; to cancel): 2 Renewing an existing certificate Performing the following challenges: http-01 challenge for nighthawkcodingsociety.com http-01 challenge for csa.nighthawkcodingsociety.com http-01 challenge for cso.nighthawkcodingsociety.com http-01 challenge for flm.nighthawkcodingsociety.com Waiting for verification... Cleaning up challenges Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_society Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_csa Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_csp Deploying Certificate to VirtualHost /etc/nginx/sites-enabled/nighthawk_flm Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 1: No redirect - Make no further changes to the webserver configuration. 2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for new sites, or if you&#39;re confident your site works on HTTPS. You can undo this change by editing your web server&#39;s configuration. - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Select the appropriate number [1-2] then [enter] (press &#39;c&#39; to cancel): 2 Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_society Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_csa Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_csp Traffic on port 80 already redirecting to ssl in /etc/nginx/sites-enabled/nighthawk_flm - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Your existing certificate has been successfully renewed, and the new certificate has been installed. The new certificate covers the following domains: https://nighthawkcodingsociety.com, https://csa.nighthawkcodingsociety.com, https://csp.nighthawkcodingsociety.com, and https://flm.nighthawkcodingsociety.com, You should test your configuration at: https://www.ssllabs.com/ssltest/analyze.html?d=nighthawkcodingsociety.com https://www.ssllabs.com/ssltest/analyze.html?d=csa.nighthawkcodingsociety.com https://www.ssllabs.com/ssltest/analyze.html?d=csp.nighthawkcodingsociety.com https://www.ssllabs.com/ssltest/analyze.html?d=flm.nighthawkcodingsociety.com - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/nighthawkcodingsociety.com-0001/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/nighthawkcodingsociety.com-0001/privkey.pem Your cert will expire on 2022-03-06. To obtain a new or tweaked version of this certificate in the future, simply run certbot again with the &quot;certonly&quot; option. To non-interactively renew *all* of your certificates, run &quot;certbot renew&quot; - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let&#39;s Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le . Conclude this process by running sudo certbot --nginx and testing https://mydomain | Replace “mydomain” with the domain you have previously selected | . Update Deployment . To update your code, run | . $ sudo docker-compose kill Killing flask_portfolio_web_1 ... done . From here, the server should be down and displaying a 502 error | . $ git pull # This allows you to update your code . Then, rebuild your container by running… | . $ sudo docker-compose build --no-cache . Note . This step can take a few minutes . | Finally, run… . | . $ sudo docker-compose up -d Recreating flask_portfolio_web_1 ... done . If all of the steps have been completed properly, the server should be back up with the applied changes/updates | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/deploy",
            "relUrl": "/deploy",
            "date": " • Feb 20, 2023"
        }
        
    
  
    
        ,"post63": {
            "title": "MCQ",
            "content": "Review . To be quite honest, I was suprised yet not suprised that I recieved a score of 50/50 on MCQ #2. The reason behind this is because as I went through the test, I made sure to take my time for each and every problem and write out my thinking in my notebook. The overall test took me up till the end of the day on January 30th, just a day before the entire test was due. Furthermore, I made sure to look over the test questions with my classmate, Luna Iwazaki, during class time. This allowed me to get a second point of view other than my own when going through these problems. Finally, in terms of the concepts from the test, when I was confused on them I made sure to go back and watch the videos provided by College Board. These videos were essential in helping me build a foundation to answer these problems - though some of them were educated guesses, it appears that they were all correct. . . As I got a perfect score, I will go over the few problems that I had guessed my answers . Problem 2 . For this problem, I had figured out that answers &quot;a&quot; and &quot;b&quot; were not correct. From here, I had to guess between answers &quot;c&quot; and &quot;d.&quot; I ended up picking answer &quot;c,&quot; which ended up being correct as moving the statement from line 5 between lines 2 and 3 would allow the procedure to properly function. From my research, I found that it would be beneficial to move line 5 between lines 2 and three as initializing count to 0 would avoid any error in the program. It initializes the variable to a known value before the loop starts. This is necessary because the count variable is used to track the number of times the value &quot;val&quot; appears in the list myList. If count is not initialized to 0, its value will be undefined | . . Problem 12 . For this question, I had figured that answer &quot;b&quot; must have been the only right choice. This answer I consider to be a guess because though on the scratch sheet of paper I used I marked this question as having the answer &quot;b,&quot; I wrote a question mark next to it. The reason behind this was because though I figured that the rest of the answers were not correct, I could not explain why &quot;b&quot; was the only option. Now, I know that &quot;b&quot; is the answer because it provides two events in which the elevator would require movement - either from floor 1 moving up to floor 2 or vice versa. | . . Problem 50 . This problem was tricky, my answer was not an educated guess as for the previous two, but rather a completely random guess. I had tried to go over the College Board material in terms of the ASCII characters with hexidecimals, but could not quite grasp the concept - my guess was quite lucky to say the least. | . . Notes + My Explanation . ASCII code is code or decimal numbers representing text | ASCII encodes characters into binary data consisting of seven bits | In ASCII character encoding, each character is represented by a unique number between 0 and 127 | To convert from decimal to hexadecimal, you divide the decimal number by 16 and keep track of the remainders | The first remainder (when divided by 16) is the right-most digit in the hexadecimal representation, the second remainder is the next digit to the left, and so on, until you reach the quotient of 0. | 86/16 = 5, remainder = 6 | Thus, hexadecimal representation of 86 is 56 (5 &amp; 6) | This means the letter from decimal (base 10) 86 is equal to the (base 16) 56, which is &quot;V.&quot; | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cb/2023/02/08/MCQ-Review-2.html",
            "relUrl": "/cb/2023/02/08/MCQ-Review-2.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post64": {
            "title": "5.5 & 5.6 Hacks",
            "content": "Unit 5.5 Blog Notes . When you create a GitHub repository it requests a license type. | There were many lawyers who made a profession out of patents | Qualcomm desires compensation for derivative work and requires a royalty payment for the use of ideas and patents. | Utilizing software under the GPL license could forfeit your ability to charge for the software and related patents. | The GPL open source license mandates that any work derived from the original must be free and the code must be shared. | The cost of using software under the GPL license might be greater than anticipated due to the loss of rights to charge for the software and patents. | Open source licenses such as the GPL have specific guidelines for sharing and distributing works derived from the original. | Companies like Qualcomm aim to be reimbursed for the usage of their patents and ideas, even within the realm of open source software. | . Creative Commons Zero v1.0 Universal . The Creative Commons CC0 Public Domain Dedication relinquishes any copyright claims on a work that you have created and opens it up for the use of the global public. | . Open Source MIT License . The MIT License enables the free use of code and the creation and distribution of proprietary versions. Generally, the author of software under the MIT License desires acknowledgment, which may be as basic as including their name in comments. A proprietary project can be kept private on GitHub. | . Unit 5.6 Blog Notes . Personal Identifiable Information (PII) is information that can be used to identify a person. | PII can be easily obtained through social media, online searches, and other online activities. | Be cautious of the information you share online, as it can be easily accessed by others. | Keep sensitive information such as financial credentials, two-factor authentication codes, and social security numbers private. | Multi-factor authentication and biometrics can increase the security of your systems. | Symmetric and Asymmetric Encryption can also enhance the security of your systems. | Phishing and malware are potential threats that can compromise the security of your PII. | It is important to regularly review your PII vulnerabilities and take steps to protect your information. | . Units 5.5 &amp; 5.6 Reflections . 1) Personal Identifiable Information (PII) is information that can be used to identify a specific individual, such as their name, social security number, date of birth, address, or phone number. In the context of computer science, PII is often collected and stored by websites, applications, and organizations. In a project I have seen, PII was collected from users during the registration process and was used to personalize their experience on the website. . 2) The exposure of PII can have serious consequences for individuals, such as identity theft, financial fraud, and privacy violations. It is important for organizations to properly secure and manage PII to prevent these types of incidents from occurring. Good passwords are typically long, complex, and random, making them difficult to guess or crack. On the other hand, bad passwords are short, easily guessable, or commonly used. Another step that can be used to assist in authentication is two-factor authentication (2FA), which adds an extra layer of security by requiring something you know (such as a password) and something you have (such as a smartphone) to access an account. . 3) Symmetric encryption is a method of encryption where the same key is used for both encryption and decryption. This means that both the sender and recipient of the encrypted message must have access to the same key in order to communicate securely. On the other hand, asymmetric encryption uses two different keys: one for encryption and one for decryption. This allows for secure communication between two parties without having to exchange the key beforehand. . 4) One example of encryption used in AWS deployment is the use of Secure Sockets Layer (SSL) certificates, which encrypt communication between a user&#39;s browser and a website to prevent eavesdropping and tampering. . 5) Personally, I have not fallen for any phishing schemes up till this point. A phishing scheme I have learned about is one where an attacker sends an email that appears to be from a trusted source, such as a bank or an online retailer, and asks the recipient to click on a link or provide sensitive information. Another common phishing technique is to create a fake login page that resembles a legitimate website, in an attempt to trick the user into entering their username and password. Finally, malicious attachments can also be used as a phishing scheme. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cb/5.5/5.6/hacks/2023/02/08/.5-5.6-hacks.html",
            "relUrl": "/cb/5.5/5.6/hacks/2023/02/08/.5-5.6-hacks.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post65": {
            "title": "5.1 & 5.2 Blog",
            "content": "Notes . Chat GPT was sponsored by Microsoft and now has 10 billion dollars since they think it&#39;s the google killer. The GPT saves from the secondary clicking, don’t know the source (cite sources). Good because you can answer right away. | Computer bias: Are we inserting our own bias into our programs? Can an AI be biased? Ex. HP facial scan bias based on skintones | Digital Divide: There is division between social classes and access to technology | . 5.1 Blog Post Reflection . Three Benefits of computing: | . 1) Increased productivity and efficiency through automation of tasks. . 2) Enhanced scientific research and discovery through data analysis and simulation. . 3) Improved communication and access to information through the internet. . Three Harmful Effects of computing: | . 1) Increased dependence on technology and potential for digital addiction. . 2) Decreased privacy and security due to the collection and storage of personal information. . 3) Job loss and unemployment due to automation of certain tasks. . The effects of Dopamine: | Personally, I believe that video games can be quite addicting for some people. However, I believe that the dependency on video games and affect that they have on an individual&#39;s livelihood depend on the individual themself. If a person holds themself accountable for their hours online, then I think that there are no issues and that the impacts on studying can be eliminated. | . 5.2 Blog Post Reflection . 1) In the digital world, one can empower themselves by preventing cyber bullying and by developing skills to protect their privacy online. To add, they can also seek out various different perspectives and opinions online to help broaden their understanding of the real and digital world. . 2) One who is digitally empowered can use their knowledge to teach others. At Del Norte, students can help each other understand technology better and have discussions regarding online privacy and safety. . 3) At times, paper or red tape can prevent digital empowerment. This is because they do not support the use of technology. At Del Norte, I do not believe that such barriers are common as most classes have options to take digital notes and many assignments are performed/completed via a device such as a computer or laptop. In other parts of the world, even in San Diego County, there are schools in which not all of the students can afford to own their own devices. This prevents digital empowerment and is known as digital divide. . Three beneficial effects of your projects based on Unit 5.1 . 1) Easy access to information on a variety of cars . 2) Helps users find a car that fits their needs . 3) Introduces users to a variety of cars they may not have known about, ie. diesel, electric, etc.&#39; . Three harmful effects . 1) The promotion of pollution-inducing vehicles . 2) If consumers become overly reliant on the information provided by the website, they may neglect to conduct their own research or seek additional input from other sources, potentially leading to poor decision making. . 3) Our website may reduce the need for a car salesperson to provide information on a given vehicle. This can have an effect on that line of work - affecting those who have that job. . Pros/Cons of internet blockers at routers and lack of admin passwords on lab machines at school . Pros: | . 1) Increased control and management over internet access, allowing for a safer and more productive environment. . 2) Reduction in distractions and improved focus on academic tasks. . 3) Improved security by limiting the potential for unauthorized changes or installations on the system. . Cons: | . 1) Difficulty for students to access personal accounts or online tools needed for their education. . 2) Difficulty in installing necessary software or tools for specific classes or projects. . 3) Difficulty for students to access personal accounts or online tools needed for their education. . My concerns regarding digital divide . Inequality in access to education and job opportunities, as those without access to technology may have limited resources and information. | Reduced innovation and economic growth in certain communities, as those without access to technology may not have the means to contribute to or benefit from the technological advancements of society. | Worsening of socio-economic differences, as those without access to technology may face even greater challenges in areas such as finance, healthcare, and government services. | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cb/5.1/5.2/2023/02/08/.1-5.1.html",
            "relUrl": "/cb/5.1/5.2/2023/02/08/.1-5.1.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post66": {
            "title": "5.3 & 5.4 Hacks",
            "content": "Unit 5.3 . What age groups use Facebook vs TikTok . TikTok 60 percent of US users are aged between 16-24 | 23.7 percent of Facebook users in the US are aged between 25 and 34 years of age | . Why do virtual assistants have female voices? Amazon, Alexa, Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . Female voices can be seen as being soothing or calming, attributing to overall customer satisfaction | Yes, this was likely purposeful and is harmful, because it attributes a wide demographic of tech users to associate personal assistants as being a woman’s job or role:this reinforces sexism . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) . | Applications such as Netflix, Amazon, and Facebook use algorithms to display posts or items that they believe you would want to see . | These algorithms use data collected from your account | This can fortify biased information | . HP Computers are Racist . The HP computer not being able to pick up the face of people with darker skin is harmful, as it can infer that the computer believes that those with darker skin are not human - due to the fact that the program is supposed to recognize human faces. | This issue should absolutely be corrected | The creator of the video believes that HP computers are racist! They recognize the face of his white friend, Wanda, but not his. | . Hacks . Write summary/thoughts/conclusions from each of the exercises above. Focus on avoiding Bias in algorithms or code you write. . Regarding the use of social media, it was found that TikTok has a high proportion of US users aged 16-24, while Facebook has a higher percentage of users aged 25-34. With regards to virtual assistants having female voices, it was determined that this was likely a purposeful decision by companies like Amazon, Alexa, Google, and Apple Siri, as female voices are perceived to be soothing and calming. However, this decision reinforces sexism and associates personal assistants as being a female role, which is harmful. The use of algorithms by companies such as Netflix, Amazon, and Facebook can reinforce biased information, as these algorithms use data collected from the user&#39;s account to display content that they believe the user would like to see. Finally, the issue of an HP computer not being able to recognize the faces of people with darker skin was deemed harmful and should be corrected, as this implies that the computer does not view them as human. In conclusion, the use of algorithms and AI systems in today&#39;s technology has a significant impact on how people are perceived and treated. To ensure that technology is developed and used in an ethical and unbiased manner, it is essential to consider the potential consequences and impact of the decisions made during the development process. This includes being mindful of the biases that may exist in the data sets used to train algorithms and the potential impact of these biases on the users. . Unit 5.4 . Crowdsourcing . Crowdsourcing helps to reduce computer bias by reaching outside the bounds of a given community | Wikipedia relies on crowdsourced information | Although it may contain inaccuracies, these are often corrected by the self-regulated community, leading many to view it as a more trustworthy source than official information. | Cryptocurrency and its underlying blockchain technology ensure the security of financial transactions through validation by three independent miners. In the event of an error, the process is rechecked. | This crowdsourced innovation has prompted rethinking of currency by governments, and blockchain algorithms are being explored for securing sensitive data, such as medical records. | COVID data provides insights into areas that are effectively addressing the pandemic and those that are not. This information has a significant impact on decisions such as attending public events, traveling by plane, and wearing masks. The community of data analysts and researchers will drive new approaches to analyzing and utilizing data that affects our lives. | . Hacks . Think of a use case for crowdsourcing in your project … CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? What kind of data could you capture at N@tM to make the evening interesting? Perhaps use this data to impress Teachers during finals week. . At N@TM, we can conduct a survey to determine how many students have trouble with finding suitable cars that meet their criteria. Our project purpose is to help ease the car searching process, especially for students such as ourselves - so this form of crowdsourcing can be very helpful to bettering our overall project and website. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/cb/5.3/5.4/hacks/2023/02/05/.3-5.4-hacks.html",
            "relUrl": "/cb/5.3/5.4/hacks/2023/02/05/.3-5.4-hacks.html",
            "date": " • Feb 5, 2023"
        }
        
    
  
    
        ,"post67": {
            "title": "Feature Outline",
            "content": "Overview . The feature that I will use from our team’s project for the Create Performance task is the overall favoriting system of vehicles on our website. | My feature will allow users that are signed in to click a heart right beside a desired car or cars | Once they favorite a car(s) from our site’s inventory or optimal car quiz, they will be able to click the profile tab and view the cars in which they have favorited. | All of the cars that have been favorited will be stored in a database within the backend, which we plan to set up on AWS (Amazon Web Services) via a Flask server. | This feature will have use between Mati’s login system, Taiyo’s inventory system, and Luna’s “Optimal Car Quiz” | . . Row 1 - Program Purpose and Function: . Purpose: The purpose of my program is to allow users to keep track of the cars that they like the most, or fits their needs the best | Function: The function of my feature is to let users favorite cars and be able to view them via their personal profile - clicking a heart that is displayed on the top left of each car’s profile will enable this feature. | Input: The sole input required for my feature is the mouse click of the user, which they will use to favorite a given car | Output: The output of my program is the display of a given user’s favorite car or cars, which they will input through manually clicking the heart on the top left of the car’s profile. | . Row 2 - Data Abstraction: . First code segment: The first program code segment will show a user’s favorited cars within a database (I will implement the database in the future) | Second code segment: The data in the database will be used for display under our site’s “profile” page/tab. On this page, users will be able to view their unique collection of favorite cars. | Variable: The name of the variable in the list will be “favoritesCollection” | Representation: The data in the list represents the given user’s collection of favorite cars | . Row 3 - Managing Complexity: . Lists: Each user’s favorite cars will be stored in a list. These lists will be stored, managed, and retrieved from our database | Explanation: This data will be under the “favoritesCollection” variable. Without these lists, the program would not function properly, as each user&#39;s collection of favorite cars would not be properly stored - thus, the data will not be properly displayed on our website. | . Row 4 - Procedural Abstraction: . Procedure: A procedure named “add_favorite_car” will take action which takes three parameters: username, car, and the “favoritesCollection” list. The procedure appends the car to the favoritesCollection and prints a confirmation message indicating that the car was added to the user&#39;s favorite cars list. | Contribution: The procedure “add_favorite_car” contributes to the overall functionality of the program by allowing the user to add cars to their favorite cars list. This information can then be stored in a database or used for other purposes in the program. | . Row 5 - Algorithm Implementation: . This is my plan for the algorithm I plan to code and implement into my team’s website. . Iteration:The algorithm will obtain a given user’s username and their associated list of favorite cars from the database. A variable “i” will be initialized to keep track of the current car number being displayed. A for loop will then be used to iterate through each car in the favorite cars list. | Selection: An if/else statement will be used to determine if the list is empty or not. If the list is empty, print a message indicating that the user has no favorite cars. | Sequencing: Within the for loop, sequencing will be used to print the car number (i) and car name. | . Row 6 - Testing: . Call 1: Condition tested = The favorite cars list associated with &quot;user1&quot; is not empty. Result = The car names and their respective numbers are displayed for &quot;user1&quot;. | Call 2: Condition tested = The favorite cars list associated with &quot;user2&quot; is empty. Result = A message is printed indicating that &quot;user2&quot; has no favorite cars. | Explanation: The condition being tested by each call is whether the favorite cars list associated with the given username is empty or not. The result of each call is either the display of the user&#39;s favorite cars and their respective numbers or a message indicating that the user has no favorite cars. | . Video Demonstration Considerations . My video will have to show my codes input, output, and overall program functionality. This means that my code must function as intended without any mistakes or fatal errors. In my video, I will have to be logged in to an account on our website, which is a part of Mati&#39;s feature. I will need to show my feature by favoriting cars from our site&#39;s inventory and from my &quot;Optimal Car Quiz&quot; results - Luna&#39;s feature. To show that my program properly functions, I will need to go to my personal profile and show the display of my favorite cars based upon my input. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/feature/cb/outline/2023/02/03/feature-outline.html",
            "relUrl": "/feature/cb/outline/2023/02/03/feature-outline.html",
            "date": " • Feb 3, 2023"
        }
        
    
  
    
        ,"post68": {
            "title": "Object-Oriented Programming Hacks",
            "content": "Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . | Add classOf attribute to define year of graduation . | Add setter and getter for classOf | Add dob attribute to define date of birth | This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | Add instance variable for age, make sure if dob changes age changes | Add getter for age, but don&#39;t add/allow setter for age | Update and format tester function to work with changes | . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf, make): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf self._make = make @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def uid(self): return self._uid @uid.setter def uid(self, uid): self._uid = uid def is_uid(self, uid): return self._uid == uid @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string @dob.setter def dob(self, dob): if type(dob) == date: self._dob = dob #classOf @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf # Getter for car make @property def make(self): return self._make # Adding a setter function for make @make.setter def make(self, make): self._make = make @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;classOf&quot; : self.classOf, &quot;make&quot; : self.make } return dict def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result def __str__(self): return json.dumps(self.dictionary) def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob}, classOf={self._classOf}, make={self._make})&#39; def tester(users, uid, psw): result = &quot;&quot; for user in users: if user.uid == uid and user.is_password(psw): print(&quot;* &quot;, end=&quot;&quot;) result = user print(user) return result # Adding a second user if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11) , classOf=1865 , make=&quot;Ford&quot;) u2 = User(name=&#39;Ethan Tran&#39;, uid=&#39;ethan&#39;, password=&#39;ethan123&#39;, dob=date(2007, 5, 19) , classOf=2025 , make=&quot;BMW&quot;) users = [u1, u2] # Output shows a star or &quot;*&quot; due to the tester using the correct password tester(users, u2.uid, &quot;ethan123&quot;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: 1865, &#34;make&#34;: &#34;Ford&#34;} * {&#34;name&#34;: &#34;Ethan Tran&#34;, &#34;uid&#34;: &#34;ethan&#34;, &#34;dob&#34;: &#34;05-19-2007&#34;, &#34;age&#34;: 15, &#34;classOf&#34;: 2025, &#34;make&#34;: &#34;BMW&#34;} JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: 1865, &#34;make&#34;: &#34;Ford&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$PRhIHZBTIUef4gJZ$8d8568942cb27d88636af7a201be31f751afb271fccace59c0b6ab77c78db143&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_classOf&#39;: 1865, &#39;_make&#39;: &#39;Ford&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_make&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;make&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$PRhIHZBTIUef4gJZ$8d8568942cb27d88636af7a201be31f751afb271fccace59c0b6ab77c78db143,dob=1847-02-11, classOf=1865, make=Ford) . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . import json class Car: def __init__(self, make, model, price, year): # Adding instance attributes self._make = make self._model = model self._price = price self._year = year # Add getters and setters for make, model, price, year @property def make(self): return self._make @make.setter def make(self, make): self._make = make @property def model(self): return self._model @model.setter def model(self, model): self._model = model @property def price(self): return self._price @price.setter def price(self, price): self._price = price @property def year(self): return self._year @year.setter def year(self, year): self._year = year #Calculating Depreciation def calculate_depreciation(self, years): depreciation = 0.9**years * self._price return depreciation @property def dictionary(self): dict = { &quot;make&quot; : self.make, &quot;model&quot; : self.model, &quot;price&quot; : self.price, &quot;year&quot; : self.year, } return dict def __str__(self): return json.dumps(self.dictionary) if __name__ == &quot;__main__&quot;: car1 = Car(make=&quot;Lexus&quot;, model=&quot;IS 500&quot;, price=&quot;$58,000&quot;, year=&quot;2022&quot;) print(car1) . {&#34;make&#34;: &#34;Lexus&#34;, &#34;model&#34;: &#34;IS 500&#34;, &#34;price&#34;: &#34;$58,000&#34;, &#34;year&#34;: &#34;2022&#34;} .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/object%20oriented%20programming/obb/2023/01/19/obb-hacks.html",
            "relUrl": "/object%20oriented%20programming/obb/2023/01/19/obb-hacks.html",
            "date": " • Jan 19, 2023"
        }
        
    
  
    
        ,"post69": {
            "title": "Performance Task Scoring 2",
            "content": "GitHub Scoring Tables . CLICK HERE for the Link to my Scoring Tables . College Board’s Scoring Guide for Submission #1 . College Board’s Scoring Guide for Submission #2 . College Board’s Scoring Guide for Submission #3 . College Board’s Scoring Guide for Submission #4 . Note: CLICK THE ABOVE LINK FOR MY SCORING TABLES . Submission 1 . My Score: 2/6 . College Board’s Score: 1/6 . Reflection . Discrepancies: The score that I gave was 2/6, while College Board graded this submission 1/6. I had believed that the submission properly met all of the requirements for row 1, but College Board disagreed. . What my program will need: My program will need to feature a detailed description of the functionality. Furthermore, I must also make sure that my code runs as intended before submitting my work. . Why the submission may have failed: The submission did not completely describe the functionality nor show the correct output of the program. . Submission 2 . My Score: 6/6 . College Board’s Score: 6/6 . Reflection . Discrepancies: There are no discrepancies between my score and that of College Board for this submission. We both gave this submission a 6/6. . What my program will need: I will need to make my program and writing the best work that I can possibly put out - making sure to meet each criteria prior to submission. This will help to ensure that my submission receives full points. . Why the submission got full credit: This submission got full credit due to the fact that it excellently passes each of the criteria given by College Board, making no mistakes. The writing portion is very clear and properly explains each detail that is on the College Board rubric. . Submission 3 . My Score: 6/6 . College Board’s Score: 5/6 . Reflection . Discrepancies: While I gave this submission full points, College Board graded it a 5/6. This is due to a difference between our scores for row 1, in which I gave the submission full credit - College Board however, did not. . What my program will need: My submission will need to explain both the purpose and function of the program without missing any details no matter how significant or small. . Why the submission may have failed: This submission most likely failed due to a failure to properly explain the purpose of the program completely. . Submission 4 . My Score: 4/6 . College Board’s Score: 3/6 . Reflection . Discrepancies: While College Board gave this submission a score of 3/6, I graded it a 4/6. This is due to a difference in our score for row 6. . What my program will need: My program will need to completely describe the complexity and data contained in the list(s) that I decide to make. . Why the submission may have failed: This submission failed to utilize the data stored in the list that is a part the code. To add, the list does not manage any sort of complexity, the written portion also fails to both recognize and explain the use of the list to manage complexity. Lastly, this submission does not feature any testing points that use any sort of arguments or separate functions. With these failures meet the given criteria, the submission earned a total score of 3/6 by College Board. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/perfromance%20task/2/2023/01/16/perf-task-two.html",
            "relUrl": "/perfromance%20task/2/2023/01/16/perf-task-two.html",
            "date": " • Jan 16, 2023"
        }
        
    
  
    
        ,"post70": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$7jJ...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$rNA...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$53s...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$Pi7...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$W9a...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$7jJ...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$rNA...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$2LN...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$Pi7...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$W9a...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$7jJDwlnJSQ4q23Ru$71c2dd654a918df919de1d638f7c4c1881a8a92d513e55beead2bf41201a31d2&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$rNAgXUdUoDoOR4sv$a67e67888b5c0f5f4a8765a6c6dc2ed0a345ca5dd0b6dd250472642ec5c183ed&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$2LNER8mcksE4NCG1$2e37efc0ce916afac5ea34b7bcfc274c1059e7a024a55d32cba6941a1a5a92ab&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$Pi7E4fQEd4f01Xa0$add8a5f860e9a0a58baf18e47bc042e2adb16f91a55c35a2ebbd1b15e541c9ea&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$W9aWgEtlWIzmOTc1$731eec138e4c3e1f530821d9ecb1d23fbb93728009547ca3e75fb8796404690b&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$7jJDwlnJSQ4q23Ru$71c2dd654a918df919de1d638f7c4c1881a8a92d513e55beead2bf41201a31d2&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$rNAgXUdUoDoOR4sv$a67e67888b5c0f5f4a8765a6c6dc2ed0a345ca5dd0b6dd250472642ec5c183ed&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$2LNER8mcksE4NCG1$2e37efc0ce916afac5ea34b7bcfc274c1059e7a024a55d32cba6941a1a5a92ab&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$Pi7E4fQEd4f01Xa0$add8a5f860e9a0a58baf18e47bc042e2adb16f91a55c35a2ebbd1b15e541c9ea&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$W9aWgEtlWIzmOTc1$731eec138e4c3e1f530821d9ecb1d23fbb93728009547ca3e75fb8796404690b&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf, make): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf self._make = make @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if type(dob) == date: self._dob = dob #classOf @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf #(Car) make @property def make(self): return self._make @make.setter def make(self, make): self._make = make # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;classOf&quot; : self.classOf, &quot;make&quot; : self.make } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob}, classOf={self._classOf}, make={self._make})&#39; def tester(users, uid, psw): result = &quot;&quot; for user in users: if user.uid == uid and user.is_password(psw): print(&quot;* &quot;, end=&quot;&quot;) result = user print(user) return result if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11) , classOf=1865 , make=&quot;Ford&quot;) u2 = User(name=&#39;Ethan Tran&#39;, uid=&#39;ethan&#39;, password=&#39;ethan123&#39;, dob=date(2007, 5, 19) , classOf=2025 , make=&quot;BMW&quot;) users = [u1, u2] tester(users, u2.uid, &quot;ethan123&quot;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: 1865, &#34;make&#34;: &#34;Ford&#34;} * {&#34;name&#34;: &#34;Ethan Tran&#34;, &#34;uid&#34;: &#34;ethan&#34;, &#34;dob&#34;: &#34;05-19-2007&#34;, &#34;age&#34;: 15, &#34;classOf&#34;: 2025, &#34;make&#34;: &#34;BMW&#34;} JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: 1865, &#34;make&#34;: &#34;Ford&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$QkrQNhK1q5nIw7UD$49912df1a026a96e928939a937255414542d6b0f29c11ba3946870e71149bf24&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_classOf&#39;: 1865, &#39;_make&#39;: &#39;Ford&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_make&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;make&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$QkrQNhK1q5nIw7UD$49912df1a026a96e928939a937255414542d6b0f29c11ba3946870e71149bf24,dob=1847-02-11, classOf=1865, make=Ford) . import json class Car: def __init__(self, company, model, price, year): self._company = company self._model = model self._price = price self._year = year @property def company(self): return self._company @company.setter def company(self, company): self._company = company @property def model(self): return self._model @model.setter def model(self, model): self._model = model @property def price(self): return self.price @price.setter def price(self, price): self._price = price @property def year(self): return self._year @year.setter def year(self, year): self._year = year #Calculating Depreciation def calculate_depreciation(self, years): return 0.9**years * self._price @property def dictionary(self): dict = { &quot;company&quot; : self.company, &quot;model&quot; : self.model, &quot;price&quot; : self.price, &quot;year&quot; : self.year, } return dict def __str__(self): return json.dumps(self.dictionary) if __name__ == &quot;__main__&quot;: car1 = Car(company=&quot;Lexus&quot;, model=&quot;IS 500&quot;, price=&quot;$58,000&quot;, year=&quot;2022&quot;) print(car1) . Canceled future for execute_request message before replies were done . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post71": {
            "title": "PyGame Testing",
            "content": "import pygame import sys # Initialize Pygame pygame.init() # Set up the window window_size = (800, 600) window = pygame.display.set_mode(window_size) pygame.display.set_caption(&quot;Catch the Fish!&quot;) # define colors BLACK = ( 0, 0, 0) WHITE = (255, 255, 255) BLUE = ( 0, 0, 255) GREEN = ( 0, 255, 0) RED = (255, 0, 0) # Set up the variables needed clock = pygame.time.Clock() FPS = 30 score = 0 # The player player_size = 50 player_position = [350, 550] # The fish fish_size = 50 fish_position = [random.randint(0, window_size[0]-fish_size), 0] fish_speed = 5 # The game loop while True: for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() sys.exit() # Move the player # Get keys pressed keys = pygame.key.get_pressed() # Check if left or right arrow is pressed and move the player if keys[pygame.K_LEFT] and player_position[0] &gt; 0: player_position[0] -= 5 if keys[pygame.K_RIGHT] and player_position[0] &lt; window_size[0] - player_size: player_position[0] += 5 # Move the fish if fish_position[1] &gt;= window_size[1]: fish_position[0] = random.randint(0, window_size[0] - fish_size) fish_position[1] = 0 else: fish_position[1] += fish_speed # Check if the player caught the fish if fish_position[1] + fish_size &gt;= player_position[1]: # Check if the fish is in the same x position as the player if fish_position[0] &gt; player_position[0] and fish_position[0] &lt; player_position[0] + player_size or fish_position[0] + fish_size &gt; player_position[0] and fish_position[0] + fish_size &lt; player_position[0] + player_size: score += 1 fish_position[0] = random.randint(0, window_size[0] - fish_size) fish_position[1] = 0 # Draw the window window.fill(BLACK) pygame.draw.rect(window, WHITE, [player_position[0], player_position[1], player_size, player_size]) pygame.draw.rect(window, GREEN, [fish_position[0], fish_position[1], fish_size, fish_size]) # Display the score font = pygame.font.SysFont(&quot;Arial&quot;, 25) text = font.render(&quot;Score: &quot; + str(score), True, WHITE) window.blit(text, [window_size[0]-100, 20]) # Update the screen pygame.display.update() # Tick the clock clock.tick(FPS) . pygame 2.1.2 (SDL 2.0.18, Python 3.10.6) Hello from the pygame community. https://www.pygame.org/contribute.html . NameError Traceback (most recent call last) c: Users etran .vscode fastpages_EthanT _notebooks python_game.ipynb Cell 2 in &lt;cell line: 30&gt;() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; # The fish &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=28&#39;&gt;29&lt;/a&gt; fish_size = 50 &gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; fish_position = [random.randint(0, window_size[0]-fish_size), 0] &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=30&#39;&gt;31&lt;/a&gt; fish_speed = 5 &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=32&#39;&gt;33&lt;/a&gt; # The game loop NameError: name &#39;random&#39; is not defined . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/01/08/python_game.html",
            "relUrl": "/2023/01/08/python_game.html",
            "date": " • Jan 8, 2023"
        }
        
    
  
    
        ,"post72": {
            "title": "Performance Task 1",
            "content": "Submission 1 . My Scoring Table (1st Comment) . | College Board Scoring Guide . | . My Score: 5/6 . College Board&#39;s Score: 4/6 . Reflection . Discrepancies: In terms of scoring, I had given this submission a total score of 5/6, while College Board graded it a 4/6. Both College Board and myself agreed upon a lack of managing complexity. Where I was mistaken was when I was grading the program purpose and function. For the criteria of the written portion, I had thought that the submission checked all of the boxes. College Board took a point off due to a lack of actually explaining the purpose of the program - rather the submission only explained the function. . What my program will need: My program will need to meet all of the criteria, leaving no possibilities of mistake. This is due to the fact that even if a single point is marked off, then the entire submission will be graded a 0. For example, Submission 1 was missing the explanation of the purpose of their program and program management that was not as efficient as College Board had wanted - resulting in an F/Fail. . Why the submission may have failed: The submission may have failed because College Board took a point off due to a lack of actually explaining the purpose of the program - rather the submission only explained the function. Additionally, the use of program management was lackluster, which also invoked a 0/1 from College Board. . Submission 2 . My Scoring Table (2nd Comment) | College Board Scoring Guide | . My Score: 6/6 . College Board&#39;s Score: 6/6 . Discrepancies: There were no differences between the score College Board gave and I gave. We each graded the submission 6/6. This made sense, as this submission followed each and every one of the requirements from the rubric. . What my program will need: I would need to follow all of the criteria on the rubric provided by College Board just as in second submission. The submission features a lot of detail in the answers of the written portion, perhaps there was more detail than was asked for/necessary. This is good to keep in mind as I will make sure to be very precise and detailed in my answers for the actual AP Test. . Why the submission did not fail: This submission met each and every criteria as well as additional information, leaving no door open for failure. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/performance%20task/1/2023/01/08/Performance-Task-1.html",
            "relUrl": "/performance%20task/1/2023/01/08/Performance-Task-1.html",
            "date": " • Jan 8, 2023"
        }
        
    
  
    
        ,"post73": {
            "title": "Algorithm Hacks",
            "content": "def xor(x,y): return (x or y) and not (x and y) def F(A, B, C, D): P = xor(A, B) Q = xor(C, D) R = xor(P, Q) return R def f(a,b,c,d): t = &#39;T&#39; (A,B,C,D) = (a==t, b==t, c==t, d==t) R = F(A, B, C, D) return &quot;FT&quot;[R] print(&quot;Truth Table&quot;) print() print(&quot;A B C D | f(A,B,C,D)&quot;) print(&quot;========|===========&quot;) r = &quot;TF&quot; for a in r: for b in r: for c in r: for d in r: print(a, b, c, d, &quot;| &quot;, f(a, b, c, d)) . Truth Table A B C D | f(A,B,C,D) ========|=========== T T T T | F T T T r | F T T T u | F T T T e | F T T T F | F T T T a | F T T T l | F T T T s | F T T T e | F T T r T | F T T r r | F T T r u | F T T r e | F T T r F | F T T r a | F T T r l | F T T r s | F T T r e | F T T u T | F T T u r | F T T u u | F T T u e | F T T u F | F T T u a | F T T u l | F T T u s | F T T u e | F T T e T | F T T e r | F T T e u | F T T e e | F T T e F | F T T e a | F T T e l | F T T e s | F T T e e | F T T F T | F T T F r | F T T F u | F T T F e | F T T F F | F T T F a | F T T F l | F T T F s | F T T F e | F T T a T | F T T a r | F T T a u | F T T a e | F T T a F | F T T a a | F T T a l | F T T a s | F T T a e | F T T l T | F T T l r | F T T l u | F T T l e | F T T l F | F T T l a | F T T l l | F T T l s | F T T l e | F T T s T | F T T s r | F T T s u | F T T s e | F T T s F | F T T s a | F T T s l | F T T s s | F T T s e | F T T e T | F T T e r | F T T e u | F T T e e | F T T e F | F T T e a | F T T e l | F T T e s | F T T e e | F T r T T | F T r T r | F T r T u | F T r T e | F T r T F | F T r T a | F T r T l | F T r T s | F T r T e | F T r r T | F T r r r | F T r r u | F T r r e | F T r r F | F T r r a | F T r r l | F T r r s | F T r r e | F T r u T | F T r u r | F T r u u | F T r u e | F T r u F | F T r u a | F T r u l | F T r u s | F T r u e | F T r e T | F T r e r | F T r e u | F T r e e | F T r e F | F T r e a | F T r e l | F T r e s | F T r e e | F T r F T | F T r F r | F T r F u | F T r F e | F T r F F | F T r F a | F T r F l | F T r F s | F T r F e | F T r a T | F T r a r | F T r a u | F T r a e | F T r a F | F T r a a | F T r a l | F T r a s | F T r a e | F T r l T | F T r l r | F T r l u | F T r l e | F T r l F | F T r l a | F T r l l | F T r l s | F T r l e | F T r s T | F T r s r | F T r s u | F T r s e | F T r s F | F T r s a | F T r s l | F T r s s | F T r s e | F T r e T | F T r e r | F T r e u | F T r e e | F T r e F | F T r e a | F T r e l | F T r e s | F T r e e | F T u T T | F T u T r | F T u T u | F T u T e | F T u T F | F T u T a | F T u T l | F T u T s | F T u T e | F T u r T | F T u r r | F T u r u | F T u r e | F T u r F | F T u r a | F T u r l | F T u r s | F T u r e | F T u u T | F T u u r | F T u u u | F T u u e | F T u u F | F T u u a | F T u u l | F T u u s | F T u u e | F T u e T | F T u e r | F T u e u | F T u e e | F T u e F | F T u e a | F T u e l | F T u e s | F T u e e | F T u F T | F T u F r | F T u F u | F T u F e | F T u F F | F T u F a | F T u F l | F T u F s | F T u F e | F T u a T | F T u a r | F T u a u | F T u a e | F T u a F | F T u a a | F T u a l | F T u a s | F T u a e | F T u l T | F T u l r | F T u l u | F T u l e | F T u l F | F T u l a | F T u l l | F T u l s | F T u l e | F T u s T | F T u s r | F T u s u | F T u s e | F T u s F | F T u s a | F T u s l | F T u s s | F T u s e | F T u e T | F T u e r | F T u e u | F T u e e | F T u e F | F T u e a | F T u e l | F T u e s | F T u e e | F T e T T | F T e T r | F T e T u | F T e T e | F T e T F | F T e T a | F T e T l | F T e T s | F T e T e | F T e r T | F T e r r | F T e r u | F T e r e | F T e r F | F T e r a | F T e r l | F T e r s | F T e r e | F T e u T | F T e u r | F T e u u | F T e u e | F T e u F | F T e u a | F T e u l | F T e u s | F T e u e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T e F T | F T e F r | F T e F u | F T e F e | F T e F F | F T e F a | F T e F l | F T e F s | F T e F e | F T e a T | F T e a r | F T e a u | F T e a e | F T e a F | F T e a a | F T e a l | F T e a s | F T e a e | F T e l T | F T e l r | F T e l u | F T e l e | F T e l F | F T e l a | F T e l l | F T e l s | F T e l e | F T e s T | F T e s r | F T e s u | F T e s e | F T e s F | F T e s a | F T e s l | F T e s s | F T e s e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T F T T | F T F T r | F T F T u | F T F T e | F T F T F | F T F T a | F T F T l | F T F T s | F T F T e | F T F r T | F T F r r | F T F r u | F T F r e | F T F r F | F T F r a | F T F r l | F T F r s | F T F r e | F T F u T | F T F u r | F T F u u | F T F u e | F T F u F | F T F u a | F T F u l | F T F u s | F T F u e | F T F e T | F T F e r | F T F e u | F T F e e | F T F e F | F T F e a | F T F e l | F T F e s | F T F e e | F T F F T | F T F F r | F T F F u | F T F F e | F T F F F | F T F F a | F T F F l | F T F F s | F T F F e | F T F a T | F T F a r | F T F a u | F T F a e | F T F a F | F T F a a | F T F a l | F T F a s | F T F a e | F T F l T | F T F l r | F T F l u | F T F l e | F T F l F | F T F l a | F T F l l | F T F l s | F T F l e | F T F s T | F T F s r | F T F s u | F T F s e | F T F s F | F T F s a | F T F s l | F T F s s | F T F s e | F T F e T | F T F e r | F T F e u | F T F e e | F T F e F | F T F e a | F T F e l | F T F e s | F T F e e | F T a T T | F T a T r | F T a T u | F T a T e | F T a T F | F T a T a | F T a T l | F T a T s | F T a T e | F T a r T | F T a r r | F T a r u | F T a r e | F T a r F | F T a r a | F T a r l | F T a r s | F T a r e | F T a u T | F T a u r | F T a u u | F T a u e | F T a u F | F T a u a | F T a u l | F T a u s | F T a u e | F T a e T | F T a e r | F T a e u | F T a e e | F T a e F | F T a e a | F T a e l | F T a e s | F T a e e | F T a F T | F T a F r | F T a F u | F T a F e | F T a F F | F T a F a | F T a F l | F T a F s | F T a F e | F T a a T | F T a a r | F T a a u | F T a a e | F T a a F | F T a a a | F T a a l | F T a a s | F T a a e | F T a l T | F T a l r | F T a l u | F T a l e | F T a l F | F T a l a | F T a l l | F T a l s | F T a l e | F T a s T | F T a s r | F T a s u | F T a s e | F T a s F | F T a s a | F T a s l | F T a s s | F T a s e | F T a e T | F T a e r | F T a e u | F T a e e | F T a e F | F T a e a | F T a e l | F T a e s | F T a e e | F T l T T | F T l T r | F T l T u | F T l T e | F T l T F | F T l T a | F T l T l | F T l T s | F T l T e | F T l r T | F T l r r | F T l r u | F T l r e | F T l r F | F T l r a | F T l r l | F T l r s | F T l r e | F T l u T | F T l u r | F T l u u | F T l u e | F T l u F | F T l u a | F T l u l | F T l u s | F T l u e | F T l e T | F T l e r | F T l e u | F T l e e | F T l e F | F T l e a | F T l e l | F T l e s | F T l e e | F T l F T | F T l F r | F T l F u | F T l F e | F T l F F | F T l F a | F T l F l | F T l F s | F T l F e | F T l a T | F T l a r | F T l a u | F T l a e | F T l a F | F T l a a | F T l a l | F T l a s | F T l a e | F T l l T | F T l l r | F T l l u | F T l l e | F T l l F | F T l l a | F T l l l | F T l l s | F T l l e | F T l s T | F T l s r | F T l s u | F T l s e | F T l s F | F T l s a | F T l s l | F T l s s | F T l s e | F T l e T | F T l e r | F T l e u | F T l e e | F T l e F | F T l e a | F T l e l | F T l e s | F T l e e | F T s T T | F T s T r | F T s T u | F T s T e | F T s T F | F T s T a | F T s T l | F T s T s | F T s T e | F T s r T | F T s r r | F T s r u | F T s r e | F T s r F | F T s r a | F T s r l | F T s r s | F T s r e | F T s u T | F T s u r | F T s u u | F T s u e | F T s u F | F T s u a | F T s u l | F T s u s | F T s u e | F T s e T | F T s e r | F T s e u | F T s e e | F T s e F | F T s e a | F T s e l | F T s e s | F T s e e | F T s F T | F T s F r | F T s F u | F T s F e | F T s F F | F T s F a | F T s F l | F T s F s | F T s F e | F T s a T | F T s a r | F T s a u | F T s a e | F T s a F | F T s a a | F T s a l | F T s a s | F T s a e | F T s l T | F T s l r | F T s l u | F T s l e | F T s l F | F T s l a | F T s l l | F T s l s | F T s l e | F T s s T | F T s s r | F T s s u | F T s s e | F T s s F | F T s s a | F T s s l | F T s s s | F T s s e | F T s e T | F T s e r | F T s e u | F T s e e | F T s e F | F T s e a | F T s e l | F T s e s | F T s e e | F T e T T | F T e T r | F T e T u | F T e T e | F T e T F | F T e T a | F T e T l | F T e T s | F T e T e | F T e r T | F T e r r | F T e r u | F T e r e | F T e r F | F T e r a | F T e r l | F T e r s | F T e r e | F T e u T | F T e u r | F T e u u | F T e u e | F T e u F | F T e u a | F T e u l | F T e u s | F T e u e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T e F T | F T e F r | F T e F u | F T e F e | F T e F F | F T e F a | F T e F l | F T e F s | F T e F e | F T e a T | F T e a r | F T e a u | F T e a e | F T e a F | F T e a a | F T e a l | F T e a s | F T e a e | F T e l T | F T e l r | F T e l u | F T e l e | F T e l F | F T e l a | F T e l l | F T e l s | F T e l e | F T e s T | F T e s r | F T e s u | F T e s e | F T e s F | F T e s a | F T e s l | F T e s s | F T e s e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F r T T T | F r T T r | F r T T u | F r T T e | F r T T F | F r T T a | F r T T l | F r T T s | F r T T e | F r T r T | F r T r r | F r T r u | F r T r e | F r T r F | F r T r a | F r T r l | F r T r s | F r T r e | F r T u T | F r T u r | F r T u u | F r T u e | F r T u F | F r T u a | F r T u l | F r T u s | F r T u e | F r T e T | F r T e r | F r T e u | F r T e e | F r T e F | F r T e a | F r T e l | F r T e s | F r T e e | F r T F T | F r T F r | F r T F u | F r T F e | F r T F F | F r T F a | F r T F l | F r T F s | F r T F e | F r T a T | F r T a r | F r T a u | F r T a e | F r T a F | F r T a a | F r T a l | F r T a s | F r T a e | F r T l T | F r T l r | F r T l u | F r T l e | F r T l F | F r T l a | F r T l l | F r T l s | F r T l e | F r T s T | F r T s r | F r T s u | F r T s e | F r T s F | F r T s a | F r T s l | F r T s s | F r T s e | F r T e T | F r T e r | F r T e u | F r T e e | F r T e F | F r T e a | F r T e l | F r T e s | F r T e e | F r r T T | F r r T r | F r r T u | F r r T e | F r r T F | F r r T a | F r r T l | F r r T s | F r r T e | F r r r T | F r r r r | F r r r u | F r r r e | F r r r F | F r r r a | F r r r l | F r r r s | F r r r e | F r r u T | F r r u r | F r r u u | F r r u e | F r r u F | F r r u a | F r r u l | F r r u s | F r r u e | F r r e T | F r r e r | F r r e u | F r r e e | F r r e F | F r r e a | F r r e l | F r r e s | F r r e e | F r r F T | F r r F r | F r r F u | F r r F e | F r r F F | F r r F a | F r r F l | F r r F s | F r r F e | F r r a T | F r r a r | F r r a u | F r r a e | F r r a F | F r r a a | F r r a l | F r r a s | F r r a e | F r r l T | F r r l r | F r r l u | F r r l e | F r r l F | F r r l a | F r r l l | F r r l s | F r r l e | F r r s T | F r r s r | F r r s u | F r r s e | F r r s F | F r r s a | F r r s l | F r r s s | F r r s e | F r r e T | F r r e r | F r r e u | F r r e e | F r r e F | F r r e a | F r r e l | F r r e s | F r r e e | F r u T T | F r u T r | F r u T u | F r u T e | F r u T F | F r u T a | F r u T l | F r u T s | F r u T e | F r u r T | F r u r r | F r u r u | F r u r e | F r u r F | F r u r a | F r u r l | F r u r s | F r u r e | F r u u T | F r u u r | F r u u u | F r u u e | F r u u F | F r u u a | F r u u l | F r u u s | F r u u e | F r u e T | F r u e r | F r u e u | F r u e e | F r u e F | F r u e a | F r u e l | F r u e s | F r u e e | F r u F T | F r u F r | F r u F u | F r u F e | F r u F F | F r u F a | F r u F l | F r u F s | F r u F e | F r u a T | F r u a r | F r u a u | F r u a e | F r u a F | F r u a a | F r u a l | F r u a s | F r u a e | F r u l T | F r u l r | F r u l u | F r u l e | F r u l F | F r u l a | F r u l l | F r u l s | F r u l e | F r u s T | F r u s r | F r u s u | F r u s e | F r u s F | F r u s a | F r u s l | F r u s s | F r u s e | F r u e T | F r u e r | F r u e u | F r u e e | F r u e F | F r u e a | F r u e l | F r u e s | F r u e e | F r e T T | F r e T r | F r e T u | F r e T e | F r e T F | F r e T a | F r e T l | F r e T s | F r e T e | F r e r T | F r e r r | F r e r u | F r e r e | F r e r F | F r e r a | F r e r l | F r e r s | F r e r e | F r e u T | F r e u r | F r e u u | F r e u e | F r e u F | F r e u a | F r e u l | F r e u s | F r e u e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r e F T | F r e F r | F r e F u | F r e F e | F r e F F | F r e F a | F r e F l | F r e F s | F r e F e | F r e a T | F r e a r | F r e a u | F r e a e | F r e a F | F r e a a | F r e a l | F r e a s | F r e a e | F r e l T | F r e l r | F r e l u | F r e l e | F r e l F | F r e l a | F r e l l | F r e l s | F r e l e | F r e s T | F r e s r | F r e s u | F r e s e | F r e s F | F r e s a | F r e s l | F r e s s | F r e s e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r F T T | F r F T r | F r F T u | F r F T e | F r F T F | F r F T a | F r F T l | F r F T s | F r F T e | F r F r T | F r F r r | F r F r u | F r F r e | F r F r F | F r F r a | F r F r l | F r F r s | F r F r e | F r F u T | F r F u r | F r F u u | F r F u e | F r F u F | F r F u a | F r F u l | F r F u s | F r F u e | F r F e T | F r F e r | F r F e u | F r F e e | F r F e F | F r F e a | F r F e l | F r F e s | F r F e e | F r F F T | F r F F r | F r F F u | F r F F e | F r F F F | F r F F a | F r F F l | F r F F s | F r F F e | F r F a T | F r F a r | F r F a u | F r F a e | F r F a F | F r F a a | F r F a l | F r F a s | F r F a e | F r F l T | F r F l r | F r F l u | F r F l e | F r F l F | F r F l a | F r F l l | F r F l s | F r F l e | F r F s T | F r F s r | F r F s u | F r F s e | F r F s F | F r F s a | F r F s l | F r F s s | F r F s e | F r F e T | F r F e r | F r F e u | F r F e e | F r F e F | F r F e a | F r F e l | F r F e s | F r F e e | F r a T T | F r a T r | F r a T u | F r a T e | F r a T F | F r a T a | F r a T l | F r a T s | F r a T e | F r a r T | F r a r r | F r a r u | F r a r e | F r a r F | F r a r a | F r a r l | F r a r s | F r a r e | F r a u T | F r a u r | F r a u u | F r a u e | F r a u F | F r a u a | F r a u l | F r a u s | F r a u e | F r a e T | F r a e r | F r a e u | F r a e e | F r a e F | F r a e a | F r a e l | F r a e s | F r a e e | F r a F T | F r a F r | F r a F u | F r a F e | F r a F F | F r a F a | F r a F l | F r a F s | F r a F e | F r a a T | F r a a r | F r a a u | F r a a e | F r a a F | F r a a a | F r a a l | F r a a s | F r a a e | F r a l T | F r a l r | F r a l u | F r a l e | F r a l F | F r a l a | F r a l l | F r a l s | F r a l e | F r a s T | F r a s r | F r a s u | F r a s e | F r a s F | F r a s a | F r a s l | F r a s s | F r a s e | F r a e T | F r a e r | F r a e u | F r a e e | F r a e F | F r a e a | F r a e l | F r a e s | F r a e e | F r l T T | F r l T r | F r l T u | F r l T e | F r l T F | F r l T a | F r l T l | F r l T s | F r l T e | F r l r T | F r l r r | F r l r u | F r l r e | F r l r F | F r l r a | F r l r l | F r l r s | F r l r e | F r l u T | F r l u r | F r l u u | F r l u e | F r l u F | F r l u a | F r l u l | F r l u s | F r l u e | F r l e T | F r l e r | F r l e u | F r l e e | F r l e F | F r l e a | F r l e l | F r l e s | F r l e e | F r l F T | F r l F r | F r l F u | F r l F e | F r l F F | F r l F a | F r l F l | F r l F s | F r l F e | F r l a T | F r l a r | F r l a u | F r l a e | F r l a F | F r l a a | F r l a l | F r l a s | F r l a e | F r l l T | F r l l r | F r l l u | F r l l e | F r l l F | F r l l a | F r l l l | F r l l s | F r l l e | F r l s T | F r l s r | F r l s u | F r l s e | F r l s F | F r l s a | F r l s l | F r l s s | F r l s e | F r l e T | F r l e r | F r l e u | F r l e e | F r l e F | F r l e a | F r l e l | F r l e s | F r l e e | F r s T T | F r s T r | F r s T u | F r s T e | F r s T F | F r s T a | F r s T l | F r s T s | F r s T e | F r s r T | F r s r r | F r s r u | F r s r e | F r s r F | F r s r a | F r s r l | F r s r s | F r s r e | F r s u T | F r s u r | F r s u u | F r s u e | F r s u F | F r s u a | F r s u l | F r s u s | F r s u e | F r s e T | F r s e r | F r s e u | F r s e e | F r s e F | F r s e a | F r s e l | F r s e s | F r s e e | F r s F T | F r s F r | F r s F u | F r s F e | F r s F F | F r s F a | F r s F l | F r s F s | F r s F e | F r s a T | F r s a r | F r s a u | F r s a e | F r s a F | F r s a a | F r s a l | F r s a s | F r s a e | F r s l T | F r s l r | F r s l u | F r s l e | F r s l F | F r s l a | F r s l l | F r s l s | F r s l e | F r s s T | F r s s r | F r s s u | F r s s e | F r s s F | F r s s a | F r s s l | F r s s s | F r s s e | F r s e T | F r s e r | F r s e u | F r s e e | F r s e F | F r s e a | F r s e l | F r s e s | F r s e e | F r e T T | F r e T r | F r e T u | F r e T e | F r e T F | F r e T a | F r e T l | F r e T s | F r e T e | F r e r T | F r e r r | F r e r u | F r e r e | F r e r F | F r e r a | F r e r l | F r e r s | F r e r e | F r e u T | F r e u r | F r e u u | F r e u e | F r e u F | F r e u a | F r e u l | F r e u s | F r e u e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r e F T | F r e F r | F r e F u | F r e F e | F r e F F | F r e F a | F r e F l | F r e F s | F r e F e | F r e a T | F r e a r | F r e a u | F r e a e | F r e a F | F r e a a | F r e a l | F r e a s | F r e a e | F r e l T | F r e l r | F r e l u | F r e l e | F r e l F | F r e l a | F r e l l | F r e l s | F r e l e | F r e s T | F r e s r | F r e s u | F r e s e | F r e s F | F r e s a | F r e s l | F r e s s | F r e s e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F u T T T | F u T T r | F u T T u | F u T T e | F u T T F | F u T T a | F u T T l | F u T T s | F u T T e | F u T r T | F u T r r | F u T r u | F u T r e | F u T r F | F u T r a | F u T r l | F u T r s | F u T r e | F u T u T | F u T u r | F u T u u | F u T u e | F u T u F | F u T u a | F u T u l | F u T u s | F u T u e | F u T e T | F u T e r | F u T e u | F u T e e | F u T e F | F u T e a | F u T e l | F u T e s | F u T e e | F u T F T | F u T F r | F u T F u | F u T F e | F u T F F | F u T F a | F u T F l | F u T F s | F u T F e | F u T a T | F u T a r | F u T a u | F u T a e | F u T a F | F u T a a | F u T a l | F u T a s | F u T a e | F u T l T | F u T l r | F u T l u | F u T l e | F u T l F | F u T l a | F u T l l | F u T l s | F u T l e | F u T s T | F u T s r | F u T s u | F u T s e | F u T s F | F u T s a | F u T s l | F u T s s | F u T s e | F u T e T | F u T e r | F u T e u | F u T e e | F u T e F | F u T e a | F u T e l | F u T e s | F u T e e | F u r T T | F u r T r | F u r T u | F u r T e | F u r T F | F u r T a | F u r T l | F u r T s | F u r T e | F u r r T | F u r r r | F u r r u | F u r r e | F u r r F | F u r r a | F u r r l | F u r r s | F u r r e | F u r u T | F u r u r | F u r u u | F u r u e | F u r u F | F u r u a | F u r u l | F u r u s | F u r u e | F u r e T | F u r e r | F u r e u | F u r e e | F u r e F | F u r e a | F u r e l | F u r e s | F u r e e | F u r F T | F u r F r | F u r F u | F u r F e | F u r F F | F u r F a | F u r F l | F u r F s | F u r F e | F u r a T | F u r a r | F u r a u | F u r a e | F u r a F | F u r a a | F u r a l | F u r a s | F u r a e | F u r l T | F u r l r | F u r l u | F u r l e | F u r l F | F u r l a | F u r l l | F u r l s | F u r l e | F u r s T | F u r s r | F u r s u | F u r s e | F u r s F | F u r s a | F u r s l | F u r s s | F u r s e | F u r e T | F u r e r | F u r e u | F u r e e | F u r e F | F u r e a | F u r e l | F u r e s | F u r e e | F u u T T | F u u T r | F u u T u | F u u T e | F u u T F | F u u T a | F u u T l | F u u T s | F u u T e | F u u r T | F u u r r | F u u r u | F u u r e | F u u r F | F u u r a | F u u r l | F u u r s | F u u r e | F u u u T | F u u u r | F u u u u | F u u u e | F u u u F | F u u u a | F u u u l | F u u u s | F u u u e | F u u e T | F u u e r | F u u e u | F u u e e | F u u e F | F u u e a | F u u e l | F u u e s | F u u e e | F u u F T | F u u F r | F u u F u | F u u F e | F u u F F | F u u F a | F u u F l | F u u F s | F u u F e | F u u a T | F u u a r | F u u a u | F u u a e | F u u a F | F u u a a | F u u a l | F u u a s | F u u a e | F u u l T | F u u l r | F u u l u | F u u l e | F u u l F | F u u l a | F u u l l | F u u l s | F u u l e | F u u s T | F u u s r | F u u s u | F u u s e | F u u s F | F u u s a | F u u s l | F u u s s | F u u s e | F u u e T | F u u e r | F u u e u | F u u e e | F u u e F | F u u e a | F u u e l | F u u e s | F u u e e | F u e T T | F u e T r | F u e T u | F u e T e | F u e T F | F u e T a | F u e T l | F u e T s | F u e T e | F u e r T | F u e r r | F u e r u | F u e r e | F u e r F | F u e r a | F u e r l | F u e r s | F u e r e | F u e u T | F u e u r | F u e u u | F u e u e | F u e u F | F u e u a | F u e u l | F u e u s | F u e u e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u e F T | F u e F r | F u e F u | F u e F e | F u e F F | F u e F a | F u e F l | F u e F s | F u e F e | F u e a T | F u e a r | F u e a u | F u e a e | F u e a F | F u e a a | F u e a l | F u e a s | F u e a e | F u e l T | F u e l r | F u e l u | F u e l e | F u e l F | F u e l a | F u e l l | F u e l s | F u e l e | F u e s T | F u e s r | F u e s u | F u e s e | F u e s F | F u e s a | F u e s l | F u e s s | F u e s e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u F T T | F u F T r | F u F T u | F u F T e | F u F T F | F u F T a | F u F T l | F u F T s | F u F T e | F u F r T | F u F r r | F u F r u | F u F r e | F u F r F | F u F r a | F u F r l | F u F r s | F u F r e | F u F u T | F u F u r | F u F u u | F u F u e | F u F u F | F u F u a | F u F u l | F u F u s | F u F u e | F u F e T | F u F e r | F u F e u | F u F e e | F u F e F | F u F e a | F u F e l | F u F e s | F u F e e | F u F F T | F u F F r | F u F F u | F u F F e | F u F F F | F u F F a | F u F F l | F u F F s | F u F F e | F u F a T | F u F a r | F u F a u | F u F a e | F u F a F | F u F a a | F u F a l | F u F a s | F u F a e | F u F l T | F u F l r | F u F l u | F u F l e | F u F l F | F u F l a | F u F l l | F u F l s | F u F l e | F u F s T | F u F s r | F u F s u | F u F s e | F u F s F | F u F s a | F u F s l | F u F s s | F u F s e | F u F e T | F u F e r | F u F e u | F u F e e | F u F e F | F u F e a | F u F e l | F u F e s | F u F e e | F u a T T | F u a T r | F u a T u | F u a T e | F u a T F | F u a T a | F u a T l | F u a T s | F u a T e | F u a r T | F u a r r | F u a r u | F u a r e | F u a r F | F u a r a | F u a r l | F u a r s | F u a r e | F u a u T | F u a u r | F u a u u | F u a u e | F u a u F | F u a u a | F u a u l | F u a u s | F u a u e | F u a e T | F u a e r | F u a e u | F u a e e | F u a e F | F u a e a | F u a e l | F u a e s | F u a e e | F u a F T | F u a F r | F u a F u | F u a F e | F u a F F | F u a F a | F u a F l | F u a F s | F u a F e | F u a a T | F u a a r | F u a a u | F u a a e | F u a a F | F u a a a | F u a a l | F u a a s | F u a a e | F u a l T | F u a l r | F u a l u | F u a l e | F u a l F | F u a l a | F u a l l | F u a l s | F u a l e | F u a s T | F u a s r | F u a s u | F u a s e | F u a s F | F u a s a | F u a s l | F u a s s | F u a s e | F u a e T | F u a e r | F u a e u | F u a e e | F u a e F | F u a e a | F u a e l | F u a e s | F u a e e | F u l T T | F u l T r | F u l T u | F u l T e | F u l T F | F u l T a | F u l T l | F u l T s | F u l T e | F u l r T | F u l r r | F u l r u | F u l r e | F u l r F | F u l r a | F u l r l | F u l r s | F u l r e | F u l u T | F u l u r | F u l u u | F u l u e | F u l u F | F u l u a | F u l u l | F u l u s | F u l u e | F u l e T | F u l e r | F u l e u | F u l e e | F u l e F | F u l e a | F u l e l | F u l e s | F u l e e | F u l F T | F u l F r | F u l F u | F u l F e | F u l F F | F u l F a | F u l F l | F u l F s | F u l F e | F u l a T | F u l a r | F u l a u | F u l a e | F u l a F | F u l a a | F u l a l | F u l a s | F u l a e | F u l l T | F u l l r | F u l l u | F u l l e | F u l l F | F u l l a | F u l l l | F u l l s | F u l l e | F u l s T | F u l s r | F u l s u | F u l s e | F u l s F | F u l s a | F u l s l | F u l s s | F u l s e | F u l e T | F u l e r | F u l e u | F u l e e | F u l e F | F u l e a | F u l e l | F u l e s | F u l e e | F u s T T | F u s T r | F u s T u | F u s T e | F u s T F | F u s T a | F u s T l | F u s T s | F u s T e | F u s r T | F u s r r | F u s r u | F u s r e | F u s r F | F u s r a | F u s r l | F u s r s | F u s r e | F u s u T | F u s u r | F u s u u | F u s u e | F u s u F | F u s u a | F u s u l | F u s u s | F u s u e | F u s e T | F u s e r | F u s e u | F u s e e | F u s e F | F u s e a | F u s e l | F u s e s | F u s e e | F u s F T | F u s F r | F u s F u | F u s F e | F u s F F | F u s F a | F u s F l | F u s F s | F u s F e | F u s a T | F u s a r | F u s a u | F u s a e | F u s a F | F u s a a | F u s a l | F u s a s | F u s a e | F u s l T | F u s l r | F u s l u | F u s l e | F u s l F | F u s l a | F u s l l | F u s l s | F u s l e | F u s s T | F u s s r | F u s s u | F u s s e | F u s s F | F u s s a | F u s s l | F u s s s | F u s s e | F u s e T | F u s e r | F u s e u | F u s e e | F u s e F | F u s e a | F u s e l | F u s e s | F u s e e | F u e T T | F u e T r | F u e T u | F u e T e | F u e T F | F u e T a | F u e T l | F u e T s | F u e T e | F u e r T | F u e r r | F u e r u | F u e r e | F u e r F | F u e r a | F u e r l | F u e r s | F u e r e | F u e u T | F u e u r | F u e u u | F u e u e | F u e u F | F u e u a | F u e u l | F u e u s | F u e u e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u e F T | F u e F r | F u e F u | F u e F e | F u e F F | F u e F a | F u e F l | F u e F s | F u e F e | F u e a T | F u e a r | F u e a u | F u e a e | F u e a F | F u e a a | F u e a l | F u e a s | F u e a e | F u e l T | F u e l r | F u e l u | F u e l e | F u e l F | F u e l a | F u e l l | F u e l s | F u e l e | F u e s T | F u e s r | F u e s u | F u e s e | F u e s F | F u e s a | F u e s l | F u e s s | F u e s e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F e T T T | F e T T r | F e T T u | F e T T e | F e T T F | F e T T a | F e T T l | F e T T s | F e T T e | F e T r T | F e T r r | F e T r u | F e T r e | F e T r F | F e T r a | F e T r l | F e T r s | F e T r e | F e T u T | F e T u r | F e T u u | F e T u e | F e T u F | F e T u a | F e T u l | F e T u s | F e T u e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e T F T | F e T F r | F e T F u | F e T F e | F e T F F | F e T F a | F e T F l | F e T F s | F e T F e | F e T a T | F e T a r | F e T a u | F e T a e | F e T a F | F e T a a | F e T a l | F e T a s | F e T a e | F e T l T | F e T l r | F e T l u | F e T l e | F e T l F | F e T l a | F e T l l | F e T l s | F e T l e | F e T s T | F e T s r | F e T s u | F e T s e | F e T s F | F e T s a | F e T s l | F e T s s | F e T s e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e r T T | F e r T r | F e r T u | F e r T e | F e r T F | F e r T a | F e r T l | F e r T s | F e r T e | F e r r T | F e r r r | F e r r u | F e r r e | F e r r F | F e r r a | F e r r l | F e r r s | F e r r e | F e r u T | F e r u r | F e r u u | F e r u e | F e r u F | F e r u a | F e r u l | F e r u s | F e r u e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e r F T | F e r F r | F e r F u | F e r F e | F e r F F | F e r F a | F e r F l | F e r F s | F e r F e | F e r a T | F e r a r | F e r a u | F e r a e | F e r a F | F e r a a | F e r a l | F e r a s | F e r a e | F e r l T | F e r l r | F e r l u | F e r l e | F e r l F | F e r l a | F e r l l | F e r l s | F e r l e | F e r s T | F e r s r | F e r s u | F e r s e | F e r s F | F e r s a | F e r s l | F e r s s | F e r s e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e u T T | F e u T r | F e u T u | F e u T e | F e u T F | F e u T a | F e u T l | F e u T s | F e u T e | F e u r T | F e u r r | F e u r u | F e u r e | F e u r F | F e u r a | F e u r l | F e u r s | F e u r e | F e u u T | F e u u r | F e u u u | F e u u e | F e u u F | F e u u a | F e u u l | F e u u s | F e u u e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e u F T | F e u F r | F e u F u | F e u F e | F e u F F | F e u F a | F e u F l | F e u F s | F e u F e | F e u a T | F e u a r | F e u a u | F e u a e | F e u a F | F e u a a | F e u a l | F e u a s | F e u a e | F e u l T | F e u l r | F e u l u | F e u l e | F e u l F | F e u l a | F e u l l | F e u l s | F e u l e | F e u s T | F e u s r | F e u s u | F e u s e | F e u s F | F e u s a | F e u s l | F e u s s | F e u s e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e F T T | F e F T r | F e F T u | F e F T e | F e F T F | F e F T a | F e F T l | F e F T s | F e F T e | F e F r T | F e F r r | F e F r u | F e F r e | F e F r F | F e F r a | F e F r l | F e F r s | F e F r e | F e F u T | F e F u r | F e F u u | F e F u e | F e F u F | F e F u a | F e F u l | F e F u s | F e F u e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e F F T | F e F F r | F e F F u | F e F F e | F e F F F | F e F F a | F e F F l | F e F F s | F e F F e | F e F a T | F e F a r | F e F a u | F e F a e | F e F a F | F e F a a | F e F a l | F e F a s | F e F a e | F e F l T | F e F l r | F e F l u | F e F l e | F e F l F | F e F l a | F e F l l | F e F l s | F e F l e | F e F s T | F e F s r | F e F s u | F e F s e | F e F s F | F e F s a | F e F s l | F e F s s | F e F s e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e a T T | F e a T r | F e a T u | F e a T e | F e a T F | F e a T a | F e a T l | F e a T s | F e a T e | F e a r T | F e a r r | F e a r u | F e a r e | F e a r F | F e a r a | F e a r l | F e a r s | F e a r e | F e a u T | F e a u r | F e a u u | F e a u e | F e a u F | F e a u a | F e a u l | F e a u s | F e a u e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e a F T | F e a F r | F e a F u | F e a F e | F e a F F | F e a F a | F e a F l | F e a F s | F e a F e | F e a a T | F e a a r | F e a a u | F e a a e | F e a a F | F e a a a | F e a a l | F e a a s | F e a a e | F e a l T | F e a l r | F e a l u | F e a l e | F e a l F | F e a l a | F e a l l | F e a l s | F e a l e | F e a s T | F e a s r | F e a s u | F e a s e | F e a s F | F e a s a | F e a s l | F e a s s | F e a s e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e l T T | F e l T r | F e l T u | F e l T e | F e l T F | F e l T a | F e l T l | F e l T s | F e l T e | F e l r T | F e l r r | F e l r u | F e l r e | F e l r F | F e l r a | F e l r l | F e l r s | F e l r e | F e l u T | F e l u r | F e l u u | F e l u e | F e l u F | F e l u a | F e l u l | F e l u s | F e l u e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e l F T | F e l F r | F e l F u | F e l F e | F e l F F | F e l F a | F e l F l | F e l F s | F e l F e | F e l a T | F e l a r | F e l a u | F e l a e | F e l a F | F e l a a | F e l a l | F e l a s | F e l a e | F e l l T | F e l l r | F e l l u | F e l l e | F e l l F | F e l l a | F e l l l | F e l l s | F e l l e | F e l s T | F e l s r | F e l s u | F e l s e | F e l s F | F e l s a | F e l s l | F e l s s | F e l s e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e s T T | F e s T r | F e s T u | F e s T e | F e s T F | F e s T a | F e s T l | F e s T s | F e s T e | F e s r T | F e s r r | F e s r u | F e s r e | F e s r F | F e s r a | F e s r l | F e s r s | F e s r e | F e s u T | F e s u r | F e s u u | F e s u e | F e s u F | F e s u a | F e s u l | F e s u s | F e s u e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e s F T | F e s F r | F e s F u | F e s F e | F e s F F | F e s F a | F e s F l | F e s F s | F e s F e | F e s a T | F e s a r | F e s a u | F e s a e | F e s a F | F e s a a | F e s a l | F e s a s | F e s a e | F e s l T | F e s l r | F e s l u | F e s l e | F e s l F | F e s l a | F e s l l | F e s l s | F e s l e | F e s s T | F e s s r | F e s s u | F e s s e | F e s s F | F e s s a | F e s s l | F e s s s | F e s s e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F F T T T | F F T T r | F F T T u | F F T T e | F F T T F | F F T T a | F F T T l | F F T T s | F F T T e | F F T r T | F F T r r | F F T r u | F F T r e | F F T r F | F F T r a | F F T r l | F F T r s | F F T r e | F F T u T | F F T u r | F F T u u | F F T u e | F F T u F | F F T u a | F F T u l | F F T u s | F F T u e | F F T e T | F F T e r | F F T e u | F F T e e | F F T e F | F F T e a | F F T e l | F F T e s | F F T e e | F F T F T | F F T F r | F F T F u | F F T F e | F F T F F | F F T F a | F F T F l | F F T F s | F F T F e | F F T a T | F F T a r | F F T a u | F F T a e | F F T a F | F F T a a | F F T a l | F F T a s | F F T a e | F F T l T | F F T l r | F F T l u | F F T l e | F F T l F | F F T l a | F F T l l | F F T l s | F F T l e | F F T s T | F F T s r | F F T s u | F F T s e | F F T s F | F F T s a | F F T s l | F F T s s | F F T s e | F F T e T | F F T e r | F F T e u | F F T e e | F F T e F | F F T e a | F F T e l | F F T e s | F F T e e | F F r T T | F F r T r | F F r T u | F F r T e | F F r T F | F F r T a | F F r T l | F F r T s | F F r T e | F F r r T | F F r r r | F F r r u | F F r r e | F F r r F | F F r r a | F F r r l | F F r r s | F F r r e | F F r u T | F F r u r | F F r u u | F F r u e | F F r u F | F F r u a | F F r u l | F F r u s | F F r u e | F F r e T | F F r e r | F F r e u | F F r e e | F F r e F | F F r e a | F F r e l | F F r e s | F F r e e | F F r F T | F F r F r | F F r F u | F F r F e | F F r F F | F F r F a | F F r F l | F F r F s | F F r F e | F F r a T | F F r a r | F F r a u | F F r a e | F F r a F | F F r a a | F F r a l | F F r a s | F F r a e | F F r l T | F F r l r | F F r l u | F F r l e | F F r l F | F F r l a | F F r l l | F F r l s | F F r l e | F F r s T | F F r s r | F F r s u | F F r s e | F F r s F | F F r s a | F F r s l | F F r s s | F F r s e | F F r e T | F F r e r | F F r e u | F F r e e | F F r e F | F F r e a | F F r e l | F F r e s | F F r e e | F F u T T | F F u T r | F F u T u | F F u T e | F F u T F | F F u T a | F F u T l | F F u T s | F F u T e | F F u r T | F F u r r | F F u r u | F F u r e | F F u r F | F F u r a | F F u r l | F F u r s | F F u r e | F F u u T | F F u u r | F F u u u | F F u u e | F F u u F | F F u u a | F F u u l | F F u u s | F F u u e | F F u e T | F F u e r | F F u e u | F F u e e | F F u e F | F F u e a | F F u e l | F F u e s | F F u e e | F F u F T | F F u F r | F F u F u | F F u F e | F F u F F | F F u F a | F F u F l | F F u F s | F F u F e | F F u a T | F F u a r | F F u a u | F F u a e | F F u a F | F F u a a | F F u a l | F F u a s | F F u a e | F F u l T | F F u l r | F F u l u | F F u l e | F F u l F | F F u l a | F F u l l | F F u l s | F F u l e | F F u s T | F F u s r | F F u s u | F F u s e | F F u s F | F F u s a | F F u s l | F F u s s | F F u s e | F F u e T | F F u e r | F F u e u | F F u e e | F F u e F | F F u e a | F F u e l | F F u e s | F F u e e | F F e T T | F F e T r | F F e T u | F F e T e | F F e T F | F F e T a | F F e T l | F F e T s | F F e T e | F F e r T | F F e r r | F F e r u | F F e r e | F F e r F | F F e r a | F F e r l | F F e r s | F F e r e | F F e u T | F F e u r | F F e u u | F F e u e | F F e u F | F F e u a | F F e u l | F F e u s | F F e u e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F e F T | F F e F r | F F e F u | F F e F e | F F e F F | F F e F a | F F e F l | F F e F s | F F e F e | F F e a T | F F e a r | F F e a u | F F e a e | F F e a F | F F e a a | F F e a l | F F e a s | F F e a e | F F e l T | F F e l r | F F e l u | F F e l e | F F e l F | F F e l a | F F e l l | F F e l s | F F e l e | F F e s T | F F e s r | F F e s u | F F e s e | F F e s F | F F e s a | F F e s l | F F e s s | F F e s e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F F T T | F F F T r | F F F T u | F F F T e | F F F T F | F F F T a | F F F T l | F F F T s | F F F T e | F F F r T | F F F r r | F F F r u | F F F r e | F F F r F | F F F r a | F F F r l | F F F r s | F F F r e | F F F u T | F F F u r | F F F u u | F F F u e | F F F u F | F F F u a | F F F u l | F F F u s | F F F u e | F F F e T | F F F e r | F F F e u | F F F e e | F F F e F | F F F e a | F F F e l | F F F e s | F F F e e | F F F F T | F F F F r | F F F F u | F F F F e | F F F F F | F F F F a | F F F F l | F F F F s | F F F F e | F F F a T | F F F a r | F F F a u | F F F a e | F F F a F | F F F a a | F F F a l | F F F a s | F F F a e | F F F l T | F F F l r | F F F l u | F F F l e | F F F l F | F F F l a | F F F l l | F F F l s | F F F l e | F F F s T | F F F s r | F F F s u | F F F s e | F F F s F | F F F s a | F F F s l | F F F s s | F F F s e | F F F e T | F F F e r | F F F e u | F F F e e | F F F e F | F F F e a | F F F e l | F F F e s | F F F e e | F F a T T | F F a T r | F F a T u | F F a T e | F F a T F | F F a T a | F F a T l | F F a T s | F F a T e | F F a r T | F F a r r | F F a r u | F F a r e | F F a r F | F F a r a | F F a r l | F F a r s | F F a r e | F F a u T | F F a u r | F F a u u | F F a u e | F F a u F | F F a u a | F F a u l | F F a u s | F F a u e | F F a e T | F F a e r | F F a e u | F F a e e | F F a e F | F F a e a | F F a e l | F F a e s | F F a e e | F F a F T | F F a F r | F F a F u | F F a F e | F F a F F | F F a F a | F F a F l | F F a F s | F F a F e | F F a a T | F F a a r | F F a a u | F F a a e | F F a a F | F F a a a | F F a a l | F F a a s | F F a a e | F F a l T | F F a l r | F F a l u | F F a l e | F F a l F | F F a l a | F F a l l | F F a l s | F F a l e | F F a s T | F F a s r | F F a s u | F F a s e | F F a s F | F F a s a | F F a s l | F F a s s | F F a s e | F F a e T | F F a e r | F F a e u | F F a e e | F F a e F | F F a e a | F F a e l | F F a e s | F F a e e | F F l T T | F F l T r | F F l T u | F F l T e | F F l T F | F F l T a | F F l T l | F F l T s | F F l T e | F F l r T | F F l r r | F F l r u | F F l r e | F F l r F | F F l r a | F F l r l | F F l r s | F F l r e | F F l u T | F F l u r | F F l u u | F F l u e | F F l u F | F F l u a | F F l u l | F F l u s | F F l u e | F F l e T | F F l e r | F F l e u | F F l e e | F F l e F | F F l e a | F F l e l | F F l e s | F F l e e | F F l F T | F F l F r | F F l F u | F F l F e | F F l F F | F F l F a | F F l F l | F F l F s | F F l F e | F F l a T | F F l a r | F F l a u | F F l a e | F F l a F | F F l a a | F F l a l | F F l a s | F F l a e | F F l l T | F F l l r | F F l l u | F F l l e | F F l l F | F F l l a | F F l l l | F F l l s | F F l l e | F F l s T | F F l s r | F F l s u | F F l s e | F F l s F | F F l s a | F F l s l | F F l s s | F F l s e | F F l e T | F F l e r | F F l e u | F F l e e | F F l e F | F F l e a | F F l e l | F F l e s | F F l e e | F F s T T | F F s T r | F F s T u | F F s T e | F F s T F | F F s T a | F F s T l | F F s T s | F F s T e | F F s r T | F F s r r | F F s r u | F F s r e | F F s r F | F F s r a | F F s r l | F F s r s | F F s r e | F F s u T | F F s u r | F F s u u | F F s u e | F F s u F | F F s u a | F F s u l | F F s u s | F F s u e | F F s e T | F F s e r | F F s e u | F F s e e | F F s e F | F F s e a | F F s e l | F F s e s | F F s e e | F F s F T | F F s F r | F F s F u | F F s F e | F F s F F | F F s F a | F F s F l | F F s F s | F F s F e | F F s a T | F F s a r | F F s a u | F F s a e | F F s a F | F F s a a | F F s a l | F F s a s | F F s a e | F F s l T | F F s l r | F F s l u | F F s l e | F F s l F | F F s l a | F F s l l | F F s l s | F F s l e | F F s s T | F F s s r | F F s s u | F F s s e | F F s s F | F F s s a | F F s s l | F F s s s | F F s s e | F F s e T | F F s e r | F F s e u | F F s e e | F F s e F | F F s e a | F F s e l | F F s e s | F F s e e | F F e T T | F F e T r | F F e T u | F F e T e | F F e T F | F F e T a | F F e T l | F F e T s | F F e T e | F F e r T | F F e r r | F F e r u | F F e r e | F F e r F | F F e r a | F F e r l | F F e r s | F F e r e | F F e u T | F F e u r | F F e u u | F F e u e | F F e u F | F F e u a | F F e u l | F F e u s | F F e u e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F e F T | F F e F r | F F e F u | F F e F e | F F e F F | F F e F a | F F e F l | F F e F s | F F e F e | F F e a T | F F e a r | F F e a u | F F e a e | F F e a F | F F e a a | F F e a l | F F e a s | F F e a e | F F e l T | F F e l r | F F e l u | F F e l e | F F e l F | F F e l a | F F e l l | F F e l s | F F e l e | F F e s T | F F e s r | F F e s u | F F e s e | F F e s F | F F e s a | F F e s l | F F e s s | F F e s e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F a T T T | F a T T r | F a T T u | F a T T e | F a T T F | F a T T a | F a T T l | F a T T s | F a T T e | F a T r T | F a T r r | F a T r u | F a T r e | F a T r F | F a T r a | F a T r l | F a T r s | F a T r e | F a T u T | F a T u r | F a T u u | F a T u e | F a T u F | F a T u a | F a T u l | F a T u s | F a T u e | F a T e T | F a T e r | F a T e u | F a T e e | F a T e F | F a T e a | F a T e l | F a T e s | F a T e e | F a T F T | F a T F r | F a T F u | F a T F e | F a T F F | F a T F a | F a T F l | F a T F s | F a T F e | F a T a T | F a T a r | F a T a u | F a T a e | F a T a F | F a T a a | F a T a l | F a T a s | F a T a e | F a T l T | F a T l r | F a T l u | F a T l e | F a T l F | F a T l a | F a T l l | F a T l s | F a T l e | F a T s T | F a T s r | F a T s u | F a T s e | F a T s F | F a T s a | F a T s l | F a T s s | F a T s e | F a T e T | F a T e r | F a T e u | F a T e e | F a T e F | F a T e a | F a T e l | F a T e s | F a T e e | F a r T T | F a r T r | F a r T u | F a r T e | F a r T F | F a r T a | F a r T l | F a r T s | F a r T e | F a r r T | F a r r r | F a r r u | F a r r e | F a r r F | F a r r a | F a r r l | F a r r s | F a r r e | F a r u T | F a r u r | F a r u u | F a r u e | F a r u F | F a r u a | F a r u l | F a r u s | F a r u e | F a r e T | F a r e r | F a r e u | F a r e e | F a r e F | F a r e a | F a r e l | F a r e s | F a r e e | F a r F T | F a r F r | F a r F u | F a r F e | F a r F F | F a r F a | F a r F l | F a r F s | F a r F e | F a r a T | F a r a r | F a r a u | F a r a e | F a r a F | F a r a a | F a r a l | F a r a s | F a r a e | F a r l T | F a r l r | F a r l u | F a r l e | F a r l F | F a r l a | F a r l l | F a r l s | F a r l e | F a r s T | F a r s r | F a r s u | F a r s e | F a r s F | F a r s a | F a r s l | F a r s s | F a r s e | F a r e T | F a r e r | F a r e u | F a r e e | F a r e F | F a r e a | F a r e l | F a r e s | F a r e e | F a u T T | F a u T r | F a u T u | F a u T e | F a u T F | F a u T a | F a u T l | F a u T s | F a u T e | F a u r T | F a u r r | F a u r u | F a u r e | F a u r F | F a u r a | F a u r l | F a u r s | F a u r e | F a u u T | F a u u r | F a u u u | F a u u e | F a u u F | F a u u a | F a u u l | F a u u s | F a u u e | F a u e T | F a u e r | F a u e u | F a u e e | F a u e F | F a u e a | F a u e l | F a u e s | F a u e e | F a u F T | F a u F r | F a u F u | F a u F e | F a u F F | F a u F a | F a u F l | F a u F s | F a u F e | F a u a T | F a u a r | F a u a u | F a u a e | F a u a F | F a u a a | F a u a l | F a u a s | F a u a e | F a u l T | F a u l r | F a u l u | F a u l e | F a u l F | F a u l a | F a u l l | F a u l s | F a u l e | F a u s T | F a u s r | F a u s u | F a u s e | F a u s F | F a u s a | F a u s l | F a u s s | F a u s e | F a u e T | F a u e r | F a u e u | F a u e e | F a u e F | F a u e a | F a u e l | F a u e s | F a u e e | F a e T T | F a e T r | F a e T u | F a e T e | F a e T F | F a e T a | F a e T l | F a e T s | F a e T e | F a e r T | F a e r r | F a e r u | F a e r e | F a e r F | F a e r a | F a e r l | F a e r s | F a e r e | F a e u T | F a e u r | F a e u u | F a e u e | F a e u F | F a e u a | F a e u l | F a e u s | F a e u e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a e F T | F a e F r | F a e F u | F a e F e | F a e F F | F a e F a | F a e F l | F a e F s | F a e F e | F a e a T | F a e a r | F a e a u | F a e a e | F a e a F | F a e a a | F a e a l | F a e a s | F a e a e | F a e l T | F a e l r | F a e l u | F a e l e | F a e l F | F a e l a | F a e l l | F a e l s | F a e l e | F a e s T | F a e s r | F a e s u | F a e s e | F a e s F | F a e s a | F a e s l | F a e s s | F a e s e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a F T T | F a F T r | F a F T u | F a F T e | F a F T F | F a F T a | F a F T l | F a F T s | F a F T e | F a F r T | F a F r r | F a F r u | F a F r e | F a F r F | F a F r a | F a F r l | F a F r s | F a F r e | F a F u T | F a F u r | F a F u u | F a F u e | F a F u F | F a F u a | F a F u l | F a F u s | F a F u e | F a F e T | F a F e r | F a F e u | F a F e e | F a F e F | F a F e a | F a F e l | F a F e s | F a F e e | F a F F T | F a F F r | F a F F u | F a F F e | F a F F F | F a F F a | F a F F l | F a F F s | F a F F e | F a F a T | F a F a r | F a F a u | F a F a e | F a F a F | F a F a a | F a F a l | F a F a s | F a F a e | F a F l T | F a F l r | F a F l u | F a F l e | F a F l F | F a F l a | F a F l l | F a F l s | F a F l e | F a F s T | F a F s r | F a F s u | F a F s e | F a F s F | F a F s a | F a F s l | F a F s s | F a F s e | F a F e T | F a F e r | F a F e u | F a F e e | F a F e F | F a F e a | F a F e l | F a F e s | F a F e e | F a a T T | F a a T r | F a a T u | F a a T e | F a a T F | F a a T a | F a a T l | F a a T s | F a a T e | F a a r T | F a a r r | F a a r u | F a a r e | F a a r F | F a a r a | F a a r l | F a a r s | F a a r e | F a a u T | F a a u r | F a a u u | F a a u e | F a a u F | F a a u a | F a a u l | F a a u s | F a a u e | F a a e T | F a a e r | F a a e u | F a a e e | F a a e F | F a a e a | F a a e l | F a a e s | F a a e e | F a a F T | F a a F r | F a a F u | F a a F e | F a a F F | F a a F a | F a a F l | F a a F s | F a a F e | F a a a T | F a a a r | F a a a u | F a a a e | F a a a F | F a a a a | F a a a l | F a a a s | F a a a e | F a a l T | F a a l r | F a a l u | F a a l e | F a a l F | F a a l a | F a a l l | F a a l s | F a a l e | F a a s T | F a a s r | F a a s u | F a a s e | F a a s F | F a a s a | F a a s l | F a a s s | F a a s e | F a a e T | F a a e r | F a a e u | F a a e e | F a a e F | F a a e a | F a a e l | F a a e s | F a a e e | F a l T T | F a l T r | F a l T u | F a l T e | F a l T F | F a l T a | F a l T l | F a l T s | F a l T e | F a l r T | F a l r r | F a l r u | F a l r e | F a l r F | F a l r a | F a l r l | F a l r s | F a l r e | F a l u T | F a l u r | F a l u u | F a l u e | F a l u F | F a l u a | F a l u l | F a l u s | F a l u e | F a l e T | F a l e r | F a l e u | F a l e e | F a l e F | F a l e a | F a l e l | F a l e s | F a l e e | F a l F T | F a l F r | F a l F u | F a l F e | F a l F F | F a l F a | F a l F l | F a l F s | F a l F e | F a l a T | F a l a r | F a l a u | F a l a e | F a l a F | F a l a a | F a l a l | F a l a s | F a l a e | F a l l T | F a l l r | F a l l u | F a l l e | F a l l F | F a l l a | F a l l l | F a l l s | F a l l e | F a l s T | F a l s r | F a l s u | F a l s e | F a l s F | F a l s a | F a l s l | F a l s s | F a l s e | F a l e T | F a l e r | F a l e u | F a l e e | F a l e F | F a l e a | F a l e l | F a l e s | F a l e e | F a s T T | F a s T r | F a s T u | F a s T e | F a s T F | F a s T a | F a s T l | F a s T s | F a s T e | F a s r T | F a s r r | F a s r u | F a s r e | F a s r F | F a s r a | F a s r l | F a s r s | F a s r e | F a s u T | F a s u r | F a s u u | F a s u e | F a s u F | F a s u a | F a s u l | F a s u s | F a s u e | F a s e T | F a s e r | F a s e u | F a s e e | F a s e F | F a s e a | F a s e l | F a s e s | F a s e e | F a s F T | F a s F r | F a s F u | F a s F e | F a s F F | F a s F a | F a s F l | F a s F s | F a s F e | F a s a T | F a s a r | F a s a u | F a s a e | F a s a F | F a s a a | F a s a l | F a s a s | F a s a e | F a s l T | F a s l r | F a s l u | F a s l e | F a s l F | F a s l a | F a s l l | F a s l s | F a s l e | F a s s T | F a s s r | F a s s u | F a s s e | F a s s F | F a s s a | F a s s l | F a s s s | F a s s e | F a s e T | F a s e r | F a s e u | F a s e e | F a s e F | F a s e a | F a s e l | F a s e s | F a s e e | F a e T T | F a e T r | F a e T u | F a e T e | F a e T F | F a e T a | F a e T l | F a e T s | F a e T e | F a e r T | F a e r r | F a e r u | F a e r e | F a e r F | F a e r a | F a e r l | F a e r s | F a e r e | F a e u T | F a e u r | F a e u u | F a e u e | F a e u F | F a e u a | F a e u l | F a e u s | F a e u e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a e F T | F a e F r | F a e F u | F a e F e | F a e F F | F a e F a | F a e F l | F a e F s | F a e F e | F a e a T | F a e a r | F a e a u | F a e a e | F a e a F | F a e a a | F a e a l | F a e a s | F a e a e | F a e l T | F a e l r | F a e l u | F a e l e | F a e l F | F a e l a | F a e l l | F a e l s | F a e l e | F a e s T | F a e s r | F a e s u | F a e s e | F a e s F | F a e s a | F a e s l | F a e s s | F a e s e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F l T T T | F l T T r | F l T T u | F l T T e | F l T T F | F l T T a | F l T T l | F l T T s | F l T T e | F l T r T | F l T r r | F l T r u | F l T r e | F l T r F | F l T r a | F l T r l | F l T r s | F l T r e | F l T u T | F l T u r | F l T u u | F l T u e | F l T u F | F l T u a | F l T u l | F l T u s | F l T u e | F l T e T | F l T e r | F l T e u | F l T e e | F l T e F | F l T e a | F l T e l | F l T e s | F l T e e | F l T F T | F l T F r | F l T F u | F l T F e | F l T F F | F l T F a | F l T F l | F l T F s | F l T F e | F l T a T | F l T a r | F l T a u | F l T a e | F l T a F | F l T a a | F l T a l | F l T a s | F l T a e | F l T l T | F l T l r | F l T l u | F l T l e | F l T l F | F l T l a | F l T l l | F l T l s | F l T l e | F l T s T | F l T s r | F l T s u | F l T s e | F l T s F | F l T s a | F l T s l | F l T s s | F l T s e | F l T e T | F l T e r | F l T e u | F l T e e | F l T e F | F l T e a | F l T e l | F l T e s | F l T e e | F l r T T | F l r T r | F l r T u | F l r T e | F l r T F | F l r T a | F l r T l | F l r T s | F l r T e | F l r r T | F l r r r | F l r r u | F l r r e | F l r r F | F l r r a | F l r r l | F l r r s | F l r r e | F l r u T | F l r u r | F l r u u | F l r u e | F l r u F | F l r u a | F l r u l | F l r u s | F l r u e | F l r e T | F l r e r | F l r e u | F l r e e | F l r e F | F l r e a | F l r e l | F l r e s | F l r e e | F l r F T | F l r F r | F l r F u | F l r F e | F l r F F | F l r F a | F l r F l | F l r F s | F l r F e | F l r a T | F l r a r | F l r a u | F l r a e | F l r a F | F l r a a | F l r a l | F l r a s | F l r a e | F l r l T | F l r l r | F l r l u | F l r l e | F l r l F | F l r l a | F l r l l | F l r l s | F l r l e | F l r s T | F l r s r | F l r s u | F l r s e | F l r s F | F l r s a | F l r s l | F l r s s | F l r s e | F l r e T | F l r e r | F l r e u | F l r e e | F l r e F | F l r e a | F l r e l | F l r e s | F l r e e | F l u T T | F l u T r | F l u T u | F l u T e | F l u T F | F l u T a | F l u T l | F l u T s | F l u T e | F l u r T | F l u r r | F l u r u | F l u r e | F l u r F | F l u r a | F l u r l | F l u r s | F l u r e | F l u u T | F l u u r | F l u u u | F l u u e | F l u u F | F l u u a | F l u u l | F l u u s | F l u u e | F l u e T | F l u e r | F l u e u | F l u e e | F l u e F | F l u e a | F l u e l | F l u e s | F l u e e | F l u F T | F l u F r | F l u F u | F l u F e | F l u F F | F l u F a | F l u F l | F l u F s | F l u F e | F l u a T | F l u a r | F l u a u | F l u a e | F l u a F | F l u a a | F l u a l | F l u a s | F l u a e | F l u l T | F l u l r | F l u l u | F l u l e | F l u l F | F l u l a | F l u l l | F l u l s | F l u l e | F l u s T | F l u s r | F l u s u | F l u s e | F l u s F | F l u s a | F l u s l | F l u s s | F l u s e | F l u e T | F l u e r | F l u e u | F l u e e | F l u e F | F l u e a | F l u e l | F l u e s | F l u e e | F l e T T | F l e T r | F l e T u | F l e T e | F l e T F | F l e T a | F l e T l | F l e T s | F l e T e | F l e r T | F l e r r | F l e r u | F l e r e | F l e r F | F l e r a | F l e r l | F l e r s | F l e r e | F l e u T | F l e u r | F l e u u | F l e u e | F l e u F | F l e u a | F l e u l | F l e u s | F l e u e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l e F T | F l e F r | F l e F u | F l e F e | F l e F F | F l e F a | F l e F l | F l e F s | F l e F e | F l e a T | F l e a r | F l e a u | F l e a e | F l e a F | F l e a a | F l e a l | F l e a s | F l e a e | F l e l T | F l e l r | F l e l u | F l e l e | F l e l F | F l e l a | F l e l l | F l e l s | F l e l e | F l e s T | F l e s r | F l e s u | F l e s e | F l e s F | F l e s a | F l e s l | F l e s s | F l e s e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l F T T | F l F T r | F l F T u | F l F T e | F l F T F | F l F T a | F l F T l | F l F T s | F l F T e | F l F r T | F l F r r | F l F r u | F l F r e | F l F r F | F l F r a | F l F r l | F l F r s | F l F r e | F l F u T | F l F u r | F l F u u | F l F u e | F l F u F | F l F u a | F l F u l | F l F u s | F l F u e | F l F e T | F l F e r | F l F e u | F l F e e | F l F e F | F l F e a | F l F e l | F l F e s | F l F e e | F l F F T | F l F F r | F l F F u | F l F F e | F l F F F | F l F F a | F l F F l | F l F F s | F l F F e | F l F a T | F l F a r | F l F a u | F l F a e | F l F a F | F l F a a | F l F a l | F l F a s | F l F a e | F l F l T | F l F l r | F l F l u | F l F l e | F l F l F | F l F l a | F l F l l | F l F l s | F l F l e | F l F s T | F l F s r | F l F s u | F l F s e | F l F s F | F l F s a | F l F s l | F l F s s | F l F s e | F l F e T | F l F e r | F l F e u | F l F e e | F l F e F | F l F e a | F l F e l | F l F e s | F l F e e | F l a T T | F l a T r | F l a T u | F l a T e | F l a T F | F l a T a | F l a T l | F l a T s | F l a T e | F l a r T | F l a r r | F l a r u | F l a r e | F l a r F | F l a r a | F l a r l | F l a r s | F l a r e | F l a u T | F l a u r | F l a u u | F l a u e | F l a u F | F l a u a | F l a u l | F l a u s | F l a u e | F l a e T | F l a e r | F l a e u | F l a e e | F l a e F | F l a e a | F l a e l | F l a e s | F l a e e | F l a F T | F l a F r | F l a F u | F l a F e | F l a F F | F l a F a | F l a F l | F l a F s | F l a F e | F l a a T | F l a a r | F l a a u | F l a a e | F l a a F | F l a a a | F l a a l | F l a a s | F l a a e | F l a l T | F l a l r | F l a l u | F l a l e | F l a l F | F l a l a | F l a l l | F l a l s | F l a l e | F l a s T | F l a s r | F l a s u | F l a s e | F l a s F | F l a s a | F l a s l | F l a s s | F l a s e | F l a e T | F l a e r | F l a e u | F l a e e | F l a e F | F l a e a | F l a e l | F l a e s | F l a e e | F l l T T | F l l T r | F l l T u | F l l T e | F l l T F | F l l T a | F l l T l | F l l T s | F l l T e | F l l r T | F l l r r | F l l r u | F l l r e | F l l r F | F l l r a | F l l r l | F l l r s | F l l r e | F l l u T | F l l u r | F l l u u | F l l u e | F l l u F | F l l u a | F l l u l | F l l u s | F l l u e | F l l e T | F l l e r | F l l e u | F l l e e | F l l e F | F l l e a | F l l e l | F l l e s | F l l e e | F l l F T | F l l F r | F l l F u | F l l F e | F l l F F | F l l F a | F l l F l | F l l F s | F l l F e | F l l a T | F l l a r | F l l a u | F l l a e | F l l a F | F l l a a | F l l a l | F l l a s | F l l a e | F l l l T | F l l l r | F l l l u | F l l l e | F l l l F | F l l l a | F l l l l | F l l l s | F l l l e | F l l s T | F l l s r | F l l s u | F l l s e | F l l s F | F l l s a | F l l s l | F l l s s | F l l s e | F l l e T | F l l e r | F l l e u | F l l e e | F l l e F | F l l e a | F l l e l | F l l e s | F l l e e | F l s T T | F l s T r | F l s T u | F l s T e | F l s T F | F l s T a | F l s T l | F l s T s | F l s T e | F l s r T | F l s r r | F l s r u | F l s r e | F l s r F | F l s r a | F l s r l | F l s r s | F l s r e | F l s u T | F l s u r | F l s u u | F l s u e | F l s u F | F l s u a | F l s u l | F l s u s | F l s u e | F l s e T | F l s e r | F l s e u | F l s e e | F l s e F | F l s e a | F l s e l | F l s e s | F l s e e | F l s F T | F l s F r | F l s F u | F l s F e | F l s F F | F l s F a | F l s F l | F l s F s | F l s F e | F l s a T | F l s a r | F l s a u | F l s a e | F l s a F | F l s a a | F l s a l | F l s a s | F l s a e | F l s l T | F l s l r | F l s l u | F l s l e | F l s l F | F l s l a | F l s l l | F l s l s | F l s l e | F l s s T | F l s s r | F l s s u | F l s s e | F l s s F | F l s s a | F l s s l | F l s s s | F l s s e | F l s e T | F l s e r | F l s e u | F l s e e | F l s e F | F l s e a | F l s e l | F l s e s | F l s e e | F l e T T | F l e T r | F l e T u | F l e T e | F l e T F | F l e T a | F l e T l | F l e T s | F l e T e | F l e r T | F l e r r | F l e r u | F l e r e | F l e r F | F l e r a | F l e r l | F l e r s | F l e r e | F l e u T | F l e u r | F l e u u | F l e u e | F l e u F | F l e u a | F l e u l | F l e u s | F l e u e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l e F T | F l e F r | F l e F u | F l e F e | F l e F F | F l e F a | F l e F l | F l e F s | F l e F e | F l e a T | F l e a r | F l e a u | F l e a e | F l e a F | F l e a a | F l e a l | F l e a s | F l e a e | F l e l T | F l e l r | F l e l u | F l e l e | F l e l F | F l e l a | F l e l l | F l e l s | F l e l e | F l e s T | F l e s r | F l e s u | F l e s e | F l e s F | F l e s a | F l e s l | F l e s s | F l e s e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F s T T T | F s T T r | F s T T u | F s T T e | F s T T F | F s T T a | F s T T l | F s T T s | F s T T e | F s T r T | F s T r r | F s T r u | F s T r e | F s T r F | F s T r a | F s T r l | F s T r s | F s T r e | F s T u T | F s T u r | F s T u u | F s T u e | F s T u F | F s T u a | F s T u l | F s T u s | F s T u e | F s T e T | F s T e r | F s T e u | F s T e e | F s T e F | F s T e a | F s T e l | F s T e s | F s T e e | F s T F T | F s T F r | F s T F u | F s T F e | F s T F F | F s T F a | F s T F l | F s T F s | F s T F e | F s T a T | F s T a r | F s T a u | F s T a e | F s T a F | F s T a a | F s T a l | F s T a s | F s T a e | F s T l T | F s T l r | F s T l u | F s T l e | F s T l F | F s T l a | F s T l l | F s T l s | F s T l e | F s T s T | F s T s r | F s T s u | F s T s e | F s T s F | F s T s a | F s T s l | F s T s s | F s T s e | F s T e T | F s T e r | F s T e u | F s T e e | F s T e F | F s T e a | F s T e l | F s T e s | F s T e e | F s r T T | F s r T r | F s r T u | F s r T e | F s r T F | F s r T a | F s r T l | F s r T s | F s r T e | F s r r T | F s r r r | F s r r u | F s r r e | F s r r F | F s r r a | F s r r l | F s r r s | F s r r e | F s r u T | F s r u r | F s r u u | F s r u e | F s r u F | F s r u a | F s r u l | F s r u s | F s r u e | F s r e T | F s r e r | F s r e u | F s r e e | F s r e F | F s r e a | F s r e l | F s r e s | F s r e e | F s r F T | F s r F r | F s r F u | F s r F e | F s r F F | F s r F a | F s r F l | F s r F s | F s r F e | F s r a T | F s r a r | F s r a u | F s r a e | F s r a F | F s r a a | F s r a l | F s r a s | F s r a e | F s r l T | F s r l r | F s r l u | F s r l e | F s r l F | F s r l a | F s r l l | F s r l s | F s r l e | F s r s T | F s r s r | F s r s u | F s r s e | F s r s F | F s r s a | F s r s l | F s r s s | F s r s e | F s r e T | F s r e r | F s r e u | F s r e e | F s r e F | F s r e a | F s r e l | F s r e s | F s r e e | F s u T T | F s u T r | F s u T u | F s u T e | F s u T F | F s u T a | F s u T l | F s u T s | F s u T e | F s u r T | F s u r r | F s u r u | F s u r e | F s u r F | F s u r a | F s u r l | F s u r s | F s u r e | F s u u T | F s u u r | F s u u u | F s u u e | F s u u F | F s u u a | F s u u l | F s u u s | F s u u e | F s u e T | F s u e r | F s u e u | F s u e e | F s u e F | F s u e a | F s u e l | F s u e s | F s u e e | F s u F T | F s u F r | F s u F u | F s u F e | F s u F F | F s u F a | F s u F l | F s u F s | F s u F e | F s u a T | F s u a r | F s u a u | F s u a e | F s u a F | F s u a a | F s u a l | F s u a s | F s u a e | F s u l T | F s u l r | F s u l u | F s u l e | F s u l F | F s u l a | F s u l l | F s u l s | F s u l e | F s u s T | F s u s r | F s u s u | F s u s e | F s u s F | F s u s a | F s u s l | F s u s s | F s u s e | F s u e T | F s u e r | F s u e u | F s u e e | F s u e F | F s u e a | F s u e l | F s u e s | F s u e e | F s e T T | F s e T r | F s e T u | F s e T e | F s e T F | F s e T a | F s e T l | F s e T s | F s e T e | F s e r T | F s e r r | F s e r u | F s e r e | F s e r F | F s e r a | F s e r l | F s e r s | F s e r e | F s e u T | F s e u r | F s e u u | F s e u e | F s e u F | F s e u a | F s e u l | F s e u s | F s e u e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s e F T | F s e F r | F s e F u | F s e F e | F s e F F | F s e F a | F s e F l | F s e F s | F s e F e | F s e a T | F s e a r | F s e a u | F s e a e | F s e a F | F s e a a | F s e a l | F s e a s | F s e a e | F s e l T | F s e l r | F s e l u | F s e l e | F s e l F | F s e l a | F s e l l | F s e l s | F s e l e | F s e s T | F s e s r | F s e s u | F s e s e | F s e s F | F s e s a | F s e s l | F s e s s | F s e s e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s F T T | F s F T r | F s F T u | F s F T e | F s F T F | F s F T a | F s F T l | F s F T s | F s F T e | F s F r T | F s F r r | F s F r u | F s F r e | F s F r F | F s F r a | F s F r l | F s F r s | F s F r e | F s F u T | F s F u r | F s F u u | F s F u e | F s F u F | F s F u a | F s F u l | F s F u s | F s F u e | F s F e T | F s F e r | F s F e u | F s F e e | F s F e F | F s F e a | F s F e l | F s F e s | F s F e e | F s F F T | F s F F r | F s F F u | F s F F e | F s F F F | F s F F a | F s F F l | F s F F s | F s F F e | F s F a T | F s F a r | F s F a u | F s F a e | F s F a F | F s F a a | F s F a l | F s F a s | F s F a e | F s F l T | F s F l r | F s F l u | F s F l e | F s F l F | F s F l a | F s F l l | F s F l s | F s F l e | F s F s T | F s F s r | F s F s u | F s F s e | F s F s F | F s F s a | F s F s l | F s F s s | F s F s e | F s F e T | F s F e r | F s F e u | F s F e e | F s F e F | F s F e a | F s F e l | F s F e s | F s F e e | F s a T T | F s a T r | F s a T u | F s a T e | F s a T F | F s a T a | F s a T l | F s a T s | F s a T e | F s a r T | F s a r r | F s a r u | F s a r e | F s a r F | F s a r a | F s a r l | F s a r s | F s a r e | F s a u T | F s a u r | F s a u u | F s a u e | F s a u F | F s a u a | F s a u l | F s a u s | F s a u e | F s a e T | F s a e r | F s a e u | F s a e e | F s a e F | F s a e a | F s a e l | F s a e s | F s a e e | F s a F T | F s a F r | F s a F u | F s a F e | F s a F F | F s a F a | F s a F l | F s a F s | F s a F e | F s a a T | F s a a r | F s a a u | F s a a e | F s a a F | F s a a a | F s a a l | F s a a s | F s a a e | F s a l T | F s a l r | F s a l u | F s a l e | F s a l F | F s a l a | F s a l l | F s a l s | F s a l e | F s a s T | F s a s r | F s a s u | F s a s e | F s a s F | F s a s a | F s a s l | F s a s s | F s a s e | F s a e T | F s a e r | F s a e u | F s a e e | F s a e F | F s a e a | F s a e l | F s a e s | F s a e e | F s l T T | F s l T r | F s l T u | F s l T e | F s l T F | F s l T a | F s l T l | F s l T s | F s l T e | F s l r T | F s l r r | F s l r u | F s l r e | F s l r F | F s l r a | F s l r l | F s l r s | F s l r e | F s l u T | F s l u r | F s l u u | F s l u e | F s l u F | F s l u a | F s l u l | F s l u s | F s l u e | F s l e T | F s l e r | F s l e u | F s l e e | F s l e F | F s l e a | F s l e l | F s l e s | F s l e e | F s l F T | F s l F r | F s l F u | F s l F e | F s l F F | F s l F a | F s l F l | F s l F s | F s l F e | F s l a T | F s l a r | F s l a u | F s l a e | F s l a F | F s l a a | F s l a l | F s l a s | F s l a e | F s l l T | F s l l r | F s l l u | F s l l e | F s l l F | F s l l a | F s l l l | F s l l s | F s l l e | F s l s T | F s l s r | F s l s u | F s l s e | F s l s F | F s l s a | F s l s l | F s l s s | F s l s e | F s l e T | F s l e r | F s l e u | F s l e e | F s l e F | F s l e a | F s l e l | F s l e s | F s l e e | F s s T T | F s s T r | F s s T u | F s s T e | F s s T F | F s s T a | F s s T l | F s s T s | F s s T e | F s s r T | F s s r r | F s s r u | F s s r e | F s s r F | F s s r a | F s s r l | F s s r s | F s s r e | F s s u T | F s s u r | F s s u u | F s s u e | F s s u F | F s s u a | F s s u l | F s s u s | F s s u e | F s s e T | F s s e r | F s s e u | F s s e e | F s s e F | F s s e a | F s s e l | F s s e s | F s s e e | F s s F T | F s s F r | F s s F u | F s s F e | F s s F F | F s s F a | F s s F l | F s s F s | F s s F e | F s s a T | F s s a r | F s s a u | F s s a e | F s s a F | F s s a a | F s s a l | F s s a s | F s s a e | F s s l T | F s s l r | F s s l u | F s s l e | F s s l F | F s s l a | F s s l l | F s s l s | F s s l e | F s s s T | F s s s r | F s s s u | F s s s e | F s s s F | F s s s a | F s s s l | F s s s s | F s s s e | F s s e T | F s s e r | F s s e u | F s s e e | F s s e F | F s s e a | F s s e l | F s s e s | F s s e e | F s e T T | F s e T r | F s e T u | F s e T e | F s e T F | F s e T a | F s e T l | F s e T s | F s e T e | F s e r T | F s e r r | F s e r u | F s e r e | F s e r F | F s e r a | F s e r l | F s e r s | F s e r e | F s e u T | F s e u r | F s e u u | F s e u e | F s e u F | F s e u a | F s e u l | F s e u s | F s e u e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s e F T | F s e F r | F s e F u | F s e F e | F s e F F | F s e F a | F s e F l | F s e F s | F s e F e | F s e a T | F s e a r | F s e a u | F s e a e | F s e a F | F s e a a | F s e a l | F s e a s | F s e a e | F s e l T | F s e l r | F s e l u | F s e l e | F s e l F | F s e l a | F s e l l | F s e l s | F s e l e | F s e s T | F s e s r | F s e s u | F s e s e | F s e s F | F s e s a | F s e s l | F s e s s | F s e s e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F e T T T | F e T T r | F e T T u | F e T T e | F e T T F | F e T T a | F e T T l | F e T T s | F e T T e | F e T r T | F e T r r | F e T r u | F e T r e | F e T r F | F e T r a | F e T r l | F e T r s | F e T r e | F e T u T | F e T u r | F e T u u | F e T u e | F e T u F | F e T u a | F e T u l | F e T u s | F e T u e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e T F T | F e T F r | F e T F u | F e T F e | F e T F F | F e T F a | F e T F l | F e T F s | F e T F e | F e T a T | F e T a r | F e T a u | F e T a e | F e T a F | F e T a a | F e T a l | F e T a s | F e T a e | F e T l T | F e T l r | F e T l u | F e T l e | F e T l F | F e T l a | F e T l l | F e T l s | F e T l e | F e T s T | F e T s r | F e T s u | F e T s e | F e T s F | F e T s a | F e T s l | F e T s s | F e T s e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e r T T | F e r T r | F e r T u | F e r T e | F e r T F | F e r T a | F e r T l | F e r T s | F e r T e | F e r r T | F e r r r | F e r r u | F e r r e | F e r r F | F e r r a | F e r r l | F e r r s | F e r r e | F e r u T | F e r u r | F e r u u | F e r u e | F e r u F | F e r u a | F e r u l | F e r u s | F e r u e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e r F T | F e r F r | F e r F u | F e r F e | F e r F F | F e r F a | F e r F l | F e r F s | F e r F e | F e r a T | F e r a r | F e r a u | F e r a e | F e r a F | F e r a a | F e r a l | F e r a s | F e r a e | F e r l T | F e r l r | F e r l u | F e r l e | F e r l F | F e r l a | F e r l l | F e r l s | F e r l e | F e r s T | F e r s r | F e r s u | F e r s e | F e r s F | F e r s a | F e r s l | F e r s s | F e r s e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e u T T | F e u T r | F e u T u | F e u T e | F e u T F | F e u T a | F e u T l | F e u T s | F e u T e | F e u r T | F e u r r | F e u r u | F e u r e | F e u r F | F e u r a | F e u r l | F e u r s | F e u r e | F e u u T | F e u u r | F e u u u | F e u u e | F e u u F | F e u u a | F e u u l | F e u u s | F e u u e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e u F T | F e u F r | F e u F u | F e u F e | F e u F F | F e u F a | F e u F l | F e u F s | F e u F e | F e u a T | F e u a r | F e u a u | F e u a e | F e u a F | F e u a a | F e u a l | F e u a s | F e u a e | F e u l T | F e u l r | F e u l u | F e u l e | F e u l F | F e u l a | F e u l l | F e u l s | F e u l e | F e u s T | F e u s r | F e u s u | F e u s e | F e u s F | F e u s a | F e u s l | F e u s s | F e u s e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e F T T | F e F T r | F e F T u | F e F T e | F e F T F | F e F T a | F e F T l | F e F T s | F e F T e | F e F r T | F e F r r | F e F r u | F e F r e | F e F r F | F e F r a | F e F r l | F e F r s | F e F r e | F e F u T | F e F u r | F e F u u | F e F u e | F e F u F | F e F u a | F e F u l | F e F u s | F e F u e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e F F T | F e F F r | F e F F u | F e F F e | F e F F F | F e F F a | F e F F l | F e F F s | F e F F e | F e F a T | F e F a r | F e F a u | F e F a e | F e F a F | F e F a a | F e F a l | F e F a s | F e F a e | F e F l T | F e F l r | F e F l u | F e F l e | F e F l F | F e F l a | F e F l l | F e F l s | F e F l e | F e F s T | F e F s r | F e F s u | F e F s e | F e F s F | F e F s a | F e F s l | F e F s s | F e F s e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e a T T | F e a T r | F e a T u | F e a T e | F e a T F | F e a T a | F e a T l | F e a T s | F e a T e | F e a r T | F e a r r | F e a r u | F e a r e | F e a r F | F e a r a | F e a r l | F e a r s | F e a r e | F e a u T | F e a u r | F e a u u | F e a u e | F e a u F | F e a u a | F e a u l | F e a u s | F e a u e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e a F T | F e a F r | F e a F u | F e a F e | F e a F F | F e a F a | F e a F l | F e a F s | F e a F e | F e a a T | F e a a r | F e a a u | F e a a e | F e a a F | F e a a a | F e a a l | F e a a s | F e a a e | F e a l T | F e a l r | F e a l u | F e a l e | F e a l F | F e a l a | F e a l l | F e a l s | F e a l e | F e a s T | F e a s r | F e a s u | F e a s e | F e a s F | F e a s a | F e a s l | F e a s s | F e a s e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e l T T | F e l T r | F e l T u | F e l T e | F e l T F | F e l T a | F e l T l | F e l T s | F e l T e | F e l r T | F e l r r | F e l r u | F e l r e | F e l r F | F e l r a | F e l r l | F e l r s | F e l r e | F e l u T | F e l u r | F e l u u | F e l u e | F e l u F | F e l u a | F e l u l | F e l u s | F e l u e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e l F T | F e l F r | F e l F u | F e l F e | F e l F F | F e l F a | F e l F l | F e l F s | F e l F e | F e l a T | F e l a r | F e l a u | F e l a e | F e l a F | F e l a a | F e l a l | F e l a s | F e l a e | F e l l T | F e l l r | F e l l u | F e l l e | F e l l F | F e l l a | F e l l l | F e l l s | F e l l e | F e l s T | F e l s r | F e l s u | F e l s e | F e l s F | F e l s a | F e l s l | F e l s s | F e l s e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e s T T | F e s T r | F e s T u | F e s T e | F e s T F | F e s T a | F e s T l | F e s T s | F e s T e | F e s r T | F e s r r | F e s r u | F e s r e | F e s r F | F e s r a | F e s r l | F e s r s | F e s r e | F e s u T | F e s u r | F e s u u | F e s u e | F e s u F | F e s u a | F e s u l | F e s u s | F e s u e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e s F T | F e s F r | F e s F u | F e s F e | F e s F F | F e s F a | F e s F l | F e s F s | F e s F e | F e s a T | F e s a r | F e s a u | F e s a e | F e s a F | F e s a a | F e s a l | F e s a s | F e s a e | F e s l T | F e s l r | F e s l u | F e s l e | F e s l F | F e s l a | F e s l l | F e s l s | F e s l e | F e s s T | F e s s r | F e s s u | F e s s e | F e s s F | F e s s a | F e s s l | F e s s s | F e s s e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/01/08/Algorithm_Hacks.html",
            "relUrl": "/2023/01/08/Algorithm_Hacks.html",
            "date": " • Jan 8, 2023"
        }
        
    
  
    
        ,"post74": {
            "title": "Title",
            "content": ". import pygame import sys # Initialize Pygame pygame.init() # Set up the window window_size = (800, 600) window = pygame.display.set_mode(window_size) pygame.display.set_caption(&quot;Catch the Fish!&quot;) # define colors BLACK = ( 0, 0, 0) WHITE = (255, 255, 255) BLUE = ( 0, 0, 255) GREEN = ( 0, 255, 0) RED = (255, 0, 0) # Set up the variables needed clock = pygame.time.Clock() FPS = 30 score = 0 # The player player_size = 50 player_position = [350, 550] # The fish fish_size = 50 fish_position = [random.randint(0, window_size[0]-fish_size), 0] fish_speed = 5 # The game loop while True: for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() sys.exit() # Move the player # Get keys pressed keys = pygame.key.get_pressed() # Check if left or right arrow is pressed and move the player if keys[pygame.K_LEFT] and player_position[0] &gt; 0: player_position[0] -= 5 if keys[pygame.K_RIGHT] and player_position[0] &lt; window_size[0] - player_size: player_position[0] += 5 # Move the fish if fish_position[1] &gt;= window_size[1]: fish_position[0] = random.randint(0, window_size[0] - fish_size) fish_position[1] = 0 else: fish_position[1] += fish_speed # Check if the player caught the fish if fish_position[1] + fish_size &gt;= player_position[1]: # Check if the fish is in the same x position as the player if fish_position[0] &gt; player_position[0] and fish_position[0] &lt; player_position[0] + player_size or fish_position[0] + fish_size &gt; player_position[0] and fish_position[0] + fish_size &lt; player_position[0] + player_size: score += 1 fish_position[0] = random.randint(0, window_size[0] - fish_size) fish_position[1] = 0 # Draw the window window.fill(BLACK) pygame.draw.rect(window, WHITE, [player_position[0], player_position[1], player_size, player_size]) pygame.draw.rect(window, GREEN, [fish_position[0], fish_position[1], fish_size, fish_size]) # Display the score font = pygame.font.SysFont(&quot;Arial&quot;, 25) text = font.render(&quot;Score: &quot; + str(score), True, WHITE) window.blit(text, [window_size[0]-100, 20]) # Update the screen pygame.display.update() # Tick the clock clock.tick(FPS) . pygame 2.1.2 (SDL 2.0.18, Python 3.10.6) Hello from the pygame community. https://www.pygame.org/contribute.html . NameError Traceback (most recent call last) c: Users etran .vscode fastpages_EthanT _notebooks python_game.ipynb Cell 2 in &lt;cell line: 30&gt;() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; # The fish &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=28&#39;&gt;29&lt;/a&gt; fish_size = 50 &gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; fish_position = [random.randint(0, window_size[0]-fish_size), 0] &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=30&#39;&gt;31&lt;/a&gt; fish_speed = 5 &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/python_game.ipynb#W1sZmlsZQ%3D%3D?line=32&#39;&gt;33&lt;/a&gt; # The game loop NameError: name &#39;random&#39; is not defined . The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2023/01/03/python_game.html",
            "relUrl": "/2023/01/03/python_game.html",
            "date": " • Jan 3, 2023"
        }
        
    
  
    
        ,"post75": {
            "title": "Hacks Unit 3 Sections 9-11",
            "content": "Notes . 1) Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm This may allow for the coding process to be more efficient and effective . 2) Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration Algorithms with selection only go through certain functions if certain things are true or false . 3) Why use algorithms? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . Hacks 3.9.1 . 1) Why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? . It is vital to know that algorithms that appear different are capable of performing the same functions, and that algorithms that look the same may have different results. This is because it allows for creativity when coding, leading to finding new or different ways of solving the same issue(s). | . 2) For the converted conditional to boolean conversion . isSunny = True isRainy = False if isSunny == True: print(&quot;No umbrella necessary!&quot;) else: if isRainy == True: print(&quot;Might want an umbrella!&quot;) else: print(&quot;No umbrella necessary!&quot;) . No umbrella necessary! . isSunny = False isRainy = True # setting variables here (same as above to make comparison easier) puddles = not(isSunny) and isRainy if isRainy == False: print(&quot;Puddles!&quot;) if isSunny == True: print(&quot;No puddles!&quot;) . Hacks 3.9.2 . Develop your own complex algorithm using a flowchart and natural language, then code it! | Requirements: | Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . . 1) Once the code starts, the starting amount of money is set to $10. . 2) The variable, spendMoney, is set to True. . 3) While spendMoney remains true, $1 is deducted from the money variable. . 4) Once the variable, money, reaches a value of 0, spendMoney is set to False and the string, &quot;You&#39;re out of money!&quot; is printed. . 5) End . money = 10 spendMoney = True while(spendMoney == True): money -= 1 if money == 0: spendMoney == False print(&quot;You&#39;re out of money!&quot;) . You&#39;re out of money! . Hacks 3.9.3 . Fix the number guessing game | . 1) Make a flow chart for the algorithm number guessing game . 2) Make a function that gets the user guess . 3) Modify the existing search function to give more encouraging feedback . . import random #sets variables for the game num_guesses = 0 user_guess = -1 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(0,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 0 and 100.&quot;) print(number) #Write a function that gets a guess from the user using input() def guess(): num = input(&quot;Input your guess&quot;) #add something here return num #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;Too low, try again! :)&quot;) #change this lower_bound = guess return lower_bound, upper_bound elif int(guess) &gt; int(number): print(&quot;Too high, try again! :D&quot;) #change this upper_bound = guess return lower_bound, upper_bound else: upper_bound, lower_bound = guess, guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 0 and 100. 92 You guessed 10. Too low, try again! :) Guess a number between 10 and 100. You guessed 99. Too high, try again! :D Guess a number between 10 and 99. You guessed 92. You guessed the number in 3 guesses! . Hacks 3.11 . 1) calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 92, 43, 74, 66, 30, 12, 1 7, 13, 96, 111, 33, 84, 60 . Answer: Below . . 2) Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? Set 1: 80, Set 2: 74, Set 3: 96 . Answer: Set 1: 80, Set 2: 74, Set 3: 96 . . 3) Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . Answer: C . . numListOne = [12,14,44,57,79,80,99] numListTwo = [92,43,74,66,30,12,1] numListThree = [7,13,96,111,33,84,60] numLists = [numListOne, numListTwo, numListThree] for x in range(len(numLists)): numLists[x].sort() middle = int(len(numLists[x])/2) print(&quot;Middle Index of List #&quot;,x+1,&quot;is&quot;,numLists[x][middle]) . Middle Index of List # 1 is 57 Middle Index of List # 2 is 43 Middle Index of List # 3 is 60 .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%203/sections%209-11/notes%20hacks/2022/12/16/Section-9_11_Hacks.html",
            "relUrl": "/unit%203/sections%209-11/notes%20hacks/2022/12/16/Section-9_11_Hacks.html",
            "date": " • Dec 16, 2022"
        }
        
    
  
    
        ,"post76": {
            "title": "Unit 3 Vocabulary (Definitions + Examples)",
            "content": "Variables: A variable is a named container that stores a value that can be changed or updated. . X = 5 print(X) . 5 . Data Types: Different types of data such as numbers, strings, booleans, and objects that can be stored in variables. . X = &quot;hello&quot; print(X) . hello . Assignment Operators: Operators that are used to assign a value to a variable. . three = 3 print(three) . 3 . Managing Complexity with Variables: Lists, 2D Lists, Dictionaries, Class: Ways of organizing data in a more complex structure. . MyList = [1,2,3,4,5] print(MyList) . [1, 2, 3, 4, 5] . Algorithms: A set of instructions for solving a problem. . Example: To find the largest number in a list, you could use a sorting algorithm. . Sequence, Selection, Iteration: Three types of control flow structures in programming. . Example: For a sequence, you could create a loop that prints out each number from 1 to 10. . Expressions, Comparison Operators, Booleans Expressions and Selection, Booleans Expressions and Iteration, Truth Tables: Expressions are used to evaluate values and comparison operators are used to compare values. . if (5 &gt; 3) is True: print(&quot;True&quot;) else: print(&quot;False&quot;) . True . Characters: Individual letters, numbers, and symbols . Characters = &quot;H&quot; print(Characters) . H . Strings: A a combination of characters Length: The number of characters in a string Concatenation: A combination of strings together . Strings = &quot;Hello World&quot; Strings2 = &quot;World Hello&quot; print(Strings) print(len(Strings)) print(Strings, Strings2) . Hello World 11 Hello World World Hello . Upper and Lower: Functions for changing the case of characters . Traversing Strings: Looping over each character in a string. . If, Elif, Else conditionals; Nested Selection Statements: Control statements that allow you to execute code based on certain conditions. . x = 5 if x &gt; 0: print(&quot;x is greater than 0&quot;) elif x == 0: print(&quot;x is equal to 0&quot;) else: print(&quot;x is less than 0&quot;) . x is greater than 0 . Python For, While loops with Range, with List: Types of loops that allow you to iterate over a range of numbers or a list of items. . import random x = random.randint(0,10) for x in range(0, 10): print(x) . 0 1 2 3 4 5 6 7 8 9 . Combining loops with conditionals to Break, Continue: Control statements that allow you to break out of a loop or skip an iteration. . x = 2 while x &lt; 10: if x == 5: break x += 1 print(x) . 5 . Procedural Abstraction: A process used to simplify complex tasks by breaking them down into smaller, easier-to-manage tasks. . Python Def Procedures: A method used to define a set of instructions to be executed when a certain procedure is called. . Parameters: Arguments that are passed to a procedure when it is called. . Return Values: A value that is returned after a procedure has been executed. . Selection: Selection is a type of control flow that allows for the execution of certain code based on certain conditions. . firstNum = int(input(&quot;Input your first number.&quot;)) secondNum = int(input(&quot;Input your second number.&quot;)) conditional = input(&quot;AND, OR, XOR?&quot;).lower() if conditional == &quot;and&quot;: print(&quot;Selection:&quot; , &quot;AND&quot;, firstNum, &quot;&amp;&quot;, secondNum, &quot;=&quot;, firstNum &amp; secondNum) elif conditional ==&quot;or&quot;: print(&quot;Selection:&quot; , &quot;OR &quot;, firstNum, &quot;|&quot;, secondNum, &quot;=&quot;, firstNum | secondNum) elif conditional ==&quot;xor&quot;: print(&quot;Selection:&quot; , &quot;XOR&quot;, firstNum, &quot;^&quot;, secondNum, &quot;=&quot;, firstNum ^ secondNum) else: print(&quot;Error&quot;) . Selection: OR 2 | 10 = 10 . Lists: Lists are data structures used to store multiple values in one variable. . Iteration: Iteration is a type of control flow that allows for the execution of certain code multiple times. . print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Ethan Tran&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 15 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot; , &quot;Bash&quot; , &quot;C&quot; , &quot;R&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs, } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Ethan Tran &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 15 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 100.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;C&#39;, &#39;R&#39;] &lt;class &#39;list&#39;&gt; length 6 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Ethan Tran&#39;, &#39;age&#39;: 15, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;C&#39;, &#39;R&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Ethan Tran &lt;class &#39;str&#39;&gt; . Logical Operator: A logical operator is a type of operator in computer science that performs a logical operation, such as a comparison or a boolean operation, on two or more values or variables. Examples of logical operators include AND, OR, NOT, XOR, and NAND. . Tru = True equals = &quot;=&quot; opposite = not(Tru) print(opposite) fun = &quot;fun&quot; awesome = fun if fun and awesome == &quot;fun&quot;: print(&quot;AND&quot;) else: print(&quot;NOT AND&quot;) . False . fun = &quot;fun&quot; awesome = fun if fun and awesome == &quot;fun&quot;: print(&quot;AND&quot;) else: print(&quot;NOT AND&quot;) . AND . import random numList = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;] ranNum = random.randrange(len(numList)) print(ranNum) if ranNum == 2 or ranNum == 5: print(&quot;OR&quot;) else: print(&quot;NOT OR&quot;) . 3 NOT OR .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%203/vocabulary/2022/12/15/unit-3-vocabulary.html",
            "relUrl": "/unit%203/vocabulary/2022/12/15/unit-3-vocabulary.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post77": {
            "title": "Unit 3 Sections 17-18 Hacks",
            "content": "Notes (From the lesson + extra research) . The Collatz Conjecture is an unsolved problem in mathematics that involves repeating two simple arithmetic operations on any given positive integer. This will eventually produce a sequence of numbers known as Hailstone Numbers, | . Example: If the input is 7, the Hailstone Numbers would be 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1. Iteration is the action or process of repeating a sequence of operations until the desired result is achieved. Undecidable problems are those which should give a yes or no answer, yet no algorithm exists that can answer correctly on all inputs. . Algorithm efficiency in computer science refers to how efficient an algorithm is at solving a given problem. . | Efficiency is typically measured in terms of time and/or space complexity, meaning how much time and/or memory is needed to complete the algorithm. Algorithm efficiency is an important factor in determining which algorithm should be used to solve a particular problem. . | . Time Complexity: This measures the amount of time required to execute an algorithm. Time complexity is usually expressed as a function of the input size, and can be calculated using Big-O notation. Generally, algorithms with a lower time complexity are considered more efficient than those with a higher time complexity. . | Space Complexity: This measures the amount of memory required to execute an algorithm. Space complexity is also expressed as a function of the input size, and can also be calculated using Big-O notation. Generally, algorithms with a lower space complexity are considered more efficient than those with a higher space complexity. . | Optimization Techniques: Optimization techniques can be used to improve the efficiency of an algorithm. These techniques can involve modifying the algorithm itself, or using data structures and algorithms that are better suited to the problem. . | Parallelism: Parallelism is a technique that allows multiple parts of an algorithm to be executed simultaneously. This can significantly reduce the amount of time required to complete the algorithm, but can also increase the complexity of the algorithm. . | In conclusion, algorithm efficiency is an important factor in determining which algorithm should be used to solve a particular problem. Factors such as time complexity, space complexity, optimization techniques, and parallelism should all be taken into consideration when assessing the efficiency of an algorithm. . Hack #1 . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. (.25) | . (Extra credit: If your code is more efficient it will recieve a higher grade.) . i = int(input(&quot;Please input a number: &quot;)) list = [] def collatz_seq(n): list = [] while n != 1: if (n % 2): n = 3*n + 1 else: n = n/2 list.append(n) return list result = collatz_seq(i) print(&quot;Input:&quot; , i) print(result) print(&quot;Iteration count:&quot;, len(result)) . Input: 77 [232, 116.0, 58.0, 29.0, 88.0, 44.0, 22.0, 11.0, 34.0, 17.0, 52.0, 26.0, 13.0, 40.0, 20.0, 10.0, 5.0, 16.0, 8.0, 4.0, 2.0, 1.0] Iteration count: 22 . Hack #2 . 1) Code 2 algorithms: (.25) . The first Algorithm should be efficient while the second should be inefficient. Then explain what distinguishes the efficient from the non-efficient one. (In your own words) . car = [] car.append({ &quot;Make&quot;: &quot;BMW&quot;, &quot;Model&quot;: &quot;M4 CSL&quot;, &quot;Year&quot;: &quot;2023&quot;, }) def loop(): for data in car: print(data) loop() . {&#39;Make&#39;: &#39;BMW&#39;, &#39;Model&#39;: &#39;M4 CSL&#39;, &#39;Year&#39;: &#39;2023&#39;} . car = &quot;Make: BMW&quot;, &quot;Model: M4 CSL&quot;, &quot;Year: 2023&quot; print(car) . (&#39;Make: BMW&#39;, &#39;Model: M4 CSL&#39;, &#39;Year: 2023&#39;) . Algorithm 1 properly displays efficiency, as it appends the list and utilizes a for loop in order to display the data of the given car in an orderly manner. Algorithm 2 is inefficient because the data is only displayed in the order that it is typed in. . Explain algorithm efficiency in your own words (.25) | . Algorithm efficiency in computer science is the measure of how well a particular algorithm performs when compared to other algorithms. It is typically calculated by measuring the amount of time and space it takes to complete a task. The most efficient algorithms are those that take the least amount of time to complete a task while consuming the smallest amount of resources. In other words, the most efficient algorithms are those that are able to accomplish a task in the shortest amount of time with the least amount of memory and CPU cycles. . Code an efficient program that shows your daily tasks or schedule. (We have an example shown in our lesson) (.25) | . tasks = [&quot;wake up&quot;, &quot;get ready&quot;, &quot;head to school&quot;, &quot;finish homework/study&quot;, &quot;go to bed&quot;] def daily_routine(tasks): for task in tasks: if task == &quot;wake up&quot;: print(&quot;Waking up!&quot;) elif task == &quot;get ready&quot;: print(&quot;Getting ready!&quot;) elif task == &quot;head to school&quot;: print(&quot;Heading to school!&quot;) elif task == &quot;finish homework/study&quot;: print(&quot;Working hard!&quot;) elif task == &quot;going to bed&quot;: print(&quot;Time for bed!&quot;) daily_routine(tasks) . Waking up! Getting ready! Heading to school! Working hard! . from getpass import getpass . File &lt;tokenize&gt;:26 else: ^ IndentationError: unindent does not match any outer indentation level .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%203/sections%2017-18/hacks/2022/12/15/Unit-3-Sections-17-18-Hacks.html",
            "relUrl": "/unit%203/sections%2017-18/hacks/2022/12/15/Unit-3-Sections-17-18-Hacks.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post78": {
            "title": "Unit 3 Sections 14-15 Hacks Grades",
            "content": ".",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%203/sections%2014-15/grades/2022/12/15/Unit-3-Sections-14-15-Hacks-Grades.html",
            "relUrl": "/unit%203/sections%2014-15/grades/2022/12/15/Unit-3-Sections-14-15-Hacks-Grades.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post79": {
            "title": "Algorithms",
            "content": "Notes/Vocabulary . Truth Tables: Truth tables are a type of mathematical table used in logic and computer science to display the truth-values of logical expressions. A truth table has one column for each input variable (for example, a, b, and c) and one final column showing all of the possible results of the expression for each combination of inputs. In other words, a truth table shows the output of a logical expression for every possible combination of input values. The output column of a truth table is often referred to as the &quot;truth value&quot; column because it shows the truth-value of the logical expression for each combination of inputs. . Procedures/Functions: A procedure or function is a set of instructions that a computer can execute in order to accomplish a given task. Procedures and functions are a fundamental component of computer programming, and are used to break complex tasks into smaller, more manageable pieces. Generally, a procedure or function will take some input, perform some processing on the input, and return some output. Procedures and functions can be written in any programming language, though they are most commonly written in high-level languages such as C++, Java, and Python. . Sequences of Code: A sequence of code is a set of instructions written in a programming language that can be executed by a computer. Sequences of code can range from simple commands to complex algorithms. Sequences of code are written to accomplish a specific task, such as sorting a list of numbers or displaying a user interface. Sequences of code are generally written in a programming language such as C++, Java, or Python. . Example . def xor(x,y): return (x or y) and not (x and y) # The boolean function def F(A, B, C, D): P = xor(A, B) Q = xor(C, D) R = xor(P, Q) return R # Translates between &#39;T&#39;/&#39;F&#39; and True/False: def f(a,b,c,d): t = &#39;T&#39; (A,B,C,D) = (a==t, b==t, c==t, d==t) R = F(A, B, C, D) return &quot;FT&quot;[R] print(&quot;Truth Table&quot;) print() print(&quot;A B C D | f(A,B,C,D)&quot;) print(&quot;========|===========&quot;) r = &quot;TF&quot; for a in r: for b in r: for c in r: for d in r: print(a, b, c, d, &quot;| &quot;, f(a, b, c, d)) . Truth Table A B C D | f(A,B,C,D) ========|=========== T T T T | F T T T F | T T T F T | T T T F F | F T F T T | T T F T F | F T F F T | F T F F F | T F T T T | T F T T F | F F T F T | F F T F F | T F F T T | F F F T F | T F F F T | T F F F F | F .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/algorithms/truth%20tables/2022/12/15/Algorithms.html",
            "relUrl": "/algorithms/truth%20tables/2022/12/15/Algorithms.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post80": {
            "title": "Hacks Sections 12-13",
            "content": "Notes . Procedures: A procedure is a block of code that performs a particular task. It can contain variables, constants, data structures, and other programming constructs. Procedures are also known as subroutines, functions, methods, or routines. They are used to break up large programs into smaller, more manageable pieces. . Parameters: Parameters are values that are passed to a procedure or function. They are used to customize the behavior of the procedure or function and can be used to modify its input and output. . Return Values: Return values are values that are returned from a procedure or function. They can be used to indicate the success or failure of a procedure or function, as well as return a value or set of values. . Output Parameters: Output parameters are values that are passed out of a procedure or function. They are used to return values from a procedure or function and can be used to modify its output. . Section 3.12 Hacks . 1. Define procedure and parameter in your own words &amp; Define Return Values and Output Parameters in your own words . a) Procedure: A block of code that is created to perform a given task - essentially a function. . b) Parameter: A variable that is utilized in a function that enables data to be imported into said function. . 2. Paste a screenshot of completion of the quiz . . 3. Define Return Values and Output Parameters in your own words . a) Return Values: A return value is a value that is returned by a function or method to the calling code after it has finished executing. It is the value that is passed back to the calling code once the function or method has finished its job. . b) Output Parameters: Output parameters are variables that are passed by reference to a function or method and are used to return a value to the calling code. They are typically used to return multiple values from a single function or method. . Code a procedure that finds the square root of any given number. (make sure to call and return the function) . import math userNum = float(input()) def sqrt(userNum): return userNum sqrt = math.sqrt(userNum) print(&quot;Input:&quot; , userNum) print(&quot;Square root:&quot; , int(sqrt)) . Input: 225.0 Square root: 15 . import math userNum = float(input()) sqrt = math.sqrt(userNum) print(&quot;Input:&quot; , userNum) print(sqrt) . Input: 25.0 5.0 . Section 3.13 (3.B) Hacks . 1) Q: Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective . A: Abstracting away program logic into separate, modular functions is effective when coding because it makes the code easier to read and understand, more reusable and maintainable, and allows for better organization and structure. By breaking down large, complex tasks into smaller, more manageable functions, it can help to simplify the code and make it more organized, which makes debugging and troubleshooting much easier. Additionally, modular functions are easier to update and extend, since they can be tested, modified, and replaced independently. This can help reduce the amount of code needed to be written and improve the overall code quality. Finally, modular functions make code more reusable, as they can be used in multiple projects and functions, which can lead to faster development times and reduced maintenance costs. . 2) Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) . The procedure below requires abstraction as it allows the function to organize the code as a whole. Abstracting the variables x and y allows me to not have to call the variables over and over again within the same function. . x = 20 y = 100 # Set function def addition(x,y): sum = x + y return(sum) #Print the result print(addition(x,y)) . 120 . 3) Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) . def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count def any_count(sentence, letter): words = split_string(sentence) count = count_words_starting_with_letter(words, letter) return count userLetter = input(&quot;Type any letter&quot;) answer = count_anything(s, str(userLetter)) print(str(answer) + &quot; word(s) starting with &quot; + str(userLetter)) . 0 word(s) starting with 2 . Section 3.13 (3.C) Hacks . 1) Define procedure names and arguments in your own words. Procedures and arguments are used to describe chunks of code that accomplish specific tasks. A procedure name is a label used to identify the code, while arguments are the inputs that the procedure can accept. . 2) Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) . Add two numbers . | Subtract two numbers . | Multiply two numbers . | Divide two numbers . | . Extra Work: Calculator uses binary . . Binary Calculator for +, -, * . &amp; Normal integer division . + - * / Clear . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%203/sections%2012-13/notes%20hacks/2022/12/14/Hacks-Section-12-13.html",
            "relUrl": "/unit%203/sections%2012-13/notes%20hacks/2022/12/14/Hacks-Section-12-13.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post81": {
            "title": "Fixing Errors (Menu Problem)",
            "content": "import sys total = 0 menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;Burger&quot;: 3.99, &quot;Fries&quot;: 1.99, &quot;Drink&quot;: 0.99} print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) ordering = True while ordering: food = input(&quot;Please select an item from the menu. Press enter when you are done.&quot;) if food in menu: total += menu[food] print(&quot;Your total: $&quot; + &quot;{:.2f}&quot;.format(total)) else: print(&quot;Your order will be ready soon!&quot;) ordering = False . Menu burger $3.99 fries $1.99 drink $0.99 Your total: $3.99 Your total: $5.98 Your total: $6.97 Your total: $7.96 Your total: $11.95 Your order will be ready soon! .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/python/lists/iterations/menu/2022/12/14/ErrorFixing.html",
            "relUrl": "/fastpages/python/lists/iterations/menu/2022/12/14/ErrorFixing.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post82": {
            "title": "Title",
            "content": "def xor(x,y): return (x or y) and not (x and y) def F(A, B, C, D): P = xor(A, B) Q = xor(C, D) R = xor(P, Q) return R def f(a,b,c,d): t = &#39;T&#39; (A,B,C,D) = (a==t, b==t, c==t, d==t) R = F(A, B, C, D) return &quot;FT&quot;[R] print(&quot;Truth Table&quot;) print() print(&quot;A B C D | f(A,B,C,D)&quot;) print(&quot;========|===========&quot;) r = &quot;TF&quot; for a in r: for b in r: for c in r: for d in r: print(a, b, c, d, &quot;| &quot;, f(a, b, c, d)) . Truth Table A B C D | f(A,B,C,D) ========|=========== T T T T | F T T T r | F T T T u | F T T T e | F T T T F | F T T T a | F T T T l | F T T T s | F T T T e | F T T r T | F T T r r | F T T r u | F T T r e | F T T r F | F T T r a | F T T r l | F T T r s | F T T r e | F T T u T | F T T u r | F T T u u | F T T u e | F T T u F | F T T u a | F T T u l | F T T u s | F T T u e | F T T e T | F T T e r | F T T e u | F T T e e | F T T e F | F T T e a | F T T e l | F T T e s | F T T e e | F T T F T | F T T F r | F T T F u | F T T F e | F T T F F | F T T F a | F T T F l | F T T F s | F T T F e | F T T a T | F T T a r | F T T a u | F T T a e | F T T a F | F T T a a | F T T a l | F T T a s | F T T a e | F T T l T | F T T l r | F T T l u | F T T l e | F T T l F | F T T l a | F T T l l | F T T l s | F T T l e | F T T s T | F T T s r | F T T s u | F T T s e | F T T s F | F T T s a | F T T s l | F T T s s | F T T s e | F T T e T | F T T e r | F T T e u | F T T e e | F T T e F | F T T e a | F T T e l | F T T e s | F T T e e | F T r T T | F T r T r | F T r T u | F T r T e | F T r T F | F T r T a | F T r T l | F T r T s | F T r T e | F T r r T | F T r r r | F T r r u | F T r r e | F T r r F | F T r r a | F T r r l | F T r r s | F T r r e | F T r u T | F T r u r | F T r u u | F T r u e | F T r u F | F T r u a | F T r u l | F T r u s | F T r u e | F T r e T | F T r e r | F T r e u | F T r e e | F T r e F | F T r e a | F T r e l | F T r e s | F T r e e | F T r F T | F T r F r | F T r F u | F T r F e | F T r F F | F T r F a | F T r F l | F T r F s | F T r F e | F T r a T | F T r a r | F T r a u | F T r a e | F T r a F | F T r a a | F T r a l | F T r a s | F T r a e | F T r l T | F T r l r | F T r l u | F T r l e | F T r l F | F T r l a | F T r l l | F T r l s | F T r l e | F T r s T | F T r s r | F T r s u | F T r s e | F T r s F | F T r s a | F T r s l | F T r s s | F T r s e | F T r e T | F T r e r | F T r e u | F T r e e | F T r e F | F T r e a | F T r e l | F T r e s | F T r e e | F T u T T | F T u T r | F T u T u | F T u T e | F T u T F | F T u T a | F T u T l | F T u T s | F T u T e | F T u r T | F T u r r | F T u r u | F T u r e | F T u r F | F T u r a | F T u r l | F T u r s | F T u r e | F T u u T | F T u u r | F T u u u | F T u u e | F T u u F | F T u u a | F T u u l | F T u u s | F T u u e | F T u e T | F T u e r | F T u e u | F T u e e | F T u e F | F T u e a | F T u e l | F T u e s | F T u e e | F T u F T | F T u F r | F T u F u | F T u F e | F T u F F | F T u F a | F T u F l | F T u F s | F T u F e | F T u a T | F T u a r | F T u a u | F T u a e | F T u a F | F T u a a | F T u a l | F T u a s | F T u a e | F T u l T | F T u l r | F T u l u | F T u l e | F T u l F | F T u l a | F T u l l | F T u l s | F T u l e | F T u s T | F T u s r | F T u s u | F T u s e | F T u s F | F T u s a | F T u s l | F T u s s | F T u s e | F T u e T | F T u e r | F T u e u | F T u e e | F T u e F | F T u e a | F T u e l | F T u e s | F T u e e | F T e T T | F T e T r | F T e T u | F T e T e | F T e T F | F T e T a | F T e T l | F T e T s | F T e T e | F T e r T | F T e r r | F T e r u | F T e r e | F T e r F | F T e r a | F T e r l | F T e r s | F T e r e | F T e u T | F T e u r | F T e u u | F T e u e | F T e u F | F T e u a | F T e u l | F T e u s | F T e u e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T e F T | F T e F r | F T e F u | F T e F e | F T e F F | F T e F a | F T e F l | F T e F s | F T e F e | F T e a T | F T e a r | F T e a u | F T e a e | F T e a F | F T e a a | F T e a l | F T e a s | F T e a e | F T e l T | F T e l r | F T e l u | F T e l e | F T e l F | F T e l a | F T e l l | F T e l s | F T e l e | F T e s T | F T e s r | F T e s u | F T e s e | F T e s F | F T e s a | F T e s l | F T e s s | F T e s e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T F T T | F T F T r | F T F T u | F T F T e | F T F T F | F T F T a | F T F T l | F T F T s | F T F T e | F T F r T | F T F r r | F T F r u | F T F r e | F T F r F | F T F r a | F T F r l | F T F r s | F T F r e | F T F u T | F T F u r | F T F u u | F T F u e | F T F u F | F T F u a | F T F u l | F T F u s | F T F u e | F T F e T | F T F e r | F T F e u | F T F e e | F T F e F | F T F e a | F T F e l | F T F e s | F T F e e | F T F F T | F T F F r | F T F F u | F T F F e | F T F F F | F T F F a | F T F F l | F T F F s | F T F F e | F T F a T | F T F a r | F T F a u | F T F a e | F T F a F | F T F a a | F T F a l | F T F a s | F T F a e | F T F l T | F T F l r | F T F l u | F T F l e | F T F l F | F T F l a | F T F l l | F T F l s | F T F l e | F T F s T | F T F s r | F T F s u | F T F s e | F T F s F | F T F s a | F T F s l | F T F s s | F T F s e | F T F e T | F T F e r | F T F e u | F T F e e | F T F e F | F T F e a | F T F e l | F T F e s | F T F e e | F T a T T | F T a T r | F T a T u | F T a T e | F T a T F | F T a T a | F T a T l | F T a T s | F T a T e | F T a r T | F T a r r | F T a r u | F T a r e | F T a r F | F T a r a | F T a r l | F T a r s | F T a r e | F T a u T | F T a u r | F T a u u | F T a u e | F T a u F | F T a u a | F T a u l | F T a u s | F T a u e | F T a e T | F T a e r | F T a e u | F T a e e | F T a e F | F T a e a | F T a e l | F T a e s | F T a e e | F T a F T | F T a F r | F T a F u | F T a F e | F T a F F | F T a F a | F T a F l | F T a F s | F T a F e | F T a a T | F T a a r | F T a a u | F T a a e | F T a a F | F T a a a | F T a a l | F T a a s | F T a a e | F T a l T | F T a l r | F T a l u | F T a l e | F T a l F | F T a l a | F T a l l | F T a l s | F T a l e | F T a s T | F T a s r | F T a s u | F T a s e | F T a s F | F T a s a | F T a s l | F T a s s | F T a s e | F T a e T | F T a e r | F T a e u | F T a e e | F T a e F | F T a e a | F T a e l | F T a e s | F T a e e | F T l T T | F T l T r | F T l T u | F T l T e | F T l T F | F T l T a | F T l T l | F T l T s | F T l T e | F T l r T | F T l r r | F T l r u | F T l r e | F T l r F | F T l r a | F T l r l | F T l r s | F T l r e | F T l u T | F T l u r | F T l u u | F T l u e | F T l u F | F T l u a | F T l u l | F T l u s | F T l u e | F T l e T | F T l e r | F T l e u | F T l e e | F T l e F | F T l e a | F T l e l | F T l e s | F T l e e | F T l F T | F T l F r | F T l F u | F T l F e | F T l F F | F T l F a | F T l F l | F T l F s | F T l F e | F T l a T | F T l a r | F T l a u | F T l a e | F T l a F | F T l a a | F T l a l | F T l a s | F T l a e | F T l l T | F T l l r | F T l l u | F T l l e | F T l l F | F T l l a | F T l l l | F T l l s | F T l l e | F T l s T | F T l s r | F T l s u | F T l s e | F T l s F | F T l s a | F T l s l | F T l s s | F T l s e | F T l e T | F T l e r | F T l e u | F T l e e | F T l e F | F T l e a | F T l e l | F T l e s | F T l e e | F T s T T | F T s T r | F T s T u | F T s T e | F T s T F | F T s T a | F T s T l | F T s T s | F T s T e | F T s r T | F T s r r | F T s r u | F T s r e | F T s r F | F T s r a | F T s r l | F T s r s | F T s r e | F T s u T | F T s u r | F T s u u | F T s u e | F T s u F | F T s u a | F T s u l | F T s u s | F T s u e | F T s e T | F T s e r | F T s e u | F T s e e | F T s e F | F T s e a | F T s e l | F T s e s | F T s e e | F T s F T | F T s F r | F T s F u | F T s F e | F T s F F | F T s F a | F T s F l | F T s F s | F T s F e | F T s a T | F T s a r | F T s a u | F T s a e | F T s a F | F T s a a | F T s a l | F T s a s | F T s a e | F T s l T | F T s l r | F T s l u | F T s l e | F T s l F | F T s l a | F T s l l | F T s l s | F T s l e | F T s s T | F T s s r | F T s s u | F T s s e | F T s s F | F T s s a | F T s s l | F T s s s | F T s s e | F T s e T | F T s e r | F T s e u | F T s e e | F T s e F | F T s e a | F T s e l | F T s e s | F T s e e | F T e T T | F T e T r | F T e T u | F T e T e | F T e T F | F T e T a | F T e T l | F T e T s | F T e T e | F T e r T | F T e r r | F T e r u | F T e r e | F T e r F | F T e r a | F T e r l | F T e r s | F T e r e | F T e u T | F T e u r | F T e u u | F T e u e | F T e u F | F T e u a | F T e u l | F T e u s | F T e u e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T e F T | F T e F r | F T e F u | F T e F e | F T e F F | F T e F a | F T e F l | F T e F s | F T e F e | F T e a T | F T e a r | F T e a u | F T e a e | F T e a F | F T e a a | F T e a l | F T e a s | F T e a e | F T e l T | F T e l r | F T e l u | F T e l e | F T e l F | F T e l a | F T e l l | F T e l s | F T e l e | F T e s T | F T e s r | F T e s u | F T e s e | F T e s F | F T e s a | F T e s l | F T e s s | F T e s e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F r T T T | F r T T r | F r T T u | F r T T e | F r T T F | F r T T a | F r T T l | F r T T s | F r T T e | F r T r T | F r T r r | F r T r u | F r T r e | F r T r F | F r T r a | F r T r l | F r T r s | F r T r e | F r T u T | F r T u r | F r T u u | F r T u e | F r T u F | F r T u a | F r T u l | F r T u s | F r T u e | F r T e T | F r T e r | F r T e u | F r T e e | F r T e F | F r T e a | F r T e l | F r T e s | F r T e e | F r T F T | F r T F r | F r T F u | F r T F e | F r T F F | F r T F a | F r T F l | F r T F s | F r T F e | F r T a T | F r T a r | F r T a u | F r T a e | F r T a F | F r T a a | F r T a l | F r T a s | F r T a e | F r T l T | F r T l r | F r T l u | F r T l e | F r T l F | F r T l a | F r T l l | F r T l s | F r T l e | F r T s T | F r T s r | F r T s u | F r T s e | F r T s F | F r T s a | F r T s l | F r T s s | F r T s e | F r T e T | F r T e r | F r T e u | F r T e e | F r T e F | F r T e a | F r T e l | F r T e s | F r T e e | F r r T T | F r r T r | F r r T u | F r r T e | F r r T F | F r r T a | F r r T l | F r r T s | F r r T e | F r r r T | F r r r r | F r r r u | F r r r e | F r r r F | F r r r a | F r r r l | F r r r s | F r r r e | F r r u T | F r r u r | F r r u u | F r r u e | F r r u F | F r r u a | F r r u l | F r r u s | F r r u e | F r r e T | F r r e r | F r r e u | F r r e e | F r r e F | F r r e a | F r r e l | F r r e s | F r r e e | F r r F T | F r r F r | F r r F u | F r r F e | F r r F F | F r r F a | F r r F l | F r r F s | F r r F e | F r r a T | F r r a r | F r r a u | F r r a e | F r r a F | F r r a a | F r r a l | F r r a s | F r r a e | F r r l T | F r r l r | F r r l u | F r r l e | F r r l F | F r r l a | F r r l l | F r r l s | F r r l e | F r r s T | F r r s r | F r r s u | F r r s e | F r r s F | F r r s a | F r r s l | F r r s s | F r r s e | F r r e T | F r r e r | F r r e u | F r r e e | F r r e F | F r r e a | F r r e l | F r r e s | F r r e e | F r u T T | F r u T r | F r u T u | F r u T e | F r u T F | F r u T a | F r u T l | F r u T s | F r u T e | F r u r T | F r u r r | F r u r u | F r u r e | F r u r F | F r u r a | F r u r l | F r u r s | F r u r e | F r u u T | F r u u r | F r u u u | F r u u e | F r u u F | F r u u a | F r u u l | F r u u s | F r u u e | F r u e T | F r u e r | F r u e u | F r u e e | F r u e F | F r u e a | F r u e l | F r u e s | F r u e e | F r u F T | F r u F r | F r u F u | F r u F e | F r u F F | F r u F a | F r u F l | F r u F s | F r u F e | F r u a T | F r u a r | F r u a u | F r u a e | F r u a F | F r u a a | F r u a l | F r u a s | F r u a e | F r u l T | F r u l r | F r u l u | F r u l e | F r u l F | F r u l a | F r u l l | F r u l s | F r u l e | F r u s T | F r u s r | F r u s u | F r u s e | F r u s F | F r u s a | F r u s l | F r u s s | F r u s e | F r u e T | F r u e r | F r u e u | F r u e e | F r u e F | F r u e a | F r u e l | F r u e s | F r u e e | F r e T T | F r e T r | F r e T u | F r e T e | F r e T F | F r e T a | F r e T l | F r e T s | F r e T e | F r e r T | F r e r r | F r e r u | F r e r e | F r e r F | F r e r a | F r e r l | F r e r s | F r e r e | F r e u T | F r e u r | F r e u u | F r e u e | F r e u F | F r e u a | F r e u l | F r e u s | F r e u e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r e F T | F r e F r | F r e F u | F r e F e | F r e F F | F r e F a | F r e F l | F r e F s | F r e F e | F r e a T | F r e a r | F r e a u | F r e a e | F r e a F | F r e a a | F r e a l | F r e a s | F r e a e | F r e l T | F r e l r | F r e l u | F r e l e | F r e l F | F r e l a | F r e l l | F r e l s | F r e l e | F r e s T | F r e s r | F r e s u | F r e s e | F r e s F | F r e s a | F r e s l | F r e s s | F r e s e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r F T T | F r F T r | F r F T u | F r F T e | F r F T F | F r F T a | F r F T l | F r F T s | F r F T e | F r F r T | F r F r r | F r F r u | F r F r e | F r F r F | F r F r a | F r F r l | F r F r s | F r F r e | F r F u T | F r F u r | F r F u u | F r F u e | F r F u F | F r F u a | F r F u l | F r F u s | F r F u e | F r F e T | F r F e r | F r F e u | F r F e e | F r F e F | F r F e a | F r F e l | F r F e s | F r F e e | F r F F T | F r F F r | F r F F u | F r F F e | F r F F F | F r F F a | F r F F l | F r F F s | F r F F e | F r F a T | F r F a r | F r F a u | F r F a e | F r F a F | F r F a a | F r F a l | F r F a s | F r F a e | F r F l T | F r F l r | F r F l u | F r F l e | F r F l F | F r F l a | F r F l l | F r F l s | F r F l e | F r F s T | F r F s r | F r F s u | F r F s e | F r F s F | F r F s a | F r F s l | F r F s s | F r F s e | F r F e T | F r F e r | F r F e u | F r F e e | F r F e F | F r F e a | F r F e l | F r F e s | F r F e e | F r a T T | F r a T r | F r a T u | F r a T e | F r a T F | F r a T a | F r a T l | F r a T s | F r a T e | F r a r T | F r a r r | F r a r u | F r a r e | F r a r F | F r a r a | F r a r l | F r a r s | F r a r e | F r a u T | F r a u r | F r a u u | F r a u e | F r a u F | F r a u a | F r a u l | F r a u s | F r a u e | F r a e T | F r a e r | F r a e u | F r a e e | F r a e F | F r a e a | F r a e l | F r a e s | F r a e e | F r a F T | F r a F r | F r a F u | F r a F e | F r a F F | F r a F a | F r a F l | F r a F s | F r a F e | F r a a T | F r a a r | F r a a u | F r a a e | F r a a F | F r a a a | F r a a l | F r a a s | F r a a e | F r a l T | F r a l r | F r a l u | F r a l e | F r a l F | F r a l a | F r a l l | F r a l s | F r a l e | F r a s T | F r a s r | F r a s u | F r a s e | F r a s F | F r a s a | F r a s l | F r a s s | F r a s e | F r a e T | F r a e r | F r a e u | F r a e e | F r a e F | F r a e a | F r a e l | F r a e s | F r a e e | F r l T T | F r l T r | F r l T u | F r l T e | F r l T F | F r l T a | F r l T l | F r l T s | F r l T e | F r l r T | F r l r r | F r l r u | F r l r e | F r l r F | F r l r a | F r l r l | F r l r s | F r l r e | F r l u T | F r l u r | F r l u u | F r l u e | F r l u F | F r l u a | F r l u l | F r l u s | F r l u e | F r l e T | F r l e r | F r l e u | F r l e e | F r l e F | F r l e a | F r l e l | F r l e s | F r l e e | F r l F T | F r l F r | F r l F u | F r l F e | F r l F F | F r l F a | F r l F l | F r l F s | F r l F e | F r l a T | F r l a r | F r l a u | F r l a e | F r l a F | F r l a a | F r l a l | F r l a s | F r l a e | F r l l T | F r l l r | F r l l u | F r l l e | F r l l F | F r l l a | F r l l l | F r l l s | F r l l e | F r l s T | F r l s r | F r l s u | F r l s e | F r l s F | F r l s a | F r l s l | F r l s s | F r l s e | F r l e T | F r l e r | F r l e u | F r l e e | F r l e F | F r l e a | F r l e l | F r l e s | F r l e e | F r s T T | F r s T r | F r s T u | F r s T e | F r s T F | F r s T a | F r s T l | F r s T s | F r s T e | F r s r T | F r s r r | F r s r u | F r s r e | F r s r F | F r s r a | F r s r l | F r s r s | F r s r e | F r s u T | F r s u r | F r s u u | F r s u e | F r s u F | F r s u a | F r s u l | F r s u s | F r s u e | F r s e T | F r s e r | F r s e u | F r s e e | F r s e F | F r s e a | F r s e l | F r s e s | F r s e e | F r s F T | F r s F r | F r s F u | F r s F e | F r s F F | F r s F a | F r s F l | F r s F s | F r s F e | F r s a T | F r s a r | F r s a u | F r s a e | F r s a F | F r s a a | F r s a l | F r s a s | F r s a e | F r s l T | F r s l r | F r s l u | F r s l e | F r s l F | F r s l a | F r s l l | F r s l s | F r s l e | F r s s T | F r s s r | F r s s u | F r s s e | F r s s F | F r s s a | F r s s l | F r s s s | F r s s e | F r s e T | F r s e r | F r s e u | F r s e e | F r s e F | F r s e a | F r s e l | F r s e s | F r s e e | F r e T T | F r e T r | F r e T u | F r e T e | F r e T F | F r e T a | F r e T l | F r e T s | F r e T e | F r e r T | F r e r r | F r e r u | F r e r e | F r e r F | F r e r a | F r e r l | F r e r s | F r e r e | F r e u T | F r e u r | F r e u u | F r e u e | F r e u F | F r e u a | F r e u l | F r e u s | F r e u e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r e F T | F r e F r | F r e F u | F r e F e | F r e F F | F r e F a | F r e F l | F r e F s | F r e F e | F r e a T | F r e a r | F r e a u | F r e a e | F r e a F | F r e a a | F r e a l | F r e a s | F r e a e | F r e l T | F r e l r | F r e l u | F r e l e | F r e l F | F r e l a | F r e l l | F r e l s | F r e l e | F r e s T | F r e s r | F r e s u | F r e s e | F r e s F | F r e s a | F r e s l | F r e s s | F r e s e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F u T T T | F u T T r | F u T T u | F u T T e | F u T T F | F u T T a | F u T T l | F u T T s | F u T T e | F u T r T | F u T r r | F u T r u | F u T r e | F u T r F | F u T r a | F u T r l | F u T r s | F u T r e | F u T u T | F u T u r | F u T u u | F u T u e | F u T u F | F u T u a | F u T u l | F u T u s | F u T u e | F u T e T | F u T e r | F u T e u | F u T e e | F u T e F | F u T e a | F u T e l | F u T e s | F u T e e | F u T F T | F u T F r | F u T F u | F u T F e | F u T F F | F u T F a | F u T F l | F u T F s | F u T F e | F u T a T | F u T a r | F u T a u | F u T a e | F u T a F | F u T a a | F u T a l | F u T a s | F u T a e | F u T l T | F u T l r | F u T l u | F u T l e | F u T l F | F u T l a | F u T l l | F u T l s | F u T l e | F u T s T | F u T s r | F u T s u | F u T s e | F u T s F | F u T s a | F u T s l | F u T s s | F u T s e | F u T e T | F u T e r | F u T e u | F u T e e | F u T e F | F u T e a | F u T e l | F u T e s | F u T e e | F u r T T | F u r T r | F u r T u | F u r T e | F u r T F | F u r T a | F u r T l | F u r T s | F u r T e | F u r r T | F u r r r | F u r r u | F u r r e | F u r r F | F u r r a | F u r r l | F u r r s | F u r r e | F u r u T | F u r u r | F u r u u | F u r u e | F u r u F | F u r u a | F u r u l | F u r u s | F u r u e | F u r e T | F u r e r | F u r e u | F u r e e | F u r e F | F u r e a | F u r e l | F u r e s | F u r e e | F u r F T | F u r F r | F u r F u | F u r F e | F u r F F | F u r F a | F u r F l | F u r F s | F u r F e | F u r a T | F u r a r | F u r a u | F u r a e | F u r a F | F u r a a | F u r a l | F u r a s | F u r a e | F u r l T | F u r l r | F u r l u | F u r l e | F u r l F | F u r l a | F u r l l | F u r l s | F u r l e | F u r s T | F u r s r | F u r s u | F u r s e | F u r s F | F u r s a | F u r s l | F u r s s | F u r s e | F u r e T | F u r e r | F u r e u | F u r e e | F u r e F | F u r e a | F u r e l | F u r e s | F u r e e | F u u T T | F u u T r | F u u T u | F u u T e | F u u T F | F u u T a | F u u T l | F u u T s | F u u T e | F u u r T | F u u r r | F u u r u | F u u r e | F u u r F | F u u r a | F u u r l | F u u r s | F u u r e | F u u u T | F u u u r | F u u u u | F u u u e | F u u u F | F u u u a | F u u u l | F u u u s | F u u u e | F u u e T | F u u e r | F u u e u | F u u e e | F u u e F | F u u e a | F u u e l | F u u e s | F u u e e | F u u F T | F u u F r | F u u F u | F u u F e | F u u F F | F u u F a | F u u F l | F u u F s | F u u F e | F u u a T | F u u a r | F u u a u | F u u a e | F u u a F | F u u a a | F u u a l | F u u a s | F u u a e | F u u l T | F u u l r | F u u l u | F u u l e | F u u l F | F u u l a | F u u l l | F u u l s | F u u l e | F u u s T | F u u s r | F u u s u | F u u s e | F u u s F | F u u s a | F u u s l | F u u s s | F u u s e | F u u e T | F u u e r | F u u e u | F u u e e | F u u e F | F u u e a | F u u e l | F u u e s | F u u e e | F u e T T | F u e T r | F u e T u | F u e T e | F u e T F | F u e T a | F u e T l | F u e T s | F u e T e | F u e r T | F u e r r | F u e r u | F u e r e | F u e r F | F u e r a | F u e r l | F u e r s | F u e r e | F u e u T | F u e u r | F u e u u | F u e u e | F u e u F | F u e u a | F u e u l | F u e u s | F u e u e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u e F T | F u e F r | F u e F u | F u e F e | F u e F F | F u e F a | F u e F l | F u e F s | F u e F e | F u e a T | F u e a r | F u e a u | F u e a e | F u e a F | F u e a a | F u e a l | F u e a s | F u e a e | F u e l T | F u e l r | F u e l u | F u e l e | F u e l F | F u e l a | F u e l l | F u e l s | F u e l e | F u e s T | F u e s r | F u e s u | F u e s e | F u e s F | F u e s a | F u e s l | F u e s s | F u e s e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u F T T | F u F T r | F u F T u | F u F T e | F u F T F | F u F T a | F u F T l | F u F T s | F u F T e | F u F r T | F u F r r | F u F r u | F u F r e | F u F r F | F u F r a | F u F r l | F u F r s | F u F r e | F u F u T | F u F u r | F u F u u | F u F u e | F u F u F | F u F u a | F u F u l | F u F u s | F u F u e | F u F e T | F u F e r | F u F e u | F u F e e | F u F e F | F u F e a | F u F e l | F u F e s | F u F e e | F u F F T | F u F F r | F u F F u | F u F F e | F u F F F | F u F F a | F u F F l | F u F F s | F u F F e | F u F a T | F u F a r | F u F a u | F u F a e | F u F a F | F u F a a | F u F a l | F u F a s | F u F a e | F u F l T | F u F l r | F u F l u | F u F l e | F u F l F | F u F l a | F u F l l | F u F l s | F u F l e | F u F s T | F u F s r | F u F s u | F u F s e | F u F s F | F u F s a | F u F s l | F u F s s | F u F s e | F u F e T | F u F e r | F u F e u | F u F e e | F u F e F | F u F e a | F u F e l | F u F e s | F u F e e | F u a T T | F u a T r | F u a T u | F u a T e | F u a T F | F u a T a | F u a T l | F u a T s | F u a T e | F u a r T | F u a r r | F u a r u | F u a r e | F u a r F | F u a r a | F u a r l | F u a r s | F u a r e | F u a u T | F u a u r | F u a u u | F u a u e | F u a u F | F u a u a | F u a u l | F u a u s | F u a u e | F u a e T | F u a e r | F u a e u | F u a e e | F u a e F | F u a e a | F u a e l | F u a e s | F u a e e | F u a F T | F u a F r | F u a F u | F u a F e | F u a F F | F u a F a | F u a F l | F u a F s | F u a F e | F u a a T | F u a a r | F u a a u | F u a a e | F u a a F | F u a a a | F u a a l | F u a a s | F u a a e | F u a l T | F u a l r | F u a l u | F u a l e | F u a l F | F u a l a | F u a l l | F u a l s | F u a l e | F u a s T | F u a s r | F u a s u | F u a s e | F u a s F | F u a s a | F u a s l | F u a s s | F u a s e | F u a e T | F u a e r | F u a e u | F u a e e | F u a e F | F u a e a | F u a e l | F u a e s | F u a e e | F u l T T | F u l T r | F u l T u | F u l T e | F u l T F | F u l T a | F u l T l | F u l T s | F u l T e | F u l r T | F u l r r | F u l r u | F u l r e | F u l r F | F u l r a | F u l r l | F u l r s | F u l r e | F u l u T | F u l u r | F u l u u | F u l u e | F u l u F | F u l u a | F u l u l | F u l u s | F u l u e | F u l e T | F u l e r | F u l e u | F u l e e | F u l e F | F u l e a | F u l e l | F u l e s | F u l e e | F u l F T | F u l F r | F u l F u | F u l F e | F u l F F | F u l F a | F u l F l | F u l F s | F u l F e | F u l a T | F u l a r | F u l a u | F u l a e | F u l a F | F u l a a | F u l a l | F u l a s | F u l a e | F u l l T | F u l l r | F u l l u | F u l l e | F u l l F | F u l l a | F u l l l | F u l l s | F u l l e | F u l s T | F u l s r | F u l s u | F u l s e | F u l s F | F u l s a | F u l s l | F u l s s | F u l s e | F u l e T | F u l e r | F u l e u | F u l e e | F u l e F | F u l e a | F u l e l | F u l e s | F u l e e | F u s T T | F u s T r | F u s T u | F u s T e | F u s T F | F u s T a | F u s T l | F u s T s | F u s T e | F u s r T | F u s r r | F u s r u | F u s r e | F u s r F | F u s r a | F u s r l | F u s r s | F u s r e | F u s u T | F u s u r | F u s u u | F u s u e | F u s u F | F u s u a | F u s u l | F u s u s | F u s u e | F u s e T | F u s e r | F u s e u | F u s e e | F u s e F | F u s e a | F u s e l | F u s e s | F u s e e | F u s F T | F u s F r | F u s F u | F u s F e | F u s F F | F u s F a | F u s F l | F u s F s | F u s F e | F u s a T | F u s a r | F u s a u | F u s a e | F u s a F | F u s a a | F u s a l | F u s a s | F u s a e | F u s l T | F u s l r | F u s l u | F u s l e | F u s l F | F u s l a | F u s l l | F u s l s | F u s l e | F u s s T | F u s s r | F u s s u | F u s s e | F u s s F | F u s s a | F u s s l | F u s s s | F u s s e | F u s e T | F u s e r | F u s e u | F u s e e | F u s e F | F u s e a | F u s e l | F u s e s | F u s e e | F u e T T | F u e T r | F u e T u | F u e T e | F u e T F | F u e T a | F u e T l | F u e T s | F u e T e | F u e r T | F u e r r | F u e r u | F u e r e | F u e r F | F u e r a | F u e r l | F u e r s | F u e r e | F u e u T | F u e u r | F u e u u | F u e u e | F u e u F | F u e u a | F u e u l | F u e u s | F u e u e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u e F T | F u e F r | F u e F u | F u e F e | F u e F F | F u e F a | F u e F l | F u e F s | F u e F e | F u e a T | F u e a r | F u e a u | F u e a e | F u e a F | F u e a a | F u e a l | F u e a s | F u e a e | F u e l T | F u e l r | F u e l u | F u e l e | F u e l F | F u e l a | F u e l l | F u e l s | F u e l e | F u e s T | F u e s r | F u e s u | F u e s e | F u e s F | F u e s a | F u e s l | F u e s s | F u e s e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F e T T T | F e T T r | F e T T u | F e T T e | F e T T F | F e T T a | F e T T l | F e T T s | F e T T e | F e T r T | F e T r r | F e T r u | F e T r e | F e T r F | F e T r a | F e T r l | F e T r s | F e T r e | F e T u T | F e T u r | F e T u u | F e T u e | F e T u F | F e T u a | F e T u l | F e T u s | F e T u e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e T F T | F e T F r | F e T F u | F e T F e | F e T F F | F e T F a | F e T F l | F e T F s | F e T F e | F e T a T | F e T a r | F e T a u | F e T a e | F e T a F | F e T a a | F e T a l | F e T a s | F e T a e | F e T l T | F e T l r | F e T l u | F e T l e | F e T l F | F e T l a | F e T l l | F e T l s | F e T l e | F e T s T | F e T s r | F e T s u | F e T s e | F e T s F | F e T s a | F e T s l | F e T s s | F e T s e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e r T T | F e r T r | F e r T u | F e r T e | F e r T F | F e r T a | F e r T l | F e r T s | F e r T e | F e r r T | F e r r r | F e r r u | F e r r e | F e r r F | F e r r a | F e r r l | F e r r s | F e r r e | F e r u T | F e r u r | F e r u u | F e r u e | F e r u F | F e r u a | F e r u l | F e r u s | F e r u e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e r F T | F e r F r | F e r F u | F e r F e | F e r F F | F e r F a | F e r F l | F e r F s | F e r F e | F e r a T | F e r a r | F e r a u | F e r a e | F e r a F | F e r a a | F e r a l | F e r a s | F e r a e | F e r l T | F e r l r | F e r l u | F e r l e | F e r l F | F e r l a | F e r l l | F e r l s | F e r l e | F e r s T | F e r s r | F e r s u | F e r s e | F e r s F | F e r s a | F e r s l | F e r s s | F e r s e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e u T T | F e u T r | F e u T u | F e u T e | F e u T F | F e u T a | F e u T l | F e u T s | F e u T e | F e u r T | F e u r r | F e u r u | F e u r e | F e u r F | F e u r a | F e u r l | F e u r s | F e u r e | F e u u T | F e u u r | F e u u u | F e u u e | F e u u F | F e u u a | F e u u l | F e u u s | F e u u e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e u F T | F e u F r | F e u F u | F e u F e | F e u F F | F e u F a | F e u F l | F e u F s | F e u F e | F e u a T | F e u a r | F e u a u | F e u a e | F e u a F | F e u a a | F e u a l | F e u a s | F e u a e | F e u l T | F e u l r | F e u l u | F e u l e | F e u l F | F e u l a | F e u l l | F e u l s | F e u l e | F e u s T | F e u s r | F e u s u | F e u s e | F e u s F | F e u s a | F e u s l | F e u s s | F e u s e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e F T T | F e F T r | F e F T u | F e F T e | F e F T F | F e F T a | F e F T l | F e F T s | F e F T e | F e F r T | F e F r r | F e F r u | F e F r e | F e F r F | F e F r a | F e F r l | F e F r s | F e F r e | F e F u T | F e F u r | F e F u u | F e F u e | F e F u F | F e F u a | F e F u l | F e F u s | F e F u e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e F F T | F e F F r | F e F F u | F e F F e | F e F F F | F e F F a | F e F F l | F e F F s | F e F F e | F e F a T | F e F a r | F e F a u | F e F a e | F e F a F | F e F a a | F e F a l | F e F a s | F e F a e | F e F l T | F e F l r | F e F l u | F e F l e | F e F l F | F e F l a | F e F l l | F e F l s | F e F l e | F e F s T | F e F s r | F e F s u | F e F s e | F e F s F | F e F s a | F e F s l | F e F s s | F e F s e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e a T T | F e a T r | F e a T u | F e a T e | F e a T F | F e a T a | F e a T l | F e a T s | F e a T e | F e a r T | F e a r r | F e a r u | F e a r e | F e a r F | F e a r a | F e a r l | F e a r s | F e a r e | F e a u T | F e a u r | F e a u u | F e a u e | F e a u F | F e a u a | F e a u l | F e a u s | F e a u e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e a F T | F e a F r | F e a F u | F e a F e | F e a F F | F e a F a | F e a F l | F e a F s | F e a F e | F e a a T | F e a a r | F e a a u | F e a a e | F e a a F | F e a a a | F e a a l | F e a a s | F e a a e | F e a l T | F e a l r | F e a l u | F e a l e | F e a l F | F e a l a | F e a l l | F e a l s | F e a l e | F e a s T | F e a s r | F e a s u | F e a s e | F e a s F | F e a s a | F e a s l | F e a s s | F e a s e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e l T T | F e l T r | F e l T u | F e l T e | F e l T F | F e l T a | F e l T l | F e l T s | F e l T e | F e l r T | F e l r r | F e l r u | F e l r e | F e l r F | F e l r a | F e l r l | F e l r s | F e l r e | F e l u T | F e l u r | F e l u u | F e l u e | F e l u F | F e l u a | F e l u l | F e l u s | F e l u e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e l F T | F e l F r | F e l F u | F e l F e | F e l F F | F e l F a | F e l F l | F e l F s | F e l F e | F e l a T | F e l a r | F e l a u | F e l a e | F e l a F | F e l a a | F e l a l | F e l a s | F e l a e | F e l l T | F e l l r | F e l l u | F e l l e | F e l l F | F e l l a | F e l l l | F e l l s | F e l l e | F e l s T | F e l s r | F e l s u | F e l s e | F e l s F | F e l s a | F e l s l | F e l s s | F e l s e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e s T T | F e s T r | F e s T u | F e s T e | F e s T F | F e s T a | F e s T l | F e s T s | F e s T e | F e s r T | F e s r r | F e s r u | F e s r e | F e s r F | F e s r a | F e s r l | F e s r s | F e s r e | F e s u T | F e s u r | F e s u u | F e s u e | F e s u F | F e s u a | F e s u l | F e s u s | F e s u e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e s F T | F e s F r | F e s F u | F e s F e | F e s F F | F e s F a | F e s F l | F e s F s | F e s F e | F e s a T | F e s a r | F e s a u | F e s a e | F e s a F | F e s a a | F e s a l | F e s a s | F e s a e | F e s l T | F e s l r | F e s l u | F e s l e | F e s l F | F e s l a | F e s l l | F e s l s | F e s l e | F e s s T | F e s s r | F e s s u | F e s s e | F e s s F | F e s s a | F e s s l | F e s s s | F e s s e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F F T T T | F F T T r | F F T T u | F F T T e | F F T T F | F F T T a | F F T T l | F F T T s | F F T T e | F F T r T | F F T r r | F F T r u | F F T r e | F F T r F | F F T r a | F F T r l | F F T r s | F F T r e | F F T u T | F F T u r | F F T u u | F F T u e | F F T u F | F F T u a | F F T u l | F F T u s | F F T u e | F F T e T | F F T e r | F F T e u | F F T e e | F F T e F | F F T e a | F F T e l | F F T e s | F F T e e | F F T F T | F F T F r | F F T F u | F F T F e | F F T F F | F F T F a | F F T F l | F F T F s | F F T F e | F F T a T | F F T a r | F F T a u | F F T a e | F F T a F | F F T a a | F F T a l | F F T a s | F F T a e | F F T l T | F F T l r | F F T l u | F F T l e | F F T l F | F F T l a | F F T l l | F F T l s | F F T l e | F F T s T | F F T s r | F F T s u | F F T s e | F F T s F | F F T s a | F F T s l | F F T s s | F F T s e | F F T e T | F F T e r | F F T e u | F F T e e | F F T e F | F F T e a | F F T e l | F F T e s | F F T e e | F F r T T | F F r T r | F F r T u | F F r T e | F F r T F | F F r T a | F F r T l | F F r T s | F F r T e | F F r r T | F F r r r | F F r r u | F F r r e | F F r r F | F F r r a | F F r r l | F F r r s | F F r r e | F F r u T | F F r u r | F F r u u | F F r u e | F F r u F | F F r u a | F F r u l | F F r u s | F F r u e | F F r e T | F F r e r | F F r e u | F F r e e | F F r e F | F F r e a | F F r e l | F F r e s | F F r e e | F F r F T | F F r F r | F F r F u | F F r F e | F F r F F | F F r F a | F F r F l | F F r F s | F F r F e | F F r a T | F F r a r | F F r a u | F F r a e | F F r a F | F F r a a | F F r a l | F F r a s | F F r a e | F F r l T | F F r l r | F F r l u | F F r l e | F F r l F | F F r l a | F F r l l | F F r l s | F F r l e | F F r s T | F F r s r | F F r s u | F F r s e | F F r s F | F F r s a | F F r s l | F F r s s | F F r s e | F F r e T | F F r e r | F F r e u | F F r e e | F F r e F | F F r e a | F F r e l | F F r e s | F F r e e | F F u T T | F F u T r | F F u T u | F F u T e | F F u T F | F F u T a | F F u T l | F F u T s | F F u T e | F F u r T | F F u r r | F F u r u | F F u r e | F F u r F | F F u r a | F F u r l | F F u r s | F F u r e | F F u u T | F F u u r | F F u u u | F F u u e | F F u u F | F F u u a | F F u u l | F F u u s | F F u u e | F F u e T | F F u e r | F F u e u | F F u e e | F F u e F | F F u e a | F F u e l | F F u e s | F F u e e | F F u F T | F F u F r | F F u F u | F F u F e | F F u F F | F F u F a | F F u F l | F F u F s | F F u F e | F F u a T | F F u a r | F F u a u | F F u a e | F F u a F | F F u a a | F F u a l | F F u a s | F F u a e | F F u l T | F F u l r | F F u l u | F F u l e | F F u l F | F F u l a | F F u l l | F F u l s | F F u l e | F F u s T | F F u s r | F F u s u | F F u s e | F F u s F | F F u s a | F F u s l | F F u s s | F F u s e | F F u e T | F F u e r | F F u e u | F F u e e | F F u e F | F F u e a | F F u e l | F F u e s | F F u e e | F F e T T | F F e T r | F F e T u | F F e T e | F F e T F | F F e T a | F F e T l | F F e T s | F F e T e | F F e r T | F F e r r | F F e r u | F F e r e | F F e r F | F F e r a | F F e r l | F F e r s | F F e r e | F F e u T | F F e u r | F F e u u | F F e u e | F F e u F | F F e u a | F F e u l | F F e u s | F F e u e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F e F T | F F e F r | F F e F u | F F e F e | F F e F F | F F e F a | F F e F l | F F e F s | F F e F e | F F e a T | F F e a r | F F e a u | F F e a e | F F e a F | F F e a a | F F e a l | F F e a s | F F e a e | F F e l T | F F e l r | F F e l u | F F e l e | F F e l F | F F e l a | F F e l l | F F e l s | F F e l e | F F e s T | F F e s r | F F e s u | F F e s e | F F e s F | F F e s a | F F e s l | F F e s s | F F e s e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F F T T | F F F T r | F F F T u | F F F T e | F F F T F | F F F T a | F F F T l | F F F T s | F F F T e | F F F r T | F F F r r | F F F r u | F F F r e | F F F r F | F F F r a | F F F r l | F F F r s | F F F r e | F F F u T | F F F u r | F F F u u | F F F u e | F F F u F | F F F u a | F F F u l | F F F u s | F F F u e | F F F e T | F F F e r | F F F e u | F F F e e | F F F e F | F F F e a | F F F e l | F F F e s | F F F e e | F F F F T | F F F F r | F F F F u | F F F F e | F F F F F | F F F F a | F F F F l | F F F F s | F F F F e | F F F a T | F F F a r | F F F a u | F F F a e | F F F a F | F F F a a | F F F a l | F F F a s | F F F a e | F F F l T | F F F l r | F F F l u | F F F l e | F F F l F | F F F l a | F F F l l | F F F l s | F F F l e | F F F s T | F F F s r | F F F s u | F F F s e | F F F s F | F F F s a | F F F s l | F F F s s | F F F s e | F F F e T | F F F e r | F F F e u | F F F e e | F F F e F | F F F e a | F F F e l | F F F e s | F F F e e | F F a T T | F F a T r | F F a T u | F F a T e | F F a T F | F F a T a | F F a T l | F F a T s | F F a T e | F F a r T | F F a r r | F F a r u | F F a r e | F F a r F | F F a r a | F F a r l | F F a r s | F F a r e | F F a u T | F F a u r | F F a u u | F F a u e | F F a u F | F F a u a | F F a u l | F F a u s | F F a u e | F F a e T | F F a e r | F F a e u | F F a e e | F F a e F | F F a e a | F F a e l | F F a e s | F F a e e | F F a F T | F F a F r | F F a F u | F F a F e | F F a F F | F F a F a | F F a F l | F F a F s | F F a F e | F F a a T | F F a a r | F F a a u | F F a a e | F F a a F | F F a a a | F F a a l | F F a a s | F F a a e | F F a l T | F F a l r | F F a l u | F F a l e | F F a l F | F F a l a | F F a l l | F F a l s | F F a l e | F F a s T | F F a s r | F F a s u | F F a s e | F F a s F | F F a s a | F F a s l | F F a s s | F F a s e | F F a e T | F F a e r | F F a e u | F F a e e | F F a e F | F F a e a | F F a e l | F F a e s | F F a e e | F F l T T | F F l T r | F F l T u | F F l T e | F F l T F | F F l T a | F F l T l | F F l T s | F F l T e | F F l r T | F F l r r | F F l r u | F F l r e | F F l r F | F F l r a | F F l r l | F F l r s | F F l r e | F F l u T | F F l u r | F F l u u | F F l u e | F F l u F | F F l u a | F F l u l | F F l u s | F F l u e | F F l e T | F F l e r | F F l e u | F F l e e | F F l e F | F F l e a | F F l e l | F F l e s | F F l e e | F F l F T | F F l F r | F F l F u | F F l F e | F F l F F | F F l F a | F F l F l | F F l F s | F F l F e | F F l a T | F F l a r | F F l a u | F F l a e | F F l a F | F F l a a | F F l a l | F F l a s | F F l a e | F F l l T | F F l l r | F F l l u | F F l l e | F F l l F | F F l l a | F F l l l | F F l l s | F F l l e | F F l s T | F F l s r | F F l s u | F F l s e | F F l s F | F F l s a | F F l s l | F F l s s | F F l s e | F F l e T | F F l e r | F F l e u | F F l e e | F F l e F | F F l e a | F F l e l | F F l e s | F F l e e | F F s T T | F F s T r | F F s T u | F F s T e | F F s T F | F F s T a | F F s T l | F F s T s | F F s T e | F F s r T | F F s r r | F F s r u | F F s r e | F F s r F | F F s r a | F F s r l | F F s r s | F F s r e | F F s u T | F F s u r | F F s u u | F F s u e | F F s u F | F F s u a | F F s u l | F F s u s | F F s u e | F F s e T | F F s e r | F F s e u | F F s e e | F F s e F | F F s e a | F F s e l | F F s e s | F F s e e | F F s F T | F F s F r | F F s F u | F F s F e | F F s F F | F F s F a | F F s F l | F F s F s | F F s F e | F F s a T | F F s a r | F F s a u | F F s a e | F F s a F | F F s a a | F F s a l | F F s a s | F F s a e | F F s l T | F F s l r | F F s l u | F F s l e | F F s l F | F F s l a | F F s l l | F F s l s | F F s l e | F F s s T | F F s s r | F F s s u | F F s s e | F F s s F | F F s s a | F F s s l | F F s s s | F F s s e | F F s e T | F F s e r | F F s e u | F F s e e | F F s e F | F F s e a | F F s e l | F F s e s | F F s e e | F F e T T | F F e T r | F F e T u | F F e T e | F F e T F | F F e T a | F F e T l | F F e T s | F F e T e | F F e r T | F F e r r | F F e r u | F F e r e | F F e r F | F F e r a | F F e r l | F F e r s | F F e r e | F F e u T | F F e u r | F F e u u | F F e u e | F F e u F | F F e u a | F F e u l | F F e u s | F F e u e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F e F T | F F e F r | F F e F u | F F e F e | F F e F F | F F e F a | F F e F l | F F e F s | F F e F e | F F e a T | F F e a r | F F e a u | F F e a e | F F e a F | F F e a a | F F e a l | F F e a s | F F e a e | F F e l T | F F e l r | F F e l u | F F e l e | F F e l F | F F e l a | F F e l l | F F e l s | F F e l e | F F e s T | F F e s r | F F e s u | F F e s e | F F e s F | F F e s a | F F e s l | F F e s s | F F e s e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F a T T T | F a T T r | F a T T u | F a T T e | F a T T F | F a T T a | F a T T l | F a T T s | F a T T e | F a T r T | F a T r r | F a T r u | F a T r e | F a T r F | F a T r a | F a T r l | F a T r s | F a T r e | F a T u T | F a T u r | F a T u u | F a T u e | F a T u F | F a T u a | F a T u l | F a T u s | F a T u e | F a T e T | F a T e r | F a T e u | F a T e e | F a T e F | F a T e a | F a T e l | F a T e s | F a T e e | F a T F T | F a T F r | F a T F u | F a T F e | F a T F F | F a T F a | F a T F l | F a T F s | F a T F e | F a T a T | F a T a r | F a T a u | F a T a e | F a T a F | F a T a a | F a T a l | F a T a s | F a T a e | F a T l T | F a T l r | F a T l u | F a T l e | F a T l F | F a T l a | F a T l l | F a T l s | F a T l e | F a T s T | F a T s r | F a T s u | F a T s e | F a T s F | F a T s a | F a T s l | F a T s s | F a T s e | F a T e T | F a T e r | F a T e u | F a T e e | F a T e F | F a T e a | F a T e l | F a T e s | F a T e e | F a r T T | F a r T r | F a r T u | F a r T e | F a r T F | F a r T a | F a r T l | F a r T s | F a r T e | F a r r T | F a r r r | F a r r u | F a r r e | F a r r F | F a r r a | F a r r l | F a r r s | F a r r e | F a r u T | F a r u r | F a r u u | F a r u e | F a r u F | F a r u a | F a r u l | F a r u s | F a r u e | F a r e T | F a r e r | F a r e u | F a r e e | F a r e F | F a r e a | F a r e l | F a r e s | F a r e e | F a r F T | F a r F r | F a r F u | F a r F e | F a r F F | F a r F a | F a r F l | F a r F s | F a r F e | F a r a T | F a r a r | F a r a u | F a r a e | F a r a F | F a r a a | F a r a l | F a r a s | F a r a e | F a r l T | F a r l r | F a r l u | F a r l e | F a r l F | F a r l a | F a r l l | F a r l s | F a r l e | F a r s T | F a r s r | F a r s u | F a r s e | F a r s F | F a r s a | F a r s l | F a r s s | F a r s e | F a r e T | F a r e r | F a r e u | F a r e e | F a r e F | F a r e a | F a r e l | F a r e s | F a r e e | F a u T T | F a u T r | F a u T u | F a u T e | F a u T F | F a u T a | F a u T l | F a u T s | F a u T e | F a u r T | F a u r r | F a u r u | F a u r e | F a u r F | F a u r a | F a u r l | F a u r s | F a u r e | F a u u T | F a u u r | F a u u u | F a u u e | F a u u F | F a u u a | F a u u l | F a u u s | F a u u e | F a u e T | F a u e r | F a u e u | F a u e e | F a u e F | F a u e a | F a u e l | F a u e s | F a u e e | F a u F T | F a u F r | F a u F u | F a u F e | F a u F F | F a u F a | F a u F l | F a u F s | F a u F e | F a u a T | F a u a r | F a u a u | F a u a e | F a u a F | F a u a a | F a u a l | F a u a s | F a u a e | F a u l T | F a u l r | F a u l u | F a u l e | F a u l F | F a u l a | F a u l l | F a u l s | F a u l e | F a u s T | F a u s r | F a u s u | F a u s e | F a u s F | F a u s a | F a u s l | F a u s s | F a u s e | F a u e T | F a u e r | F a u e u | F a u e e | F a u e F | F a u e a | F a u e l | F a u e s | F a u e e | F a e T T | F a e T r | F a e T u | F a e T e | F a e T F | F a e T a | F a e T l | F a e T s | F a e T e | F a e r T | F a e r r | F a e r u | F a e r e | F a e r F | F a e r a | F a e r l | F a e r s | F a e r e | F a e u T | F a e u r | F a e u u | F a e u e | F a e u F | F a e u a | F a e u l | F a e u s | F a e u e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a e F T | F a e F r | F a e F u | F a e F e | F a e F F | F a e F a | F a e F l | F a e F s | F a e F e | F a e a T | F a e a r | F a e a u | F a e a e | F a e a F | F a e a a | F a e a l | F a e a s | F a e a e | F a e l T | F a e l r | F a e l u | F a e l e | F a e l F | F a e l a | F a e l l | F a e l s | F a e l e | F a e s T | F a e s r | F a e s u | F a e s e | F a e s F | F a e s a | F a e s l | F a e s s | F a e s e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a F T T | F a F T r | F a F T u | F a F T e | F a F T F | F a F T a | F a F T l | F a F T s | F a F T e | F a F r T | F a F r r | F a F r u | F a F r e | F a F r F | F a F r a | F a F r l | F a F r s | F a F r e | F a F u T | F a F u r | F a F u u | F a F u e | F a F u F | F a F u a | F a F u l | F a F u s | F a F u e | F a F e T | F a F e r | F a F e u | F a F e e | F a F e F | F a F e a | F a F e l | F a F e s | F a F e e | F a F F T | F a F F r | F a F F u | F a F F e | F a F F F | F a F F a | F a F F l | F a F F s | F a F F e | F a F a T | F a F a r | F a F a u | F a F a e | F a F a F | F a F a a | F a F a l | F a F a s | F a F a e | F a F l T | F a F l r | F a F l u | F a F l e | F a F l F | F a F l a | F a F l l | F a F l s | F a F l e | F a F s T | F a F s r | F a F s u | F a F s e | F a F s F | F a F s a | F a F s l | F a F s s | F a F s e | F a F e T | F a F e r | F a F e u | F a F e e | F a F e F | F a F e a | F a F e l | F a F e s | F a F e e | F a a T T | F a a T r | F a a T u | F a a T e | F a a T F | F a a T a | F a a T l | F a a T s | F a a T e | F a a r T | F a a r r | F a a r u | F a a r e | F a a r F | F a a r a | F a a r l | F a a r s | F a a r e | F a a u T | F a a u r | F a a u u | F a a u e | F a a u F | F a a u a | F a a u l | F a a u s | F a a u e | F a a e T | F a a e r | F a a e u | F a a e e | F a a e F | F a a e a | F a a e l | F a a e s | F a a e e | F a a F T | F a a F r | F a a F u | F a a F e | F a a F F | F a a F a | F a a F l | F a a F s | F a a F e | F a a a T | F a a a r | F a a a u | F a a a e | F a a a F | F a a a a | F a a a l | F a a a s | F a a a e | F a a l T | F a a l r | F a a l u | F a a l e | F a a l F | F a a l a | F a a l l | F a a l s | F a a l e | F a a s T | F a a s r | F a a s u | F a a s e | F a a s F | F a a s a | F a a s l | F a a s s | F a a s e | F a a e T | F a a e r | F a a e u | F a a e e | F a a e F | F a a e a | F a a e l | F a a e s | F a a e e | F a l T T | F a l T r | F a l T u | F a l T e | F a l T F | F a l T a | F a l T l | F a l T s | F a l T e | F a l r T | F a l r r | F a l r u | F a l r e | F a l r F | F a l r a | F a l r l | F a l r s | F a l r e | F a l u T | F a l u r | F a l u u | F a l u e | F a l u F | F a l u a | F a l u l | F a l u s | F a l u e | F a l e T | F a l e r | F a l e u | F a l e e | F a l e F | F a l e a | F a l e l | F a l e s | F a l e e | F a l F T | F a l F r | F a l F u | F a l F e | F a l F F | F a l F a | F a l F l | F a l F s | F a l F e | F a l a T | F a l a r | F a l a u | F a l a e | F a l a F | F a l a a | F a l a l | F a l a s | F a l a e | F a l l T | F a l l r | F a l l u | F a l l e | F a l l F | F a l l a | F a l l l | F a l l s | F a l l e | F a l s T | F a l s r | F a l s u | F a l s e | F a l s F | F a l s a | F a l s l | F a l s s | F a l s e | F a l e T | F a l e r | F a l e u | F a l e e | F a l e F | F a l e a | F a l e l | F a l e s | F a l e e | F a s T T | F a s T r | F a s T u | F a s T e | F a s T F | F a s T a | F a s T l | F a s T s | F a s T e | F a s r T | F a s r r | F a s r u | F a s r e | F a s r F | F a s r a | F a s r l | F a s r s | F a s r e | F a s u T | F a s u r | F a s u u | F a s u e | F a s u F | F a s u a | F a s u l | F a s u s | F a s u e | F a s e T | F a s e r | F a s e u | F a s e e | F a s e F | F a s e a | F a s e l | F a s e s | F a s e e | F a s F T | F a s F r | F a s F u | F a s F e | F a s F F | F a s F a | F a s F l | F a s F s | F a s F e | F a s a T | F a s a r | F a s a u | F a s a e | F a s a F | F a s a a | F a s a l | F a s a s | F a s a e | F a s l T | F a s l r | F a s l u | F a s l e | F a s l F | F a s l a | F a s l l | F a s l s | F a s l e | F a s s T | F a s s r | F a s s u | F a s s e | F a s s F | F a s s a | F a s s l | F a s s s | F a s s e | F a s e T | F a s e r | F a s e u | F a s e e | F a s e F | F a s e a | F a s e l | F a s e s | F a s e e | F a e T T | F a e T r | F a e T u | F a e T e | F a e T F | F a e T a | F a e T l | F a e T s | F a e T e | F a e r T | F a e r r | F a e r u | F a e r e | F a e r F | F a e r a | F a e r l | F a e r s | F a e r e | F a e u T | F a e u r | F a e u u | F a e u e | F a e u F | F a e u a | F a e u l | F a e u s | F a e u e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a e F T | F a e F r | F a e F u | F a e F e | F a e F F | F a e F a | F a e F l | F a e F s | F a e F e | F a e a T | F a e a r | F a e a u | F a e a e | F a e a F | F a e a a | F a e a l | F a e a s | F a e a e | F a e l T | F a e l r | F a e l u | F a e l e | F a e l F | F a e l a | F a e l l | F a e l s | F a e l e | F a e s T | F a e s r | F a e s u | F a e s e | F a e s F | F a e s a | F a e s l | F a e s s | F a e s e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F l T T T | F l T T r | F l T T u | F l T T e | F l T T F | F l T T a | F l T T l | F l T T s | F l T T e | F l T r T | F l T r r | F l T r u | F l T r e | F l T r F | F l T r a | F l T r l | F l T r s | F l T r e | F l T u T | F l T u r | F l T u u | F l T u e | F l T u F | F l T u a | F l T u l | F l T u s | F l T u e | F l T e T | F l T e r | F l T e u | F l T e e | F l T e F | F l T e a | F l T e l | F l T e s | F l T e e | F l T F T | F l T F r | F l T F u | F l T F e | F l T F F | F l T F a | F l T F l | F l T F s | F l T F e | F l T a T | F l T a r | F l T a u | F l T a e | F l T a F | F l T a a | F l T a l | F l T a s | F l T a e | F l T l T | F l T l r | F l T l u | F l T l e | F l T l F | F l T l a | F l T l l | F l T l s | F l T l e | F l T s T | F l T s r | F l T s u | F l T s e | F l T s F | F l T s a | F l T s l | F l T s s | F l T s e | F l T e T | F l T e r | F l T e u | F l T e e | F l T e F | F l T e a | F l T e l | F l T e s | F l T e e | F l r T T | F l r T r | F l r T u | F l r T e | F l r T F | F l r T a | F l r T l | F l r T s | F l r T e | F l r r T | F l r r r | F l r r u | F l r r e | F l r r F | F l r r a | F l r r l | F l r r s | F l r r e | F l r u T | F l r u r | F l r u u | F l r u e | F l r u F | F l r u a | F l r u l | F l r u s | F l r u e | F l r e T | F l r e r | F l r e u | F l r e e | F l r e F | F l r e a | F l r e l | F l r e s | F l r e e | F l r F T | F l r F r | F l r F u | F l r F e | F l r F F | F l r F a | F l r F l | F l r F s | F l r F e | F l r a T | F l r a r | F l r a u | F l r a e | F l r a F | F l r a a | F l r a l | F l r a s | F l r a e | F l r l T | F l r l r | F l r l u | F l r l e | F l r l F | F l r l a | F l r l l | F l r l s | F l r l e | F l r s T | F l r s r | F l r s u | F l r s e | F l r s F | F l r s a | F l r s l | F l r s s | F l r s e | F l r e T | F l r e r | F l r e u | F l r e e | F l r e F | F l r e a | F l r e l | F l r e s | F l r e e | F l u T T | F l u T r | F l u T u | F l u T e | F l u T F | F l u T a | F l u T l | F l u T s | F l u T e | F l u r T | F l u r r | F l u r u | F l u r e | F l u r F | F l u r a | F l u r l | F l u r s | F l u r e | F l u u T | F l u u r | F l u u u | F l u u e | F l u u F | F l u u a | F l u u l | F l u u s | F l u u e | F l u e T | F l u e r | F l u e u | F l u e e | F l u e F | F l u e a | F l u e l | F l u e s | F l u e e | F l u F T | F l u F r | F l u F u | F l u F e | F l u F F | F l u F a | F l u F l | F l u F s | F l u F e | F l u a T | F l u a r | F l u a u | F l u a e | F l u a F | F l u a a | F l u a l | F l u a s | F l u a e | F l u l T | F l u l r | F l u l u | F l u l e | F l u l F | F l u l a | F l u l l | F l u l s | F l u l e | F l u s T | F l u s r | F l u s u | F l u s e | F l u s F | F l u s a | F l u s l | F l u s s | F l u s e | F l u e T | F l u e r | F l u e u | F l u e e | F l u e F | F l u e a | F l u e l | F l u e s | F l u e e | F l e T T | F l e T r | F l e T u | F l e T e | F l e T F | F l e T a | F l e T l | F l e T s | F l e T e | F l e r T | F l e r r | F l e r u | F l e r e | F l e r F | F l e r a | F l e r l | F l e r s | F l e r e | F l e u T | F l e u r | F l e u u | F l e u e | F l e u F | F l e u a | F l e u l | F l e u s | F l e u e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l e F T | F l e F r | F l e F u | F l e F e | F l e F F | F l e F a | F l e F l | F l e F s | F l e F e | F l e a T | F l e a r | F l e a u | F l e a e | F l e a F | F l e a a | F l e a l | F l e a s | F l e a e | F l e l T | F l e l r | F l e l u | F l e l e | F l e l F | F l e l a | F l e l l | F l e l s | F l e l e | F l e s T | F l e s r | F l e s u | F l e s e | F l e s F | F l e s a | F l e s l | F l e s s | F l e s e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l F T T | F l F T r | F l F T u | F l F T e | F l F T F | F l F T a | F l F T l | F l F T s | F l F T e | F l F r T | F l F r r | F l F r u | F l F r e | F l F r F | F l F r a | F l F r l | F l F r s | F l F r e | F l F u T | F l F u r | F l F u u | F l F u e | F l F u F | F l F u a | F l F u l | F l F u s | F l F u e | F l F e T | F l F e r | F l F e u | F l F e e | F l F e F | F l F e a | F l F e l | F l F e s | F l F e e | F l F F T | F l F F r | F l F F u | F l F F e | F l F F F | F l F F a | F l F F l | F l F F s | F l F F e | F l F a T | F l F a r | F l F a u | F l F a e | F l F a F | F l F a a | F l F a l | F l F a s | F l F a e | F l F l T | F l F l r | F l F l u | F l F l e | F l F l F | F l F l a | F l F l l | F l F l s | F l F l e | F l F s T | F l F s r | F l F s u | F l F s e | F l F s F | F l F s a | F l F s l | F l F s s | F l F s e | F l F e T | F l F e r | F l F e u | F l F e e | F l F e F | F l F e a | F l F e l | F l F e s | F l F e e | F l a T T | F l a T r | F l a T u | F l a T e | F l a T F | F l a T a | F l a T l | F l a T s | F l a T e | F l a r T | F l a r r | F l a r u | F l a r e | F l a r F | F l a r a | F l a r l | F l a r s | F l a r e | F l a u T | F l a u r | F l a u u | F l a u e | F l a u F | F l a u a | F l a u l | F l a u s | F l a u e | F l a e T | F l a e r | F l a e u | F l a e e | F l a e F | F l a e a | F l a e l | F l a e s | F l a e e | F l a F T | F l a F r | F l a F u | F l a F e | F l a F F | F l a F a | F l a F l | F l a F s | F l a F e | F l a a T | F l a a r | F l a a u | F l a a e | F l a a F | F l a a a | F l a a l | F l a a s | F l a a e | F l a l T | F l a l r | F l a l u | F l a l e | F l a l F | F l a l a | F l a l l | F l a l s | F l a l e | F l a s T | F l a s r | F l a s u | F l a s e | F l a s F | F l a s a | F l a s l | F l a s s | F l a s e | F l a e T | F l a e r | F l a e u | F l a e e | F l a e F | F l a e a | F l a e l | F l a e s | F l a e e | F l l T T | F l l T r | F l l T u | F l l T e | F l l T F | F l l T a | F l l T l | F l l T s | F l l T e | F l l r T | F l l r r | F l l r u | F l l r e | F l l r F | F l l r a | F l l r l | F l l r s | F l l r e | F l l u T | F l l u r | F l l u u | F l l u e | F l l u F | F l l u a | F l l u l | F l l u s | F l l u e | F l l e T | F l l e r | F l l e u | F l l e e | F l l e F | F l l e a | F l l e l | F l l e s | F l l e e | F l l F T | F l l F r | F l l F u | F l l F e | F l l F F | F l l F a | F l l F l | F l l F s | F l l F e | F l l a T | F l l a r | F l l a u | F l l a e | F l l a F | F l l a a | F l l a l | F l l a s | F l l a e | F l l l T | F l l l r | F l l l u | F l l l e | F l l l F | F l l l a | F l l l l | F l l l s | F l l l e | F l l s T | F l l s r | F l l s u | F l l s e | F l l s F | F l l s a | F l l s l | F l l s s | F l l s e | F l l e T | F l l e r | F l l e u | F l l e e | F l l e F | F l l e a | F l l e l | F l l e s | F l l e e | F l s T T | F l s T r | F l s T u | F l s T e | F l s T F | F l s T a | F l s T l | F l s T s | F l s T e | F l s r T | F l s r r | F l s r u | F l s r e | F l s r F | F l s r a | F l s r l | F l s r s | F l s r e | F l s u T | F l s u r | F l s u u | F l s u e | F l s u F | F l s u a | F l s u l | F l s u s | F l s u e | F l s e T | F l s e r | F l s e u | F l s e e | F l s e F | F l s e a | F l s e l | F l s e s | F l s e e | F l s F T | F l s F r | F l s F u | F l s F e | F l s F F | F l s F a | F l s F l | F l s F s | F l s F e | F l s a T | F l s a r | F l s a u | F l s a e | F l s a F | F l s a a | F l s a l | F l s a s | F l s a e | F l s l T | F l s l r | F l s l u | F l s l e | F l s l F | F l s l a | F l s l l | F l s l s | F l s l e | F l s s T | F l s s r | F l s s u | F l s s e | F l s s F | F l s s a | F l s s l | F l s s s | F l s s e | F l s e T | F l s e r | F l s e u | F l s e e | F l s e F | F l s e a | F l s e l | F l s e s | F l s e e | F l e T T | F l e T r | F l e T u | F l e T e | F l e T F | F l e T a | F l e T l | F l e T s | F l e T e | F l e r T | F l e r r | F l e r u | F l e r e | F l e r F | F l e r a | F l e r l | F l e r s | F l e r e | F l e u T | F l e u r | F l e u u | F l e u e | F l e u F | F l e u a | F l e u l | F l e u s | F l e u e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l e F T | F l e F r | F l e F u | F l e F e | F l e F F | F l e F a | F l e F l | F l e F s | F l e F e | F l e a T | F l e a r | F l e a u | F l e a e | F l e a F | F l e a a | F l e a l | F l e a s | F l e a e | F l e l T | F l e l r | F l e l u | F l e l e | F l e l F | F l e l a | F l e l l | F l e l s | F l e l e | F l e s T | F l e s r | F l e s u | F l e s e | F l e s F | F l e s a | F l e s l | F l e s s | F l e s e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F s T T T | F s T T r | F s T T u | F s T T e | F s T T F | F s T T a | F s T T l | F s T T s | F s T T e | F s T r T | F s T r r | F s T r u | F s T r e | F s T r F | F s T r a | F s T r l | F s T r s | F s T r e | F s T u T | F s T u r | F s T u u | F s T u e | F s T u F | F s T u a | F s T u l | F s T u s | F s T u e | F s T e T | F s T e r | F s T e u | F s T e e | F s T e F | F s T e a | F s T e l | F s T e s | F s T e e | F s T F T | F s T F r | F s T F u | F s T F e | F s T F F | F s T F a | F s T F l | F s T F s | F s T F e | F s T a T | F s T a r | F s T a u | F s T a e | F s T a F | F s T a a | F s T a l | F s T a s | F s T a e | F s T l T | F s T l r | F s T l u | F s T l e | F s T l F | F s T l a | F s T l l | F s T l s | F s T l e | F s T s T | F s T s r | F s T s u | F s T s e | F s T s F | F s T s a | F s T s l | F s T s s | F s T s e | F s T e T | F s T e r | F s T e u | F s T e e | F s T e F | F s T e a | F s T e l | F s T e s | F s T e e | F s r T T | F s r T r | F s r T u | F s r T e | F s r T F | F s r T a | F s r T l | F s r T s | F s r T e | F s r r T | F s r r r | F s r r u | F s r r e | F s r r F | F s r r a | F s r r l | F s r r s | F s r r e | F s r u T | F s r u r | F s r u u | F s r u e | F s r u F | F s r u a | F s r u l | F s r u s | F s r u e | F s r e T | F s r e r | F s r e u | F s r e e | F s r e F | F s r e a | F s r e l | F s r e s | F s r e e | F s r F T | F s r F r | F s r F u | F s r F e | F s r F F | F s r F a | F s r F l | F s r F s | F s r F e | F s r a T | F s r a r | F s r a u | F s r a e | F s r a F | F s r a a | F s r a l | F s r a s | F s r a e | F s r l T | F s r l r | F s r l u | F s r l e | F s r l F | F s r l a | F s r l l | F s r l s | F s r l e | F s r s T | F s r s r | F s r s u | F s r s e | F s r s F | F s r s a | F s r s l | F s r s s | F s r s e | F s r e T | F s r e r | F s r e u | F s r e e | F s r e F | F s r e a | F s r e l | F s r e s | F s r e e | F s u T T | F s u T r | F s u T u | F s u T e | F s u T F | F s u T a | F s u T l | F s u T s | F s u T e | F s u r T | F s u r r | F s u r u | F s u r e | F s u r F | F s u r a | F s u r l | F s u r s | F s u r e | F s u u T | F s u u r | F s u u u | F s u u e | F s u u F | F s u u a | F s u u l | F s u u s | F s u u e | F s u e T | F s u e r | F s u e u | F s u e e | F s u e F | F s u e a | F s u e l | F s u e s | F s u e e | F s u F T | F s u F r | F s u F u | F s u F e | F s u F F | F s u F a | F s u F l | F s u F s | F s u F e | F s u a T | F s u a r | F s u a u | F s u a e | F s u a F | F s u a a | F s u a l | F s u a s | F s u a e | F s u l T | F s u l r | F s u l u | F s u l e | F s u l F | F s u l a | F s u l l | F s u l s | F s u l e | F s u s T | F s u s r | F s u s u | F s u s e | F s u s F | F s u s a | F s u s l | F s u s s | F s u s e | F s u e T | F s u e r | F s u e u | F s u e e | F s u e F | F s u e a | F s u e l | F s u e s | F s u e e | F s e T T | F s e T r | F s e T u | F s e T e | F s e T F | F s e T a | F s e T l | F s e T s | F s e T e | F s e r T | F s e r r | F s e r u | F s e r e | F s e r F | F s e r a | F s e r l | F s e r s | F s e r e | F s e u T | F s e u r | F s e u u | F s e u e | F s e u F | F s e u a | F s e u l | F s e u s | F s e u e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s e F T | F s e F r | F s e F u | F s e F e | F s e F F | F s e F a | F s e F l | F s e F s | F s e F e | F s e a T | F s e a r | F s e a u | F s e a e | F s e a F | F s e a a | F s e a l | F s e a s | F s e a e | F s e l T | F s e l r | F s e l u | F s e l e | F s e l F | F s e l a | F s e l l | F s e l s | F s e l e | F s e s T | F s e s r | F s e s u | F s e s e | F s e s F | F s e s a | F s e s l | F s e s s | F s e s e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s F T T | F s F T r | F s F T u | F s F T e | F s F T F | F s F T a | F s F T l | F s F T s | F s F T e | F s F r T | F s F r r | F s F r u | F s F r e | F s F r F | F s F r a | F s F r l | F s F r s | F s F r e | F s F u T | F s F u r | F s F u u | F s F u e | F s F u F | F s F u a | F s F u l | F s F u s | F s F u e | F s F e T | F s F e r | F s F e u | F s F e e | F s F e F | F s F e a | F s F e l | F s F e s | F s F e e | F s F F T | F s F F r | F s F F u | F s F F e | F s F F F | F s F F a | F s F F l | F s F F s | F s F F e | F s F a T | F s F a r | F s F a u | F s F a e | F s F a F | F s F a a | F s F a l | F s F a s | F s F a e | F s F l T | F s F l r | F s F l u | F s F l e | F s F l F | F s F l a | F s F l l | F s F l s | F s F l e | F s F s T | F s F s r | F s F s u | F s F s e | F s F s F | F s F s a | F s F s l | F s F s s | F s F s e | F s F e T | F s F e r | F s F e u | F s F e e | F s F e F | F s F e a | F s F e l | F s F e s | F s F e e | F s a T T | F s a T r | F s a T u | F s a T e | F s a T F | F s a T a | F s a T l | F s a T s | F s a T e | F s a r T | F s a r r | F s a r u | F s a r e | F s a r F | F s a r a | F s a r l | F s a r s | F s a r e | F s a u T | F s a u r | F s a u u | F s a u e | F s a u F | F s a u a | F s a u l | F s a u s | F s a u e | F s a e T | F s a e r | F s a e u | F s a e e | F s a e F | F s a e a | F s a e l | F s a e s | F s a e e | F s a F T | F s a F r | F s a F u | F s a F e | F s a F F | F s a F a | F s a F l | F s a F s | F s a F e | F s a a T | F s a a r | F s a a u | F s a a e | F s a a F | F s a a a | F s a a l | F s a a s | F s a a e | F s a l T | F s a l r | F s a l u | F s a l e | F s a l F | F s a l a | F s a l l | F s a l s | F s a l e | F s a s T | F s a s r | F s a s u | F s a s e | F s a s F | F s a s a | F s a s l | F s a s s | F s a s e | F s a e T | F s a e r | F s a e u | F s a e e | F s a e F | F s a e a | F s a e l | F s a e s | F s a e e | F s l T T | F s l T r | F s l T u | F s l T e | F s l T F | F s l T a | F s l T l | F s l T s | F s l T e | F s l r T | F s l r r | F s l r u | F s l r e | F s l r F | F s l r a | F s l r l | F s l r s | F s l r e | F s l u T | F s l u r | F s l u u | F s l u e | F s l u F | F s l u a | F s l u l | F s l u s | F s l u e | F s l e T | F s l e r | F s l e u | F s l e e | F s l e F | F s l e a | F s l e l | F s l e s | F s l e e | F s l F T | F s l F r | F s l F u | F s l F e | F s l F F | F s l F a | F s l F l | F s l F s | F s l F e | F s l a T | F s l a r | F s l a u | F s l a e | F s l a F | F s l a a | F s l a l | F s l a s | F s l a e | F s l l T | F s l l r | F s l l u | F s l l e | F s l l F | F s l l a | F s l l l | F s l l s | F s l l e | F s l s T | F s l s r | F s l s u | F s l s e | F s l s F | F s l s a | F s l s l | F s l s s | F s l s e | F s l e T | F s l e r | F s l e u | F s l e e | F s l e F | F s l e a | F s l e l | F s l e s | F s l e e | F s s T T | F s s T r | F s s T u | F s s T e | F s s T F | F s s T a | F s s T l | F s s T s | F s s T e | F s s r T | F s s r r | F s s r u | F s s r e | F s s r F | F s s r a | F s s r l | F s s r s | F s s r e | F s s u T | F s s u r | F s s u u | F s s u e | F s s u F | F s s u a | F s s u l | F s s u s | F s s u e | F s s e T | F s s e r | F s s e u | F s s e e | F s s e F | F s s e a | F s s e l | F s s e s | F s s e e | F s s F T | F s s F r | F s s F u | F s s F e | F s s F F | F s s F a | F s s F l | F s s F s | F s s F e | F s s a T | F s s a r | F s s a u | F s s a e | F s s a F | F s s a a | F s s a l | F s s a s | F s s a e | F s s l T | F s s l r | F s s l u | F s s l e | F s s l F | F s s l a | F s s l l | F s s l s | F s s l e | F s s s T | F s s s r | F s s s u | F s s s e | F s s s F | F s s s a | F s s s l | F s s s s | F s s s e | F s s e T | F s s e r | F s s e u | F s s e e | F s s e F | F s s e a | F s s e l | F s s e s | F s s e e | F s e T T | F s e T r | F s e T u | F s e T e | F s e T F | F s e T a | F s e T l | F s e T s | F s e T e | F s e r T | F s e r r | F s e r u | F s e r e | F s e r F | F s e r a | F s e r l | F s e r s | F s e r e | F s e u T | F s e u r | F s e u u | F s e u e | F s e u F | F s e u a | F s e u l | F s e u s | F s e u e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s e F T | F s e F r | F s e F u | F s e F e | F s e F F | F s e F a | F s e F l | F s e F s | F s e F e | F s e a T | F s e a r | F s e a u | F s e a e | F s e a F | F s e a a | F s e a l | F s e a s | F s e a e | F s e l T | F s e l r | F s e l u | F s e l e | F s e l F | F s e l a | F s e l l | F s e l s | F s e l e | F s e s T | F s e s r | F s e s u | F s e s e | F s e s F | F s e s a | F s e s l | F s e s s | F s e s e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F e T T T | F e T T r | F e T T u | F e T T e | F e T T F | F e T T a | F e T T l | F e T T s | F e T T e | F e T r T | F e T r r | F e T r u | F e T r e | F e T r F | F e T r a | F e T r l | F e T r s | F e T r e | F e T u T | F e T u r | F e T u u | F e T u e | F e T u F | F e T u a | F e T u l | F e T u s | F e T u e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e T F T | F e T F r | F e T F u | F e T F e | F e T F F | F e T F a | F e T F l | F e T F s | F e T F e | F e T a T | F e T a r | F e T a u | F e T a e | F e T a F | F e T a a | F e T a l | F e T a s | F e T a e | F e T l T | F e T l r | F e T l u | F e T l e | F e T l F | F e T l a | F e T l l | F e T l s | F e T l e | F e T s T | F e T s r | F e T s u | F e T s e | F e T s F | F e T s a | F e T s l | F e T s s | F e T s e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e r T T | F e r T r | F e r T u | F e r T e | F e r T F | F e r T a | F e r T l | F e r T s | F e r T e | F e r r T | F e r r r | F e r r u | F e r r e | F e r r F | F e r r a | F e r r l | F e r r s | F e r r e | F e r u T | F e r u r | F e r u u | F e r u e | F e r u F | F e r u a | F e r u l | F e r u s | F e r u e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e r F T | F e r F r | F e r F u | F e r F e | F e r F F | F e r F a | F e r F l | F e r F s | F e r F e | F e r a T | F e r a r | F e r a u | F e r a e | F e r a F | F e r a a | F e r a l | F e r a s | F e r a e | F e r l T | F e r l r | F e r l u | F e r l e | F e r l F | F e r l a | F e r l l | F e r l s | F e r l e | F e r s T | F e r s r | F e r s u | F e r s e | F e r s F | F e r s a | F e r s l | F e r s s | F e r s e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e u T T | F e u T r | F e u T u | F e u T e | F e u T F | F e u T a | F e u T l | F e u T s | F e u T e | F e u r T | F e u r r | F e u r u | F e u r e | F e u r F | F e u r a | F e u r l | F e u r s | F e u r e | F e u u T | F e u u r | F e u u u | F e u u e | F e u u F | F e u u a | F e u u l | F e u u s | F e u u e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e u F T | F e u F r | F e u F u | F e u F e | F e u F F | F e u F a | F e u F l | F e u F s | F e u F e | F e u a T | F e u a r | F e u a u | F e u a e | F e u a F | F e u a a | F e u a l | F e u a s | F e u a e | F e u l T | F e u l r | F e u l u | F e u l e | F e u l F | F e u l a | F e u l l | F e u l s | F e u l e | F e u s T | F e u s r | F e u s u | F e u s e | F e u s F | F e u s a | F e u s l | F e u s s | F e u s e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e F T T | F e F T r | F e F T u | F e F T e | F e F T F | F e F T a | F e F T l | F e F T s | F e F T e | F e F r T | F e F r r | F e F r u | F e F r e | F e F r F | F e F r a | F e F r l | F e F r s | F e F r e | F e F u T | F e F u r | F e F u u | F e F u e | F e F u F | F e F u a | F e F u l | F e F u s | F e F u e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e F F T | F e F F r | F e F F u | F e F F e | F e F F F | F e F F a | F e F F l | F e F F s | F e F F e | F e F a T | F e F a r | F e F a u | F e F a e | F e F a F | F e F a a | F e F a l | F e F a s | F e F a e | F e F l T | F e F l r | F e F l u | F e F l e | F e F l F | F e F l a | F e F l l | F e F l s | F e F l e | F e F s T | F e F s r | F e F s u | F e F s e | F e F s F | F e F s a | F e F s l | F e F s s | F e F s e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e a T T | F e a T r | F e a T u | F e a T e | F e a T F | F e a T a | F e a T l | F e a T s | F e a T e | F e a r T | F e a r r | F e a r u | F e a r e | F e a r F | F e a r a | F e a r l | F e a r s | F e a r e | F e a u T | F e a u r | F e a u u | F e a u e | F e a u F | F e a u a | F e a u l | F e a u s | F e a u e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e a F T | F e a F r | F e a F u | F e a F e | F e a F F | F e a F a | F e a F l | F e a F s | F e a F e | F e a a T | F e a a r | F e a a u | F e a a e | F e a a F | F e a a a | F e a a l | F e a a s | F e a a e | F e a l T | F e a l r | F e a l u | F e a l e | F e a l F | F e a l a | F e a l l | F e a l s | F e a l e | F e a s T | F e a s r | F e a s u | F e a s e | F e a s F | F e a s a | F e a s l | F e a s s | F e a s e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e l T T | F e l T r | F e l T u | F e l T e | F e l T F | F e l T a | F e l T l | F e l T s | F e l T e | F e l r T | F e l r r | F e l r u | F e l r e | F e l r F | F e l r a | F e l r l | F e l r s | F e l r e | F e l u T | F e l u r | F e l u u | F e l u e | F e l u F | F e l u a | F e l u l | F e l u s | F e l u e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e l F T | F e l F r | F e l F u | F e l F e | F e l F F | F e l F a | F e l F l | F e l F s | F e l F e | F e l a T | F e l a r | F e l a u | F e l a e | F e l a F | F e l a a | F e l a l | F e l a s | F e l a e | F e l l T | F e l l r | F e l l u | F e l l e | F e l l F | F e l l a | F e l l l | F e l l s | F e l l e | F e l s T | F e l s r | F e l s u | F e l s e | F e l s F | F e l s a | F e l s l | F e l s s | F e l s e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e s T T | F e s T r | F e s T u | F e s T e | F e s T F | F e s T a | F e s T l | F e s T s | F e s T e | F e s r T | F e s r r | F e s r u | F e s r e | F e s r F | F e s r a | F e s r l | F e s r s | F e s r e | F e s u T | F e s u r | F e s u u | F e s u e | F e s u F | F e s u a | F e s u l | F e s u s | F e s u e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e s F T | F e s F r | F e s F u | F e s F e | F e s F F | F e s F a | F e s F l | F e s F s | F e s F e | F e s a T | F e s a r | F e s a u | F e s a e | F e s a F | F e s a a | F e s a l | F e s a s | F e s a e | F e s l T | F e s l r | F e s l u | F e s l e | F e s l F | F e s l a | F e s l l | F e s l s | F e s l e | F e s s T | F e s s r | F e s s u | F e s s e | F e s s F | F e s s a | F e s s l | F e s s s | F e s s e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/12/14/Algorithm_Hacks.html",
            "relUrl": "/2022/12/14/Algorithm_Hacks.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post83": {
            "title": "Unit 3 Sections 16 Hacks",
            "content": "Notes . An experiment is a structured procedure that is undertaken to make a discovery, test a hypothesis, or demonstrate a known fact. Simulations, on the other hand, are used to attempt to replicate real-world events or situations in order to test or predict outcomes. . | The advantages of using simulations include that they can be safer, more cost-effective, more efficient, and they can provide more data in less time than experiments. However, the downside of using simulations is that they are not as accurate as experiments and outside factors such as gravity and air resistance may not be included in the simulation. . | Simulations should not be used when a situation already has set results or data that won&#39;t change, such as a score in a game, the most purchased food item, or the average yearly wage. In these cases, an experiment would not be necessary since the data is already known. . | Simulations are a form of computer modeling that enables the analysis of a system by using mathematical models and algorithms to simulate the behavior of the system’s components. Simulations are used to study a system’s performance, its interactions with other systems, and its dynamic behavior over time. Simulations can be applied to any type of system, from simple mechanical systems to large, complex systems. . | Simulations typically involve a combination of software and hardware components. The software component is responsible for creating a mathematical model of the system, which may include equations that describe the behavior of the system’s components and their interactions with each other. The hardware component is responsible for running the simulation, by executing the mathematical model and generating the results of the simulation. . | Simulations can be used to study a variety of things, such as the performance of a system, the effects of changes to the system, or the behavior of a system over time. By running multiple simulations with different input values, researchers can gain insight into how a system will behave under different conditions. Simulations can also be used to test the accuracy of mathematical models, or to compare different models of the same system. . | Simulations are a powerful tool for studying complex systems, as they provide a way to analyze the behavior of the system without actually having to build or test the system. They can also provide insight into the behavior of a system under a variety of conditions, allowing researchers to identify areas of improvement or potential problems. Simulations can be used to test new designs or to gain a better understanding of how a system works before building it. . | . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . To test the safety of a car, a simulation can be ran to test out different outcomes depending on the force of the crash. A simulation of this would help to reduce the costs and effects of physically performing crash tests for a car. . Hack #2 . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . Welcome to the Simulations Quiz! True or False: Simulations will always have the same result. A: True, B: False You said: B Correct! True or False: A simulation has results that are more accurate than an experiment A: True, B: False You said: B Correct! True or False: A simulation can model real world events that are not practical for experiments A: True, B: False You said: A Correct! Which one of these is FALSE regarding simulations A: Reduces Costs, B: Is safer than real life experiments, C: More Efficient, D: More accurate than real life experiments You said: D Correct! Which of the following scenarios would be the LEAST beneficial to have as a simulation A: A retail company wants to identify the item which sold the most on their website, B: A restaurant wants to determine if the use of robots will increase efficiency, C: An insurance company wants to study the impact of rain on car accidents, D: A sports car company wants to study design changes to their new bike design You said: A Correct! Which of the following is better to do as a simulation than as a calculation A: Keeping score at a basketball game, B: Keeping track of how many games a person has won, C: Determining the average grade for a group of tests, D: Studying the impact of carbon emissions on the environment You said: D Correct! You scored: 6 /6 . Hack #3 . Describe the rolling dice simulation (answer guiding questions) | . 1) What makes it a simulation? The dice simulation is a proper simulation because it imitates the process of rolling a dice in a randomized manner from the numbers 1 through 6. . 2) What are it’s advantages and disadvantages? The simulation allows the dice roll to be quickly and easily carried out. The disadvantage of the simulation is that it is purely mathematical, it does not account for any sorts of physical forces (ie. dents, cracks, etc.) that may affect the dice roll in a real-life scenario. . 3) In your opinion, would an experiment be better in this situation? In my opinion, I believe that a simulation would work better than an experiment - as it disregards human errors such as various forms of rolling, or physical alterations to the dice. . Hack #4 . Add a feature onto the rolling dice simulation ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) . 14 sided dice! | . import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 14) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-14] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;You rolled:&quot;, roll_results) . You rolled: [11, 6] . Extra Work . Going over John Conway&#39;s Game of Life . John Conway&#39;s Game of Life is a cellular automaton game, meaning it consists of a grid of cells that change state based on a set of rules and the states of their neighbors. The game was developed by John Conway in 1970 and has since become a popular subject in mathematics and computer science. . The game consists of a 2-dimensional grid of cells, each of which can have one of two states: &quot;alive&quot; or &quot;dead&quot;. A cell is considered alive if it has two or three neighbors that are alive, and is considered dead if it has fewer than two neighbors or more than three neighbors. The cells then evolve over time based on these rules. . At each step of the game, any live cell with fewer than two or more than three live neighbors dies, as if by underpopulation or overpopulation. Any deceased cell that has three living neighbors shall turn into a live cell - simulating reproduction. All other cells remain unchanged. . The game can be implemented in many ways, but is often seen as a &quot;zero-player&quot; game, meaning that once the initial setup is complete, the game proceeds by itself. As a result, it has been used to study the behavior of complex systems and to explore emergent behavior. . import random def gamble(your_spin): result = [] for _ in range (your_spin): spin = random.randint(1, 7) your_spin.append(spin) print(result) return result spin_num = 3 result = gamble(spin_num) print(&quot;Your roll: &quot;, result) #Not finished .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%203/sections%2016/hacks/2022/12/13/Unit-3-Section-16-Hacks.html",
            "relUrl": "/unit%203/sections%2016/hacks/2022/12/13/Unit-3-Section-16-Hacks.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post84": {
            "title": "CompSci / Technical Business Panel Notes",
            "content": "Kathyleen Beveridge . 1) Background: . MBA, USC | BS in Finance, Santa Clara University | Switched from finance to high tech in 2005 | Sr. Director of Commercial and Marketing Operations (Thermo Fisher Scientific) | Director of Commercial Excellence (Thermo Fisher Scientific) | Used databases and data science for predictions on when and where to sell specific products | Mission Statements | HP Inc: Create technology that makes life better for everyone, everywhere | Qualcomm: Investing tech that the world loves | Thermo Fisher Scientific: Enable our customers to make the world healthier, cleaner, and safer | Companies that create products, thus, their mission statements are based upon satisfying and meeting the needs of their customers | . 2) Conclusion: . Worked for companies that had a macro impact on the lives of their users/customers | “No matter what you choose to do…[you] can make an impact on the world.” | Agile Methodology: | Short sprints to plan out work in short increments/ in a matter of a few months. | . Kris Porter . 1) Background: . UCLA, Electrical engineering | Master’s in electrical engineering, Cal State LA | Software Engineer - SRE | Infrastructure Engineer | Research | Center for Embedded Networked Sensors | Networked Info Mechanical Systems NIMS | Introduced to Linux Operating System, Software Development Life Cycle | . 2) Career: . Worked with virtual servers, data collection, and automation | Systems Engineer at GPM (startup) | Infrastructure at NBC Universal, Streaming media | DevOps at Qualcomm - Machine learning and deep learning, used Python libraries and data to determine when to archive and delete repositories on GitLab | Twitter - APIs and data centers, migrating HomeTimeline to GraphQL | Twitter University (formal training on the company’s systems, tools, management, etc.) | Currently at Mystem Labs | Agile Methodology: | Group of 150 engineers that interacted and planned together through the use of meetings - developed a road map of projects. | . Conclusion Question: . 1) What are some of the most important skills for the tech industry? . Mr. Porter . “Learning how to learn” - ie. programming languages, infrastructures, etc. Stay resilient when going into/finding work, stay confident | . Mrs. Beveridge . Continuous learning | Be adaptive | Have the ability to listen to requirements and translate your work into how technology can serve those needs | Be prepared for interviews | . Key Takeaways . Overall, I really enjoyed the CompSci / Technical Business panel, as it was quite informative. Hearing from the perspectives of Mrs. Beveridge and Mr. Porter helped to open my eyes for a career in tech. I learned about the many types of jobs within the field of computer science, as well as the importance of working in teams; holding meetings, such as the ones we have with our Scrum Teams can help prepare us for our real-world jobs. From Mrs. Beveridge&#39;s presentation, I found it interesting that though our work may seem small in a field of many, in her own words, “No matter what you choose to do…[you] can make an impact on the world.” Mr. Porter opened up about his career working in infrastructure and deep learning at companies such as NBC Universal and Qualcomm - it was quite interesting to learn about many of his experiences. From his slides, I learned about continuous learning and that to help yourself succeed in the field of computer science, you must always be &quot;learning how to learn,&quot; whether it be a new system, tool, etc. In conclusion, this panel was very interesting and I believe that I gained a lot of resourceful knowledge that I can apply and use in the classroom and beyond. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/12/13/CS-Tech-Buisness-Notes.html",
            "relUrl": "/2022/12/13/CS-Tech-Buisness-Notes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post85": {
            "title": "Notes Sections 8-10",
            "content": "1) Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . 2) Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . 3) Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop . For list operations, write expressions that use list indexing and list procedures | For algorithms involving elements of a list, write iteration statements to traverse a list | For list operations, evaluate expression that use list indexing and list procedures | For algorithms involving elements of a list, determine the result of an algorithm that includes list traversals | List procedures are implemented in accordance with the syntax rules of the programming language | Iteration Statements can be used to traverse a list . | AP EXAM provides pseudocode for loops . | Knowledge of existing algorithms that use iteration can help in constructing new algorithms | . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] potentialMin = int(nums.pop()) while len(nums) != 0: newNum = int(nums.pop()) if newNum &lt; potentialMin: potentialMin = newNum print(potentialMin, &quot;is the minimum value.&quot;) . 10 is the minimum value. . fruit = [&quot;apple&quot;, &quot;orange&quot;, &quot;strawberry&quot;, &quot;pear&quot;] i = 0 for x in fruit: print(fruit[i]) i += 1 . apple orange strawberry pear .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/hacks/turkey/tree/notes/2022/12/12/Unit-8-10-notes.html",
            "relUrl": "/hacks/turkey/tree/notes/2022/12/12/Unit-8-10-notes.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post86": {
            "title": "Title",
            "content": "Undecidability . The algorithm cannot be tracked | Output is the number of iterations needed to get to &quot;i&quot; | Hailstone numbers | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/12/11/Lesson-Unit-3-Section-14-15.html",
            "relUrl": "/2022/12/11/Lesson-Unit-3-Section-14-15.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post87": {
            "title": "Hacks Sections 5-7",
            "content": "Notes . Boolean: A denoting a system of algebraic notation used to represent logical arguments | Relational Operators: The mathematical relationship shared between two given variables. Determines whether a statement is true or false based on the output. | Conditionals: Allow the expression of an algorithms that utilize selection to occur without the use of a programming language. | Conditional Statement: A statement that affects the sequence of control by executing certain statements depending on the value of a boolean. | . Unit 3.5 Hacks . Explain in your own words what each logical operator does NOT: Outputs the opposite of the given data and is typically used for true or false statements - has no effect on the variable. AND: Evaluates two separate conditions and determines if they are all met. OR: Checks for if only one condition is met. . | Code your own scenario that makes sense for each logical operator . | . Tru = True equals = &quot;=&quot; opposite = not(Tru) print(opposite) . False . fun = &quot;fun&quot; awesome = fun if fun and awesome == &quot;fun&quot;: print(&quot;AND&quot;) else: print(&quot;NOT AND&quot;) . AND . import random numList = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;] ranNum = random.randrange(len(numList)) print(ranNum) if ranNum == 2 or ranNum == 5: print(&quot;OR&quot;) else: print(&quot;NOT OR&quot;) . 2 OR . Unit 3.6 Hacks . 1 point for defining all the key terms in your own words. 0.5 points if you use examples that show you truly understand it. | 1 point for writing a program that uses binary conditional logic. 0.5 points if it is original and shows complexity | . 1) Selection: A construct in which the code will only run if a given condition is met. . Example: If an answer is true, then the program will run 2) Algorithm: A procedure utilized for completing mathematical operations or problem solving. | Example: An algorithm that takes in the correct and incorrect (overall points) of a test/quiz, that then displays the users&#39; score. 3) Conditional statement: When a program only runs if a set of conditions are met. | Example: a) If the basketball is not flat, the game will proceed. b) If the basketball is not broken, then the game will be able to continue. | . firstNum = int(input(&quot;Input your first number.&quot;)) secondNum = int(input(&quot;Input your second number.&quot;)) conditional = input(&quot;AND, OR, XOR?&quot;).lower() if conditional == &quot;and&quot;: print(&quot;Selection:&quot; , &quot;AND&quot;, firstNum, &quot;&amp;&quot;, secondNum, &quot;=&quot;, firstNum &amp; secondNum) elif conditional ==&quot;or&quot;: print(&quot;Selection:&quot; , &quot;OR &quot;, firstNum, &quot;|&quot;, secondNum, &quot;=&quot;, firstNum | secondNum) elif conditional ==&quot;xor&quot;: print(&quot;Selection:&quot; , &quot;XOR&quot;, firstNum, &quot;^&quot;, secondNum, &quot;=&quot;, firstNum ^ secondNum) else: print(&quot;Error&quot;) . Selection: AND 5 &amp; 10 = 0 . . color = &quot;orange&quot; item = &quot;fruit&quot; if color == &quot;orange&quot;: print(&quot;Right color, wrong item!&quot;) else: color != &quot;orange&quot; , item == &quot;fruit&quot; print(&quot;Wrong color, right item!&quot;) if color ==&quot;green&quot;: print(&quot;Wrong color, wrong item!&quot;) else: item != &quot;fruit&quot; , color != &quot;orange&quot; print(&quot;Right item, right color!&quot;) print(color) . Right color, wrong item! Right item, right color! orange . . Temperature = 85 Cloudy = True if Temperature &gt; 85: if Cloudy == True: print(&quot;Hot and cloudy!&quot;) elif Cloudy == False: print(&quot;Hot, but not cloudy!&quot;) elif Temperature &lt; 80: if Cloudy == True: print(&quot;Neither hot nor cloudy!&quot;) elif Cloudy == False: print(&quot;Neither hot nor cloudy!&quot;) . . if spice &gt; 1000: if tongue == &quot;strong!&quot;: print(&quot;Not spicy!&quot;) elif milk == &quot;present&quot;: print(&quot;Not spicy!&quot;) elif tongue == &quot;weak&quot;: print(&quot;Spicy!&quot;) else: print(&quot;Not spicy at all!&quot;) . Create a piece of code that displays four statements instead of three. Try to do more if you can. . make = &quot;BMW&quot; model = &quot;M4 Competition&quot; year = &quot;2022&quot; if make == &quot;BMW&quot;: print(make) if model == &quot;M4 Competition&quot;: print(model) if year == &quot;2022&quot;: print(year) print(&quot;Nice car!&quot;) . BMW M4 Competition 2022 Nice car! . Make piece of code that gives three different recommendations for possible classes to take at a school based on two different conditions. These conditions could be if the student likes STEM or not. . STEM = True MISC = True if STEM: print(&quot;Algebra, AP CSP, AP Biology&quot;) elif PE: print(&quot;Art, Racket sports, Photography&quot;) else: print(&quot;PE&quot;) . Algebra, AP CSP, AP Biology .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/hacks/turkey/post%20tree/notes/2022/12/08/Section_5_7_Hacks.html",
            "relUrl": "/hacks/turkey/post%20tree/notes/2022/12/08/Section_5_7_Hacks.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post88": {
            "title": "Lesson 3.12 & 3.13",
            "content": "Topic 3.12 (3.A) Calling &amp; Understanding Procedures - Kaiden &amp; Amay . Overview: Learning Objectives . Basics of Procedures | Calling Procedures | Determine Results of Procedures | . What is a procedure? . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . x = 5 y = 3 def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there | . Ex: . procedureName(parameter1, parameter2, ...) | How would you call this procedure? | . num = 5 def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . Quiz (Part of Hacks) . Complete this quiz: . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Determining the Result of a Procedure . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . To use return values, you have to write the syntax return followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . Ex: . def divide(num1,num2): x = num1/num2 return x . what is x being assigned to inside the function? . | As a reminder, to use function parameters, you would have to write the syntax name of the function followed by the parameters needed in parentheses . | Function parameters are the parameters that are used when calling the function in order to get a result. . | . What are the function parameters in this procedure? . What values are being passed to the function? . def function(first_name, last_name): print(first_name + &quot; &quot; + last_name) function(&quot;Peter&quot;,&quot;Parker&quot;) function(&quot;Safin&quot;, &quot;Singh&quot;) . Peter Parker Safin Singh . In the cell above, the function is being called twice, which shows the importance of function in order to accomplish the same thing with different parameters. . What is wrong with the function? . Can you translate the binary numbers into decimal notation? . def find_cube(num): result = bin(num * num * num) cube = find_cube(3) cube2 = find_cube(4) print(&#39;Cube:&#39;,cube) print(&#39;Cube:&#39;,cube2 ) . Cube: None Cube: None . Once again, I called the function twice, which is useful, because it allows the coder to do the same thing multiple times with different arguments. . Topic 3.13 (3.B) Managing Complexity - Safin . Overview: Learning Objectives . increasing code modularity using procedures abstracting large problems into smaller ones | extract shared features to reduce code duplication | . | using parameters to reuse procedures | improving code readability with procedures | manipulating procedure logic and preserving outputEssentially, we&#39;ll learn how and when it is appropriate to construct a function (procedural abstraction) and what its benefits are . | . Vocabulary: . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Parameters . As we saw above, parameters can be used to make functions work with multiple different inputs. Let&#39;s review the following code . # these parameters are the inputs to the function, and they are used # inside the function to perform some operation def add(x, y): # inside the function, we can use the x and y parameters just like # we would use any other variable result = x + y return result # to call the function and pass in values for the x and y parameters, # we simply provide the values as arguments in the function call result = add(2, 3) print(result) # should output 5 # we can also use variables as arguments in the function call x = 5 y = 10 result = add(x, y) print(result) # should output 15 # we can even use the result of one function call as an argument # in another function call result = add(add(2, 3), add(4, 5)) print(result) # should output 14 . 5 15 14 . In the above example, parameters were used to create a function that could be called multiple times without code duplication. . Modularity . In the following example, we will use specialized functions and explain their benefits: . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): # ... pass assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 . Abstracting Shared Features . Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create... . count_words_starting_with_a_in_string(sentence) | count_words_starting_with_d_in_string(sentence) | . In order to count words starting with a certain character, we&#39;ll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here. . # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Words starting with a: 1 Words starting with d: 1 Words starting with a: 1 . In the above example, we have: . defined several functions that perform different tasks related to processing a string | abstracted away shared behavior for both functions that count the number of words starting with a specific character in a string | . Topic 3.13 (3.C) Developing Procedures - David &amp; Alex . Overview: Learning Objectives . parameters being used to manage complexity parameters storing variables | parameters storing arguments | . | calling functions with procedure names choosing procedure names | calling procedures in python and javascript | . | . Vocabulary: . Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Functions - Basic Structure . Functions can be created in many different languages. Below are some examples in Collegeboard&#39;s format, Python, and Javascript. . Collegeboard . Above, the function is defined as PROCEDURE, which tells the coder that this is a function. The function is then named with procName, which is simply how the function is identified. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. This will be gone over later in the lesson so don&#39;t worry if you don&#39;t get it. block of statements are just things that you would place inside a function to complete a certain task, such as print() in Python. . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Python is similar to the Collegeboard example, where def defines the function, function, and then is followed by parameters a,b, which can later be interchanged with any numbers as shown with function(1,2). The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed. . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Javascript in this case is almost the exact same as Python, the only differences being that function is called with function and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example. . Example . function div(a,b) { return (a+b)/2 } div(3,7) . What is the procedure name? | What are the parameters? | What operation is being done? | what would the output of this code be? | . Parameters . In functions, there are sometimes parameters that the functions have in which you can call to the function giving arguements that will provide input to the function For example: | . def function(num1, num2): if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) elif num1 &lt;num2: print(&quot;num1 is less than num 2&quot;) num1= 6 num2 = 8 function(num1,num2) . num1 is less than num 2 . In this function, it takes in two parameters num1 and num2 | Whithin this function it uses conditionals to determine if num 1 is larger or smaller than num2 | When calling to this function we must put in two arguements, num1 and num2 respectively | We put in 6 for num1 and 8 for num2 and the algorithm runs and gives us an outcome | . This basic function in python can be recreated in Javasript . function compare(a,b) { if(a&gt;b) { console.log(&quot;a is greater than b&quot;) } else if (a&lt;b) { console.log(&quot;a is less than b&quot;) } } // How do you call to this function? . what are the parameters? | What is the output? | what are the arguements? | . Calling functions . When calling functions, you have to ask yourself some questions Does the function have any parameters? | does the parameter have output? | . | Depending on these answers, the way you will call to a function will be different | . Example where it does does have parameters and gives output . def InchestoFeet(inches): Feet = 0 Feet = inches / 12 return Feet result = InchestoFeet(24) print(result) . 2 . If you look closely, there is a return at the end of the function, this returns a value when you call the function | This is why we have to set a variable, in this case result equal to the output of the function. | Also one thing to notice is that this function also takes in a parameter called inches | . Here&#39;s an example of calling functions in HTML with Javascript: . HI . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;HI&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | Rubric . Each hack is worth 0.3 points . To get 0.3 points for each hack you must: Complete each hack correctly and completely | Submit by 11:59PM on Friday, December 9 | . | The last 0.1 points are if you do a good job on the binary calculator. | Anything missing or submitted late will have points deducted. | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/12/04/lesson3.12_3.13.html",
            "relUrl": "/2022/12/04/lesson3.12_3.13.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post89": {
            "title": "Unit 3.9 & 3.11",
            "content": "Unit 3.9 . 3.9.1 Algorithms (Claire) . A little review on Algorithms: . what are the three components of an algorithm? . sel__ | seq__ | it___ | . Today we will be looking at algorithms from another standpoint. . Main Idea 1: Algorithms can be written in different ways and still do the same thing . However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | . Examples . The goal with the two algorithms below is to show &quot;Wow! Good job!&quot; when you get an A and show &quot;Nice!&quot; when you get a B or C (pass), if you don&#39;t pass (lower than 70) it will show &quot;Do Better&quot; . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . Yay! it worked! Lets look at the next one. Do you notice any differences? Do you think this algorithm will still achieve the same goal? If not, what is the flaw? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . So, why is this important? Why are we even doing this? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . just know that codes that look similar don&#39;t always produce the same things :) | . Real-life situation (Storytime) . Tommy and Billy are working on solving the same issue with an algorithm Tommy creates a functioning code and yells &quot;I did it!&quot; He looks over at his friend Billy which is having a bit of trouble and he offers help However, Billy&#39;s code looks basically the same! which confuses them Then they remeber that they were taught that algorithms that look similar don&#39;t always have the same results and they collaborate to do further investigation:) . Now, without running, investigate the algorithm below. This one looks different. Do you thing it will still achieve the same goal as above? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . Why is this important? . When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . How to write Nested Conditionals as Boolean expressions . the following 2 pieces of code is supposed to print &quot;don&#39;t go to school&quot; unless: . it is a weekday | . isHoliday = False isWeekday = True #if holiday, dont go to school if isHoliday == True: print(&quot;don&#39;t go to school!&quot;) # otherwise, if it is a weekday, go to school else: if isWeekday == True: print(&quot;go to school!&quot;) # but if it is neither a weekday or holiday, don&#39;t go to school else: print(&quot;don&#39;t go to school&quot;) . isHoliday = False isWeekday = True # setting variables here (same as above to make comparison easier) driveSchool = not(isHoliday) and isWeekday if driveSchool == False: print(&quot;don&#39;t go to school!&quot;) if driveSchool == True: print(&quot;go to school!&quot;) # now we can make a regular conditional/ if statement without having a nested conditional . Hacks . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | for the converted conditional to boolean conversion(0.10) | total: 0.25 | . 3.9.2 Developing Algorithms (Annika) . Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly | . | You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm | This may allow for the coding process to be more efficient and effective | . | . Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration | . | Algorithms with selection only go through certain functions if certain things are true or false | . Example 1 . Start | The number of pretzels in the pack is 6 | Eat one pretzels, number of pretzels in pack goes down by 1 | How many pretzels are left? | Repeat step 3 until number of pretzels is 0 | Display that pack is empty | Finish | pretzel = 6 while (pretzel &gt; 0): pretzel -= 1 print(pretzel) if pretzel == 0: print(&quot;All done!&quot;) . Example 2 . The parking rate for a garage is as follows: Less than one hour: Free 1-2 hours: $5 &lt;br&gt; 2-3 hours: $8 3-4 hours: $10 &lt;br&gt; 4+ hours: $12 . . Start | Input number of hours parked | If hours is less than 1, cost is free | If hours is between 1 and 2, cost is $5 | If hours is between 2 and 3, cost is $8 | If hours is between 3 and 4, cost is $10 | If hours is more than 4, cost is $12 | Display cost and goodbye | Finish | print(&quot;The parking rate is as follows: n Less than one hour: Free n 1-2 hours: $5 n 2-3 hours: $8 n 3-4 hours: $10 n 4+ hours: $12&quot;) time = float(input(&quot;How many hours have you parked at this garage?&quot;)) print(&quot;How many hours have you parked at this garage?&quot;) print(time, &quot;hours costs:&quot;) if time &lt; 1 : print(&quot;Free&quot;) elif time &gt;= 1 and time &lt; 2 : print(&quot;$5&quot;) elif time &gt;= 2 and time &lt; 3 : print(&quot;$8&quot;) elif time &gt;= 3 and time &lt; 4 : print(&quot;$10&quot;) else: print(&quot;$12&quot;) print(&quot;Have a good day!&quot;) . Hacks . Develop your own complex algorithm using a flowchart and natural language, then code it! . Requirements: . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . Tips: . This site is good for making flowcharts! | Natural language should just be a list | Think about the whole process, not just the end result | . 3.9.3 Using preexisting algorithms (Grace) . Main Idea . Knowing existing algorithms can help construct new ones | simple existing algorithms can include determining min or max of two or more numbers | computing the sum or average | identifying if an integer is even or odd | . | Using existing correct algorithms can help as building blocks to reduce development time, testing, and identification of errors | . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from following the Collatz Conjecture. . Example: 6 -&gt; 3 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 . What does this function do? . if (n MOD 2 = 0) { display(&quot;n is even&quot;) } else { display(&quot;n is odd&quot;) } . By modifying the preexisting code, we can write create new code that follows th Collatz Conjecture. . DISPLAY (&quot;Choose a value for n&quot;) n &lt;- INPUT () REPEAT UNTIL (n = 1) { IF (n MOD 2 = 0 ) { n &lt;- n/2 } ELSE { n &lt;- n * 3 + 1 } . Hacks . Fix the number guessing game . Make a flow chart for the algorithm number guessing game | Make a function that gets the user guess | Modify the existing search function to give more encouraging feedback | import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): #add something here return #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;You are bad at guessing&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;You suck :(&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . Unit 3.11 Binary Search (Claire) . Binary Search: . repeatedly dividing a search interval in half . Binary Search Steps: . first put the numbers in order ascending | descending | . | find the middle number first this is found by taking the highest index number plus the lowest index number and divide by 2 | the numbers on the right will be greater and the numbers on the left will be smaller | this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | z-a | . | . | . Practice: . What is the middle number in a Binary Search given the following set of numbers in order: 1, 5, 19, 44, 89 | What is the middle number in a Binary Search given the following set of numbers that are not in order: 3, 87, 12, 66, 22 | Hacks: . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . | Rubric: . All 4 hacks are graded the same way . 0.25/0.25 - shows full understanding of the lesson, completes all hacks assigned with explanation to go above and beyond, any extra hacks to show more understanding . 0.23/0.25 - shows understanding of algorithms/binary search and completes all hacks . 0.20/0.25 - does not understand algorithm/binary search and has not completed hacks .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/trimester%202%20student%20teaching/2022/12/02/unit3-9-11.html",
            "relUrl": "/trimester%202%20student%20teaching/2022/12/02/unit3-9-11.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post90": {
            "title": "Simulations- Unit 3 Section 16 Lesson",
            "content": "3.16 Intro to Simulations - Alexa . What is a simulation? A simulation is an imitation of a situation or process | Aka a virtual experiment | . | . Guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Examples of Simulations: . Simulations are used all the time over many different industries . testing safety of a car | games | testing the efficiency of a parking lot | testing a new train route | . Simulation vs. Experiment . Experiment definition: procedure undertaken to make a discovery, test a hypothesis, or demonstrate a known fact | . So, why use a simulation? . Advantages: Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantages: Not as accurate as experiments | outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | When do you not use a simulation? when a situation already has set results/data (won&#39;t change) | examples: a score in a game, most purchased food, average yearly wage | . | . leads into real life game example: . . . A Real Life Example: Four Corners - Lydia &amp; Ava . an example of a simulation and experiment = the game of 4 corners | games are simulations! | We are going to play a round of 4 corners here in class. This game is a real life version of our simulation. | Mr. Mortensen will be the person in the middle choosing corners. | Everyone will choose a corner, and if your corner is chosen, you are out! | . | . The rules of the game: . a person stands in the center of a room and the 4 coners are labeled 1-4 | Every player chooses a corner while the person in the middle closes their eyes | person in the middle chooses/calls out a number when instructed | every player in the chosen corner is now out | contine until there is a winner! | Let&#39;s play! . Below is the simulation of the four corners game! . import random status = &quot;in&quot; while status != &quot;out&quot;: chooseCorner = input(&quot;What corner do you choose?&quot;) corner = random.randint(1,4) if int(chooseCorner) == corner: status = &quot;out&quot; print(&quot;You chose corner number &quot; + chooseCorner + &quot; and you&#39;re OUT&quot;) else: print(&quot;You chose corner number &quot; + chooseCorner + &quot; and are still in!&quot;) . You chose corner number 2 and are still in! You chose corner number 3 and are still in! You chose corner number 4 and you&#39;re OUT . Comparing Experiment to Simulation Code: . Mr. Mortensen (person in the middle) = random.randint | if statement = if player is out | else = safe/continue | while loop = repeats process until there is a winner of the game | . DEBRIEF QUESTIONS: . Why is it better to code simulations than experiement in real life? | What makes this game a simulation? | What are its advantages and disadvantages? | Would an experiment be better in this situation? (raise hands for each team) | . . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . To test the safety of a car, a simulation can be ran to test out different outcomes depending on the force of the crash. A simulation of this would help to reduce the costs and effects of physically performing crash tests for a car. . Hack #2 (collegeboard based questions) . Simulations Quiz (either screenshot or paste quiz in your notebook): | . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . Welcome to the Simulations Quiz! True or False: Simulations will always have the same result. A: True, B: False You said: B Correct! True or False: A simulation has results that are more accurate than an experiment A: True, B: False You said: B Correct! True or False: A simulation can model real world events that are not practical for experiments A: True, B: False You said: A Correct! Which one of these is FALSE regarding simulations A: Reduces Costs, B: Is safer than real life experiments, C: More Efficient, D: More accurate than real life experiments You said: D Correct! Which of the following scenarios would be the LEAST beneficial to have as a simulation A: A retail company wants to identify the item which sold the most on their website, B: A restaurant wants to determine if the use of robots will increase efficiency, C: An insurance company wants to study the impact of rain on car accidents, D: A sports car company wants to study design changes to their new bike design You said: A Correct! Which of the following is better to do as a simulation than as a calculation A: Keeping score at a basketball game, B: Keeping track of how many games a person has won, C: Determining the average grade for a group of tests, D: Studying the impact of carbon emissions on the environment You said: D Correct! You scored: 6 /6 . . . Rolling a Dice Example - Sri . Below is a simulation of rolling dice! Examine the code and think about how this simulation works and its purpose! . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . you rolled: [5, 1, 2] . . . Game of Life - Lydia &amp; Ava . Below is a simulation of the Game of Life, originally written by John Horton Conway. Mr. Mortensen has this game on the APCSP site and we think that it is a great example of an interactive simulation. . What it is . This game is an unpredictable cellular automaton | automaton = simulates and imitates human life, hence why this is called the game of life | After creating the initial configuration, the game evolves without pattern | . How it works . Cells in this game are alive or dead, similar to binary where they are on or off | The user created an initial configuration of cells on the grid, and presses play (tap the squares on the grid) | a cells&#39;s status (alive or dead, on or off) depends on the surrounding 8 cells status (surrounding 8 boxes). Here are the rules: The birth rule= a dead cell (blue box) that is surrounded by at least 3 alive cells (yellow boxes), will become alive | The death rule= an alive cell (yellow) with no or only one surviving cell around it dies (becomes blue) | Cell survival= an alive cell (yellow) with 2 or 3 alive neighboring cells will stay alive | . | . Try it Out! . Use the grid below to create cell figurations, press play, and watch your cells die, live, and move around! . . Remix of Game of Life . start step . . Hack #3 . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . . . Hacks Overview . Use these guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Hack #1 (0.3) . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (0.1) . Simulations Quiz (either screenshot or paste quiz in your notebook) | . Hack #3 (0.2) . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 (0.3) . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Extra Credit (0.1) . For the extra 0.1: try coding a simple simulation and describe it (guiding question) | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/studentlesson/simulations",
            "relUrl": "/studentlesson/simulations",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post91": {
            "title": "Hacks Sections 3-4",
            "content": "Notes . Algorithms . An algorithm is a set of instructions that complete a given task | There are three key parts to an algorithm: sequencing, selection, and iteration | Sequence: The order in which a statement is carried out | Selection: The ability to allow an algorithm to carry out a conditional based condition | Iteration: A loop that executes code until a given condition is met | . Strings . Each coding language has its own relative methods, procedures, and functions | String is an ordered sequences of characters | . Unit 3.3.1 Hacks . Parts of an Algorithm . Sequencing: 1, 2, 3, 4, 5 . Selection: 3 . Iteration: 4 . Code Evaluation . The result is 3.0 | . num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 print(result) . 3.0 . Crossword Puzzle Answers 1) Iteration 2) Selection 3) Sequence . Unit 3.4 Hack . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/hacks/turkey/post%20tree/notes/2022/11/29/Section_3_4_Hacks.html",
            "relUrl": "/hacks/turkey/post%20tree/notes/2022/11/29/Section_3_4_Hacks.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post92": {
            "title": "Hacks Sections 1-2",
            "content": "Notes . Essential Knowledge Problems from College Board 1) A variable is an abstraction inside a program that holds a value, where each variable has associated data storage that represents a single value at a time (However, if the value is a collection type such as a list, then the value can contain multiple values). 2) Variables typically have meaningful names that helps with the overall organization of the code and understanding of what is being represented by the variables 3) Some programming languages provide a variety of methods to represent data, which are referenced using variables 9Booleans, numbers, lists, and strings) 4) One form of a value is better suited for representation than another. . Types of Data . Integers (numbers) | String (text/letters) | Boolean (True/False statements) | . Unit 3.1.1 Hacks . -Prompt: Create code that… 1) Uses variables 2) Shows your understanding of different variable data types by using at least 2 different types in your code 3) Uses meaningful names to prevent confusion&quot; . str=&quot;Hello World&quot; integerOne=7 integerTwo=5 print(str) print(integerOne + integerTwo) . Hello World 12 . Unit 3.1.2 Hacks . Prompt: In your own words, briefly explain by writing down what an assignment operator is. . An assignment operator is a type of operator used to assign a value to a variable. It takes the form of &quot;=&quot;, where the value on the right side of the operator is assigned to the variable on the left side. For example, a = 5 assigns the value of 5 to the variable a. | . - In Collegeboard pseudocode, what symbol is used to assign values to variables?** . An arrow (&lt;–) is used to assign values to variables. | . A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? . If the variable x was changed to 22, then, print(x) would display 22. | . Unit 3.2.1 Hacks . 1) What is a list? A list is a sequence of elements in which each element is represented by variable. . 2) What is an element? A basic unit of data in a programming language. . 3) What is an easy way to reference the elements in a list or string? An easy way to reference the elements in a list or string is to use indexes. . 4) What is an example of a string? An example of a string is a sequence of characters such as &quot;Apples&quot;. . Unit 3.2.1 Hacks . Create an index of your favorite foods Tips: Index starts at 1, Strings are ordered sequences of characters . Extra work: Try to create an index that lists your favorite food and print the element at index 3. More work: Create a list of your favorite foods and create an index to access them. . marks = [“food1”] . yumyum = [&quot;potatoes&quot;, &quot;rice&quot;, &quot;pasta&quot;, &quot;fried chicken&quot;] print(yumyum[1]) print(yumyum[3]) . rice fried chicken . Unit 3.2.2 Hacks . The following code is incomplete. Its intended purpose is to increase three numbers, all of which ask for user input, by an amount specified the user. The input code is abstracted, but the actual logic isn’t connected to the abstraction. . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] print(&quot;User submitted numbers&quot;, numlist) print(&quot;Plus &quot; + add) # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in range (len(numlist)): numlist[i-1] += int(add) print(&quot;Result: &quot;, numlist) . User submitted numbers [5, 2, 77] Plus 25 Result: [30, 27, 102] . Unit 3.2.3 Hacks . On a single markdown file: . Insert a screenshot of your score on the python quiz | Insert a screenshot of your simplification of the food list | Why are using lists better for a program, rather than writing out each line of code? Lists help to organize code and reduce repetitiveness in a program. . | Make your own list the “long and slow way” then manage the complexity of the list . | . Python Quiz Result . . vegetable1 = &quot;Carrots&quot; vegetable2 = &quot;Broccoli&quot; vegetable3 = &quot;Cabbage&quot; vegetable4 = &quot;Radishes&quot; print(vegetable1, vegetable2, vegetable3, vegetable4) . Carrots Broccoli Cabbage Radishes . fruits = [&quot;Apples&quot;, &quot;Bananas&quot;, &quot;Watermelon&quot;, &quot;Oranges&quot;] print(fruits) . [&#39;Apples&#39;, &#39;Bananas&#39;, &#39;Watermelon&#39;, &#39;Oranges&#39;] .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/hacks/turkey/post%20tree/notes/2022/11/28/Section_1_2_Hacks.html",
            "relUrl": "/hacks/turkey/post%20tree/notes/2022/11/28/Section_1_2_Hacks.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post93": {
            "title": "Unit 3.17-3.18 Group Lesson Period 4",
            "content": "Hailstone numbers . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . Sequence: 4 2 1 . Number of iterations . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Please enter a number: Number of iterations: 8 . Vocab . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples:Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No.&gt; ### Iteration The action or a process of iterating or repeating:such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. . Additional information . A problem posed by L. Collatz in 1937, also called the 3x+1 mapping, 3n+1 problem, Hasse&#39;s algorithm, Kakutani&#39;s problem, Syracuse algorithm, Syracuse problem, Thwaites conjecture, and Ulam&#39;s problem (Lagarias 1985). Thwaites (1996) has offered a £1000 reward for resolving the conjecture. Let a_0 be an integer. Then one form of Collatz problem asks if iterating . always returns to 1 for positive a_0. (If negative numbers are included, there are four known cycles (excluding the trivial 0 cycle): (4, 2, 1), (-2, -1), (-5, -14, -7, -20, -10), and (-17, -50, -25, -74, -37, -110, -55, -164, -82, -41, -122, -61, -182, -91, -272, -136, -68, -34).) . The members of the sequence produced by the Collatz are sometimes known as hailstone numbers. Conway proved that the original Collatz problem has no nontrivial cycles of length &lt;400. Lagarias (1985) showed that there are no nontrivial cycles with length &lt;275000. Conway (1972) also proved that Collatz-type problems can be formally undecidable. Kurtz and Simon (2007) proved that a natural generalization of the Collatz problem is undecidable; unfortunately, this proof cannot be applied to the original Collatz problem. . The Collatz algorithm has been tested and found to always reach 1 for all numbers &lt;=19·2^(58) approx 5.48×10^(18) (Oliveira e Silva 2008), improving the earlier results of 10^(15) (Vardi 1991, p. 129) and 5.6×10^(13) (Leavens and Vermeulen 1992). Because of the difficulty in solving this problem, Erdős commented that &quot;mathematics is not yet ready for such problems&quot; (Lagarias 1985). . The numbers of steps required for the algorithm to reach 1 for a_0=1, 2, ... are 0, 1, 7, 2, 5, 8, 16, 3, 19, 6, 14, 9, 9, 17, 17, 4, 12, 20, 20, 7, ... (OEIS A006577; illustrated above). Of these, the numbers of tripling steps are 0, 0, 2, 0, 1, 2, 5, 0, 6, ... (OEIS A006667), and the number of halving steps are 0, 1, 5, 2, 4, 6, 11, 3, 13, ... (OEIS A006666). The smallest starting values of a_0 that yields a Collatz sequence containing n=1, 2, ... are 1, 2, 3, 3, 3, 6, 7, 3, 9, 3, 7, 12, 7, 9, 15, 3, 7, 18, 19, ... (OEIS A070167). . The Collatz problem can be implemented as an 8-register machine (Wolfram 2002, p. 100), quasi-cellular automaton (Cloney et al. 1987, Bruschi 2005), or 6-color one-dimensional quasi-cellular automaton with local rules but which wraps first and last digits around (Zeleny). In general, the difficulty in constructing true local-rule cellular automata arises from the necessity of a carry operation when multiplying by 3 which, in the worst case, can extend the entire length of the base-b representation of digits (and thus require propagating information at faster than the CA&#39;s speed of light). . More information . Hacks/Assignment . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. (Algorithm Efficency) (.25) . Unit 3, Section 17: Algorithm Efficiency - Kush &amp; Yasha . What is Algorithm Efficiency? . Yasha - Algorithmic efficiency is an aspect of algorithmic programming that measures the number of steps needed to solve a problem. For instance, If I wanted to create a sorting algorithm that sorts numbers the numbers [2,4,5,1,3]from least to greatest, rather than having an algorithm that compares itself to the next number and swaps accordingly it would be more efficient if you had a program that scans through all the numbers and checks whether a number is smaller or bigger than the rest than and sorts accordingly. Both of the algorithms had the same objective, but one runs more efficiently than the other. . Here is an example of an inefficient algorithm: . def inefficientWay(numbers): # Then it loops over the numbers for i in range(len(numbers)): # Now it finds the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # Then it swaps the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(inefficientWay([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - This algorithm is inefficent because it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. This is an inefficient way to sort a list. . Kush - Here is an efficent way to sort a list: . def efficient_sort(numbers): # loop over the numbers for i in range(len(numbers)): # find the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # swap the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(efficient_sort([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - The difference in this algorithm is that it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. . How can you use algorithms to better your life: Mini activity . Yasha - Just for a second, think about all the tasks in your life that would work so much better automated. The sky&#39;s the limit. For an activity, write down or take a mental note of a task that you encounter in your day to day life, and think of ways where you can automate that task. An example of this would be me creating an algorithm for my morning routine. . tasks = [&quot;wake up&quot;, &quot;eat breakfast&quot;, &quot;brush teeth&quot;, &quot;go to school&quot;] def complete_tasks(tasks): for task in tasks: # code to complete each task goes here if task == &quot;wake up&quot;: print(&quot;Waking up now!&quot;) elif task == &quot;eat breakfast&quot;: print(&quot;Eating breakfast now!&quot;) elif task == &quot;go to school&quot;: print(&quot;Going to school now!&quot;) # and so on for each task in the list # call the function to complete the tasks complete_tasks(tasks) . Waking up now! Eating breakfast now! Going to school now! . Taking a heuristic approach to problems P1 . Kush - Sometimes when a problem has too many possibilities, a heuristic approach would be taken. let&#39;s use planes as an example. Imagine you were a musician on tour. You have shows in New Zealand, United States, Canada, and Russia. Well, what would be the shortest flight route so you can arrive at those destinations as fast as possible? You start in the United States. . Taking a heuristic approach to problems P2 . Kush - Well, since there are multiple possibilities, I chose to pick the countries closest to each other. The reason I chose this algorithm in particular is that it made the most sense. I had to start at United States, but then I went on to Canada, Russia, New Zealand, and then back to the United States. . Visual Representation . Hacks/assignment . Write 2 algorithms: One is efficent and one is innefficent, then explain why one is efficent while the other isn&#39;t. (.25) | Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning. (.25) | use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages. (.25) | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/11/28/Quinn&Group.html",
            "relUrl": "/2022/11/28/Quinn&Group.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post94": {
            "title": "Binary Calculator",
            "content": "&lt;html&gt; &lt;head&gt; &lt;title&gt;Binary Calculator&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Binary Calculator&lt;/h1&gt; &lt;form&gt; &lt;input type=&quot;text&quot; id=&quot;first-number&quot; placeholder=&quot;First Number&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;second-number&quot; placeholder=&quot;Second Number&quot;&gt; &lt;button type=&quot;button&quot; id=&quot;add-button&quot;&gt;+&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;subtract-button&quot;&gt;-&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;multiply-button&quot;&gt;*&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;divide-button&quot;&gt;/&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;modulo-button&quot;&gt;%&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;clear-button&quot;&gt;Clear&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;/form&gt; &lt;script&gt; function binaryToDecimal(binary) { var decimal = 0; var power = 0; for (var i = binary.length - 1; i &gt;= 0; i--) { decimal += binary[i] * Math.pow(2, power); power++; } return decimal; } function decimalToBinary(decimal) { var binary = &quot;&quot;; while (decimal &gt; 0) { binary = decimal % 2 + binary; decimal = Math.floor(decimal / 2); } return binary; } function add(a, b) { return a + b; } function subtract(a, b) { return a - b; } function multiply(a, b) { return a * b; } function divide(a, b) { return a / b; } function modulo(a, b) { return a % b; } function calculate(a, b, operation) { var decimalA = binaryToDecimal(a); var decimalB = binaryToDecimal(b); var decimalResult = operation(decimalA, decimalB); var binaryResult = decimalToBinary(decimalResult); return binaryResult; } var firstNumber = document.getElementById(&quot;first-number&quot;); var secondNumber = document.getElementById(&quot;second-number&quot;); var addButton = document.getElementById(&quot;add-button&quot;); var subtractButton = document.getElementById(&quot;subtract-button&quot;); var moduloButton = document.getElementById(&quot;modulo-button&quot;); var clearButton = document.getElementById(&quot;clear-button&quot;); var result = document.getElementById(&quot;result&quot;); addButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, add); }); subtractButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, subtract); }); multiplyButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, multiply); }); divideButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, divide); }); moduloButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, modulo); }); clearButton.addEventListener(&quot;click&quot;, function() { firstNumber.value = &quot;&quot;; secondNumber.value = &quot;&quot;; result.innerHTML = &quot;&quot;; }); &lt;/script&gt; &lt;/body&gt; &lt;/html var multiplyButton = document.getElementById(&quot;multiply-button&quot;); var divideButton = document.getElementById(&quot;divide-button&quot;); var moduloButton = document.getElementById(&quot;modulo-button&quot;); var clearButton = document.getElementById(&quot;clear-button&quot;); var result = document.getElementById(&quot;result&quot;); addButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, add); }); subtractButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, subtract); }); multiplyButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, multiply); }); divideButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, divide); }); moduloButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, modulo); }); clearButton.addEventListener(&quot;click&quot;, function() { firstNumber.value = &quot;&quot;; secondNumber.value = &quot;&quot;; result.innerHTML = &quot;&quot;; }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . File &lt;tokenize&gt;:112 &lt;/script&gt; ^ IndentationError: unindent does not match any outer indentation level .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/binary/calculator/2022/11/28/.binarycalc.html",
            "relUrl": "/binary/calculator/2022/11/28/.binarycalc.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post95": {
            "title": "Title",
            "content": "echo hi . hi .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/11/18/bash.html",
            "relUrl": "/2022/11/18/bash.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post96": {
            "title": "Title",
            "content": "&lt;html&gt; &lt;head&gt; &lt;title&gt;Binary Calculator&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Binary Calculator&lt;/h1&gt; &lt;form&gt; &lt;input type=&quot;text&quot; id=&quot;first-number&quot; placeholder=&quot;First Number&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;second-number&quot; placeholder=&quot;Second Number&quot;&gt; &lt;button type=&quot;button&quot; id=&quot;add-button&quot;&gt;+&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;subtract-button&quot;&gt;-&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;multiply-button&quot;&gt;*&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;divide-button&quot;&gt;/&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;modulo-button&quot;&gt;%&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;clear-button&quot;&gt;Clear&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;/form&gt; &lt;script&gt; function binaryToDecimal(binary) { var decimal = 0; var power = 0; for (var i = binary.length - 1; i &gt;= 0; i--) { decimal += binary[i] * Math.pow(2, power); power++; } return decimal; } function decimalToBinary(decimal) { var binary = &quot;&quot;; while (decimal &gt; 0) { binary = decimal % 2 + binary; decimal = Math.floor(decimal / 2); } return binary; } function add(a, b) { return a + b; } function subtract(a, b) { return a - b; } function multiply(a, b) { return a * b; } function divide(a, b) { return a / b; } function modulo(a, b) { return a % b; } function calculate(a, b, operation) { var decimalA = binaryToDecimal(a); var decimalB = binaryToDecimal(b); var decimalResult = operation(decimalA, decimalB); var binaryResult = decimalToBinary(decimalResult); return binaryResult; } var firstNumber = document.getElementById(&quot;first-number&quot;); var secondNumber = document.getElementById(&quot;second-number&quot;); var addButton = document.getElementById(&quot;add-button&quot;); var subtractButton = document.getElementById(&quot;subtract-button&quot;); var moduloButton = document.getElementById(&quot;modulo-button&quot;); var clearButton = document.getElementById(&quot;clear-button&quot;); var result = document.getElementById(&quot;result&quot;); addButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, add); }); subtractButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, subtract); }); multiplyButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, multiply); }); divideButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, divide); }); moduloButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, modulo); }); clearButton.addEventListener(&quot;click&quot;, function() { firstNumber.value = &quot;&quot;; secondNumber.value = &quot;&quot;; result.innerHTML = &quot;&quot;; }); &lt;/script&gt; &lt;/body&gt; &lt;/html var multiplyButton = document.getElementById(&quot;multiply-button&quot;); var divideButton = document.getElementById(&quot;divide-button&quot;); var moduloButton = document.getElementById(&quot;modulo-button&quot;); var clearButton = document.getElementById(&quot;clear-button&quot;); var result = document.getElementById(&quot;result&quot;); addButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, add); }); subtractButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, subtract); }); multiplyButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, multiply); }); divideButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, divide); }); moduloButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, modulo); }); clearButton.addEventListener(&quot;click&quot;, function() { firstNumber.value = &quot;&quot;; secondNumber.value = &quot;&quot;; result.innerHTML = &quot;&quot;; }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . File &lt;tokenize&gt;:112 &lt;/script&gt; ^ IndentationError: unindent does not match any outer indentation level .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/11/17/.binarycalc.html",
            "relUrl": "/2022/11/17/.binarycalc.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post97": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post98": {
            "title": "Binary Logic and Abstraction",
            "content": "Binary, Data, Data Structures, Data Abstraction (ASCII, Unicode, Color Codes), . Algorithms, Data and Data Structures go together. It is required to have a data topic as you venture into Algorithms and Lessons. This blog is a collection of binary, data and data structures that should be your data topic!!! Use a data topic as you learn algorithms and programming. . Explore that topic in Computer Science manner (research, jupyter notebooks, frontend / backend coding) | Build a lesson that is more interesting, by explaining an algorithm and logic using a data topic. | Teach with examples… Segment from CS50 and go to minute 13:15. | Tour the Code. Use Binary Frontend Code to get you started. Better clone APCSP project drag and drop _posts/2022-07-07-PBL-binary.md to your project and Debug | This Tech Talk will finish by reviewing hacks, the remainder of this blog and Binary Frontend Code is part of your research. | . Math in Binary . Learn binary by bitwise operators and more. Shifting bits is a common computer operation and does wonderful things in math like multiply and divide. Last bit always determines odd or even. Look for shift on w3schools . Logic of Shift . Explore right and left shifts with binary numbers. . In an arithmetic shift, the bits that are shifted out of either end are discarded. | In a left arithmetic shift, zeros are shifted in on the right. | . Understand binary Numbers by elaboration of Shift (2^^0, 2^^1, 2^^2) . How does the Power of 2 work? What is a binary number? What is Base2, Base10, Base16. . This example uses an 8-bit register. Math can be represented in much in many more bits, 32 bits or 2 bytes is common for integer in modern computer languages. | Most Significant Bit (MSB), least (LSB) | This example shows negative and positive numbers, using technique called Twos Complement. | In the first case, the leftmost digit was shifted past the end of the register, and a new 0 was shifted into the rightmost position. Positive Multiply. | In the second case, the rightmost 1 was shifted out, and a new 1 was copied into the leftmost position, preserving the sign of the number. Negative Divide, this example obviously needs more study. | . UI Concept/Design . Conceptualize on a UI that will illustrate binary and decimal. In learning these concepts, it is best to code and example to illustrate what is happening. . n Right Shifts (divides by 2^n); n Left Shifts (multiplies by 2^n) | Add buttons for “«” and “ »” | . ASCII and Unicode . Computers represent more than Math. Mostly everyone is familiar with the characters on a keyboard and Emojis. These are all represented in binary, the data abstraction being the characters we visualize. 😂 . Character Data Abstraction . How are characters stored? How many bits do they take? . ASCII is 8 bits, it generally represent keys on keyboard. Look up ASCII Table. | Unicode can be UTF-8, 16 or 32, each representing bits. ASCII is preserved in Unicode. | ASCII - 7 bits, extended to 8 bits with Unicode | UTF-8 | UTF-16 | UTF-32 Sample of Unicode characters. | . UI Concept/Design . The ASCII value in picture should be change based off of the bits in evaluation you are doing. Bits displayed, label, and evaluation would be specific to evaluation type: Original ASCII . Color Codes . Pixels are little dots on Monitors and TVs that make up the display. Each pixel has an Red Green and Blue value (RGB). All pictures we see or take are composed of RGB using a density measurement. These are stored and then represented by digitally or in print. . Monitors 1280 x 1024 Super-eXtended Graphics Array (SXGA) | 1366 x 768 High Definition (HD) | 1600 x 900 High Definition Plus (HD+) | 1920 x 1080 Full High Definition (FHD) | 1920 x 1200 Wide Ultra Extended Graphics Array (WUXGA) | . | TVs 4K Ultra HD: The term 4K means the screen is about 4,000 pixels wide. … | 1080p (Full HD): This resolution is 1,920 x 1,080 pixels. … | 720p (HD Ready): This is mostly found on smaller TVs, and it has a resolution of 1,280 x 720. | . | Camera |Sensor Resolution (megapixels)|Typical Image Resolution (pixels)| |2.16|1800 x 1200| |3.9|2272 x 1704| |5.0|2592 x 1944| |7.1|3072 x 2304| |8.0|3264 x 2448| |10.0|3648 x 2736| |12.1|4000 x 3000| |14.7|4416 x 3312| |21.0|5616 x 3744| | . A Color code is a 24 bit abstraction. . There are 8 bits for Red, 8 bits for Blue, and 8 bits for Green. . Name | Hex Code | RGB Code | . Black | #000000 | rgb(0, 0, 0) | . Red | #FF0000 | rgb(255, 0, 0) | . Maroon | #800000 | rgb(128, 0, 0) | . Yellow | #FFFF00 | rgb(255, 255, 0) | . 255 * 255 * 255 combinations of R, G, B . UI Design . Here is a sample program a student used to visualize color by turning buttons on and off. by Anthony Vo 3 rows representing R, G, B Resulting color displayed in block . Logic Gates . The fundamentals of all decisions in computers is made by logic gates. These gates are visualized by permuting 1 and 0 across many different types of decisions. The result is an expression that evaluated to 1 or 0. These are called Truth Tables. . Logic Gates can be simulated with 2 bits . Look for bitwise operators on w3schools . UI Concept . Visual concept of logic gates . Establish check boxes for A / B on and off | Show result of Boolean Expression using Gate visual Logic Gates | . UI Design . Logic gate lab in JavaScript by Kylie Scharf AB checkboxes with Submit button Table with Symbol, Description, and Result . Logic of Logic Gates . A logic gate can have two inputs (a,b) and by how changing these inputs it impacts the output(c). . There are four possible inputs: 0 0 | 0 1 | 1 0 | 1 1 | . | Understanding the output enables us to understand a logical expressions. All outputs are routed in Logic Gates (similar to how a language is routed in Latin). AND is true for 1 1; NAND is true opposite of AND 0 0, 0 1, 1 0 | OR is true for 1 1, 0 1, 1 0, NOR is true opposite of OR 0 0 | XOR is true for 0 1, 1 0 | . | . Practical Application . Logic gates are used everywhere . Unsigned Addition . Here we are requesting 3 rows of bits to simulate Math. This could be done with 4, 8, or 16 bits. . Initial UI Implementation . Action buttons for +1 and -1 Additional actions for Turn On and Turn Off . Unsigned Addition . . Signed Addition . Integers in most languages are int8, int16, int32, or int64. They typically reserve left most bit for sign. . Common concept for Integer Math . Positive number . Basic concept, but not typically used . Negative number . Inverting numbers, twos complement . Two’s complement allows adding for signed and unsigned numbers . Basic concept is to invert/negate bits to produce negative. This allows numbers to be added together for expected results. » and »&gt; have been adapted to handle signed and zero filled shifting. . Technical helpers . Harvard CS50 minute 0 to minute 50 to provide background on some of the information below. . Algorithm in Jinja2 to limit Bits per row . 8 images per row by Kylie Scharf Modulo 8 algorithm add &lt;tr&gt; for every eight bits (code). . Research Helpers . CHAPTER 8 - Binary Addition and Two’s Complement Overview find by Val Wilson . Hacks . Data, Data Structures, and Algorithms work together. Data helps supply an interests/topic to an algorithm. It will be expected that you have a topic as you go through various algorithms. . Use data abstraction (ie data structures) in your lesson | Make sure you teach/learn elements from this blog as you learn algorithms | Add “Science” into your process (research, jupyter notebook, and ultimately running application) | Topics used in teaching, not listed in lesson/labs/homework need to be approved by Teacher. The topics above focus on data ideas from Unit 2 of AP Classroom. | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/1.d/2.b/3.c/c4/4/2022/11/14/AP-binary_logic.html",
            "relUrl": "/1.d/2.b/3.c/c4/4/2022/11/14/AP-binary_logic.html",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post99": {
            "title": "Finals Week Trimester 1",
            "content": "Overall Class Experience . This was quite an informative class that has helped me step into the world of Computer Science. I enjoyed the various projects and assignments given to us, as they helped us develop skills that we can use in the future. . Night at the Museum Experience . Night at the Museum was a very interesting and awesome experience. Some notable works I saw were a recreation of Kahoot and a Marvel comic tracker. It was really cool to see the framework and code of various other teams across the AP CSP periods. It was also very gratifying to present our team&#39;s website, which was an NBA team tracker. There were many people that were intrigued with our project and gave us compliments. One particular moment I remember was a young child that asked us to input the Trailblazers, who were his favorite team. When we showed the information, he was really interested in our app and said that it was really cool. . Missed Problems . . The code segment first adds the values of x and y, then divides the sum by x, then prints the result. The value of x must not be 0; otherwise a divide-by-zero error will occur when result is divided by x. . . . If the number of units of electricity used is 25 or less, the cost is 5 times the number of units. Otherwise, the cost is 5 times the first 25 units plus 7 times the number of units above 25. For examples, if a customer used 32 units of electricity, they should be charged $5 for the first 25 and $7 for the additional 7 units (32 – 25 = 7 units), for a total charge of $174. . . . The first three statements assign values to the variables. The fourth statement assigns the value of y (which is 50) to x. The fifth statement assigns the value of z (which is 75) to y. The sixth statement assigns the value of x (which is 50) to z. Therefore, x and z both have the value 50. . . Problems/Difficulties . There were a few problems that I had issues with. I had previously watched the College board videos to help me prepare for this quiz. I found that though I was quite prepared, there were some problems that were tricky. Another fault I found was that I went through this quiz a bit quickly, so some of these missed questions may be due to myself going over the quiz too quickly. I think that I need to practice more and look over more of the overall theory of this course. Since taking the test, I have taken a look at some online videos and read over the material on the College board website. . Links for help . https://apclassroom.collegeboard.org/103/assessments/results/48247192/performance/1519904?apd=t5x16fbkls https://apclassroom.collegeboard.org/103/assessments/results/48247192/performance/1519878?apd=8to186ayba https://apclassroom.collegeboard.org/103/assessments/results/48247192/performance/1519867?apd=n41wuewukt .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/finals/natm/collegeboard/2022/11/07/FinalsWeek.html",
            "relUrl": "/markdown/finals/natm/collegeboard/2022/11/07/FinalsWeek.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post100": {
            "title": "Qualcomm Career Series Notes",
            "content": ". What I learned… . The Qualcomm Career Series events helped me understand the importance of leadership and working in teams. From the presentations, I learned about how essential it is to be able to work together with a team in order to help solve problems. Furthermore, it was noted that scrum-like processes and working in groups allows us to work more efficiently - freeing up the mental capacity that we need to help innovate. Two important messages I heard in the presentations were “Whenever any doubt enters your mind, remember that you can lead from any chair.” The other message was to always ask “What is the purpose?” in regards to what we are/are trying to achieve with our team. I could relate to the first message as I am my table’s scrum master, which involves me having to take charge and lead my team, filling in any roles when necessary. The second message helped to open my mind in terms of not just following instructions, but to go above and beyond - asking questions helps us learn more. Finally, the last key thing I learned from the seminar was to never question yourself. You do not want to think that you do not deserve a certain role or job in a company, as that can affect our performance- if we question our own abilities, then we can never see our true potential. These were the key principles that I have learned from the Qualcomm Career Series presentations. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/markdown/md/qualcomm/notes/2022/10/18/qcom-notes.html",
            "relUrl": "/fastpages/markdown/md/qualcomm/notes/2022/10/18/qcom-notes.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post101": {
            "title": "Fixing Errors (Menu Problem)",
            "content": "import sys total = 0 menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;Burger&quot;: 3.99, &quot;Fries&quot;: 1.99, &quot;Drink&quot;: 0.99} print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) ordering = True while ordering: food = input(&quot;Please select an item from the menu. Press enter when you are done.&quot;) if food in menu: total += menu[food] print(&quot;Your total: $&quot; + &quot;{:.2f}&quot;.format(total)) else: print(&quot;Your order will be ready soon!&quot;) ordering = False . Menu burger $3.99 fries $1.99 drink $0.99 Your total: $3.99 Your total: $5.98 Your total: $6.97 Your total: $7.96 Your total: $11.95 Your order will be ready soon! .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/python/lists/iterations/menu/2022/10/10/ErrorFixing.html",
            "relUrl": "/fastpages/python/lists/iterations/menu/2022/10/10/ErrorFixing.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post102": {
            "title": "API Usage",
            "content": "import requests url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;d3a3e94748msh74bb629320d5734p160ceajsn7f28f4859ea2&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;Niue&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . Country Totals country_name Niue cases 8 deaths 0 region total_recovered 7 new_deaths 0 new_cases 0 serious_critical 0 active_cases 1 total_cases_per_1m_population 4,860 deaths_per_1m_population 0 total_tests 0 tests_per_1m_population 0 . import requests url = &quot;https://car-data.p.rapidapi.com/cars&quot; querystring = {&quot;limit&quot;:&quot;50&quot;,&quot;page&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;d3a3e94748msh74bb629320d5734p160ceajsn7f28f4859ea2&quot;, &quot;X-RapidAPI-Host&quot;: &quot;car-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) output = response.json() for car in output: if car[&quot;make&quot;] == &quot;Ford&quot;: print(f&quot;{car[&#39;year&#39;]} {car[&#39;make&#39;]} {car[&#39;model&#39;]}&quot;) . 1999 Ford Taurus 2011 Ford E350 Super Duty Cargo 2003 Ford F250 Super Duty Super Cab 2017 Ford Escape . import requests url = &quot;https://yahoo-finance97.p.rapidapi.com/stock-info&quot; payload = &quot;symbol=MYOV&quot; headers = { &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;X-RapidAPI-Key&quot;: &quot;d3a3e94748msh74bb629320d5734p160ceajsn7f28f4859ea2&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-finance97.p.rapidapi.com&quot; } response = requests.request(&quot;POST&quot;, url, data=payload, headers=headers) print(response.text) . {&#34;data&#34;:{&#34;52WeekChange&#34;:0.1451236,&#34;SandP52WeekChange&#34;:-0.17819631,&#34;address1&#34;:&#34;11-12 St. James u2019s Square&#34;,&#34;address2&#34;:&#34;Suite 1, 3rd Floor&#34;,&#34;algorithm&#34;:null,&#34;annualHoldingsTurnover&#34;:null,&#34;annualReportExpenseRatio&#34;:null,&#34;ask&#34;:24.64,&#34;askSize&#34;:1200,&#34;averageDailyVolume10Day&#34;:823510,&#34;averageVolume&#34;:975060,&#34;averageVolume10days&#34;:823510,&#34;beta&#34;:2.120854,&#34;beta3Year&#34;:null,&#34;bid&#34;:24.44,&#34;bidSize&#34;:800,&#34;bookValue&#34;:-5.055,&#34;category&#34;:null,&#34;circulatingSupply&#34;:null,&#34;city&#34;:&#34;London&#34;,&#34;coinMarketCapLink&#34;:null,&#34;companyOfficers&#34;:[],&#34;country&#34;:&#34;United Kingdom&#34;,&#34;currency&#34;:&#34;USD&#34;,&#34;currentPrice&#34;:24.54,&#34;currentRatio&#34;:1.887,&#34;dateShortInterest&#34;:1664496000,&#34;dayHigh&#34;:24.755,&#34;dayLow&#34;:24.27,&#34;debtToEquity&#34;:null,&#34;dividendRate&#34;:null,&#34;dividendYield&#34;:null,&#34;earningsGrowth&#34;:null,&#34;earningsQuarterlyGrowth&#34;:null,&#34;ebitda&#34;:-137992992,&#34;ebitdaMargins&#34;:-0.45036998,&#34;enterpriseToEbitda&#34;:-17.136,&#34;enterpriseToRevenue&#34;:7.718,&#34;enterpriseValue&#34;:2364714496,&#34;exDividendDate&#34;:null,&#34;exchange&#34;:&#34;NYQ&#34;,&#34;exchangeTimezoneName&#34;:&#34;America/New_York&#34;,&#34;exchangeTimezoneShortName&#34;:&#34;EDT&#34;,&#34;expireDate&#34;:null,&#34;fiftyDayAverage&#34;:19.9926,&#34;fiftyTwoWeekHigh&#34;:25.7,&#34;fiftyTwoWeekLow&#34;:7.67,&#34;financialCurrency&#34;:&#34;USD&#34;,&#34;fiveYearAverageReturn&#34;:null,&#34;fiveYearAvgDividendYield&#34;:null,&#34;floatShares&#34;:43565801,&#34;forwardEps&#34;:-0.97,&#34;forwardPE&#34;:-25.29897,&#34;freeCashflow&#34;:-76240872,&#34;fromCurrency&#34;:null,&#34;fullTimeEmployees&#34;:579,&#34;fundFamily&#34;:null,&#34;fundInceptionDate&#34;:null,&#34;gmtOffSetMilliseconds&#34;:&#34;-14400000&#34;,&#34;grossMargins&#34;:0.44973,&#34;grossProfits&#34;:72018000,&#34;heldPercentInsiders&#34;:0.52866,&#34;heldPercentInstitutions&#34;:0.33176997,&#34;impliedSharesOutstanding&#34;:0,&#34;industry&#34;:&#34;Biotechnology&#34;,&#34;isEsgPopulated&#34;:false,&#34;lastCapGain&#34;:null,&#34;lastDividendDate&#34;:null,&#34;lastDividendValue&#34;:null,&#34;lastFiscalYearEnd&#34;:1648684800,&#34;lastMarket&#34;:null,&#34;lastSplitDate&#34;:null,&#34;lastSplitFactor&#34;:null,&#34;legalType&#34;:null,&#34;logo_url&#34;:&#34;https://logo.clearbit.com/myovant.com&#34;,&#34;longBusinessSummary&#34;:&#34;Myovant Sciences Ltd., a biopharmaceutical company, develops redefine care for women and for men. The company&#39;s lead product is relugolix, an oral, once-daily, small molecule that acts as a gonadotropin-releasing hormone receptor antagonist for the treatment of heavy menstrual bleeding related with uterine fibroids, endometriosis-associated pain, and advanced prostate cancer. It is also developing MVT-602, an oligopeptide kisspeptin agonist, which is in Phase II clinical trial for the treatment of female infertility as part of assisted reproduction. Myovant Sciences Ltd. has collaboration with Pfizer Inc. to develop and commercialize relugolix in oncology and women&#39;s health. The company was formerly known as Roivant Endocrinology Ltd. and changed its name to Myovant Sciences Ltd. in May 2016. The company was incorporated in 2016 and is based in London, the United Kingdom. Myovant Sciences Ltd. is a subsidiary of Sumitovant Biopharma Ltd.&#34;,&#34;longName&#34;:&#34;Myovant Sciences Ltd.&#34;,&#34;market&#34;:&#34;us_market&#34;,&#34;marketCap&#34;:2354078208,&#34;maxAge&#34;:1,&#34;maxSupply&#34;:null,&#34;messageBoardId&#34;:&#34;finmb_403430039&#34;,&#34;morningStarOverallRating&#34;:null,&#34;morningStarRiskRating&#34;:null,&#34;mostRecentQuarter&#34;:1656547200,&#34;navPrice&#34;:null,&#34;netIncomeToCommon&#34;:-165560000,&#34;nextFiscalYearEnd&#34;:1711843200,&#34;numberOfAnalystOpinions&#34;:3,&#34;open&#34;:24.26,&#34;openInterest&#34;:null,&#34;operatingCashflow&#34;:-231387008,&#34;operatingMargins&#34;:-0.45491,&#34;payoutRatio&#34;:0,&#34;pegRatio&#34;:null,&#34;phone&#34;:&#34;44 20 7400 3351&#34;,&#34;preMarketPrice&#34;:null,&#34;previousClose&#34;:24.31,&#34;priceHint&#34;:2,&#34;priceToBook&#34;:null,&#34;priceToSalesTrailing12Months&#34;:7.682998,&#34;profitMargins&#34;:-0.54034,&#34;quickRatio&#34;:1.71,&#34;quoteType&#34;:&#34;EQUITY&#34;,&#34;recommendationKey&#34;:&#34;strong_buy&#34;,&#34;recommendationMean&#34;:1.5,&#34;regularMarketDayHigh&#34;:24.755,&#34;regularMarketDayLow&#34;:24.27,&#34;regularMarketOpen&#34;:24.26,&#34;regularMarketPreviousClose&#34;:24.31,&#34;regularMarketPrice&#34;:24.54,&#34;regularMarketVolume&#34;:665300,&#34;returnOnAssets&#34;:-0.14667,&#34;returnOnEquity&#34;:null,&#34;revenueGrowth&#34;:1.837,&#34;revenuePerShare&#34;:3.263,&#34;revenueQuarterlyGrowth&#34;:null,&#34;sector&#34;:&#34;Healthcare&#34;,&#34;sharesOutstanding&#34;:95928200,&#34;sharesPercentSharesOut&#34;:0.038,&#34;sharesShort&#34;:3642652,&#34;sharesShortPreviousMonthDate&#34;:1661904000,&#34;sharesShortPriorMonth&#34;:3300387,&#34;shortName&#34;:&#34;Myovant Sciences Ltd.&#34;,&#34;shortPercentOfFloat&#34;:0.0797,&#34;shortRatio&#34;:4.7,&#34;startDate&#34;:null,&#34;strikePrice&#34;:null,&#34;symbol&#34;:&#34;MYOV&#34;,&#34;targetHighPrice&#34;:27,&#34;targetLowPrice&#34;:20,&#34;targetMeanPrice&#34;:23.33,&#34;targetMedianPrice&#34;:23,&#34;threeYearAverageReturn&#34;:null,&#34;toCurrency&#34;:null,&#34;totalAssets&#34;:null,&#34;totalCash&#34;:356751008,&#34;totalCashPerShare&#34;:3.719,&#34;totalDebt&#34;:367387008,&#34;totalRevenue&#34;:306400992,&#34;tradeable&#34;:false,&#34;trailingAnnualDividendRate&#34;:0,&#34;trailingAnnualDividendYield&#34;:0,&#34;trailingEps&#34;:-2.22,&#34;twoHundredDayAverage&#34;:14.30585,&#34;volume&#34;:665300,&#34;volume24Hr&#34;:null,&#34;volumeAllCurrencies&#34;:null,&#34;website&#34;:&#34;https://myovant.com&#34;,&#34;yield&#34;:null,&#34;ytdReturn&#34;:null,&#34;zip&#34;:&#34;SW1Y 4LB&#34;},&#34;message&#34;:&#34;Success&#34;,&#34;status&#34;:200} .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/python/api/2022/10/06/api-python.html",
            "relUrl": "/fastpages/python/api/2022/10/06/api-python.html",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post103": {
            "title": "AP Prep Multiple Choice",
            "content": ". Week 7 Questions/Concerns/Comments . These questions were helpful in developing my understanding of units 1.1 - 1.3 | I got them all correct, so I do not have any specific questions in regards to the quizzes | . For this question, I was able to recall that messages are broken up into packets from out tech talk. Each individual packet contains data that is transmitted. There is also metadata that is used for routing and reassembling the data once it is received - allowing the packets to be received in any order while being able to be reassembled correctly. . After answering this question, I grew an interest in regards to the topic of protocols and found that protocols are agreed-upon a specific sets of rules that identifies the behavior of a given system. Protocols can be utilized on the Internet, as it can enable devices from various companies use a standardized form of communication. . This problem was quite straightforward, I used prior knowledge that the Internet is an interconnected network of many different networks. The Internet allows access to the World Wide Web (information system). .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/college%20board/quiz/2022/10/04/MCQs.html",
            "relUrl": "/markdown/college%20board/quiz/2022/10/04/MCQs.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post104": {
            "title": "My Quiz",
            "content": "&lt;body&gt; &lt;/body&gt; .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/quiz/2022/09/30/stubbystubstub.html",
            "relUrl": "/fastpages/jupyter/quiz/2022/09/30/stubbystubstub.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post105": {
            "title": "Test",
            "content": "{ “cells”: [ { “cell_type”: “code”, “execution_count”: null, “metadata”: { “vscode”: { “languageId”: “javascript” } }, “outputs”: [], “source”: [ “console.log(&quot;Hello World&quot;)” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3”, “language”: “python”, “name”: “python3” }, “language_info”: { “name”: “python”, “version”: “3.10.6” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “82faa6d27c9a927522682e95cb30c684238aba2a31347a70411ee016fed8cfe5” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/09/26/test.ipynb",
            "relUrl": "/2022/09/26/test.ipynb",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post106": {
            "title": "Scrum Team",
            "content": "Scrum Master: Ethan Tran | DevOPs: Rohin Sood | Frontend Devs: Luna Iwazaki, Taiyo Iwazaki | Backend Dev: Parav Salaniwal | . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/scrum/2022/09/26/scrumteam.html",
            "relUrl": "/scrum/2022/09/26/scrumteam.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post107": {
            "title": "Java Script Table",
            "content": "",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/javascript/table/html/2022/09/25/javascript-table.html",
            "relUrl": "/fastpages/jupyter/javascript/table/html/2022/09/25/javascript-table.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post108": {
            "title": "Title",
            "content": "x = input() h = input() b = input() y = input() k = input() a = input() vertices = print(h + a , k) print(vertices) . 05.65685425 -5 None .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/09/25/ellipsecalc.html",
            "relUrl": "/2022/09/25/ellipsecalc.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post109": {
            "title": "Scrum Team Review (Python Web Server)",
            "content": "Rohin Sood . In-depth commentary regarding the process of running the local flask and fastpages servers | Detailed python explanation ie. going in-depth on the ports and changes | Completely demonstrates commits, syncs, and changes to each local server - as well as a permanent change to his fastpages website | . Grade &amp; Final Statement . Rohin, overall your video was detailed and was easy to follow along. Despite these successes, it was still well above the time limit of around 1 minute, for that I would have to give you a 2.6. . Taiyo Iwazaki . Nice editing of the video itself | Contains all of the necessary demonstrations ie. local servers &amp; committing to GitHub | Features the Human Day Notes | . Grade &amp; Final Statement . Taiyo, great job on the video, I appreciate the use of text labels and background music. Your project has all of the necessary components but it is quite long and is above the expected duration of 1 minute. Due to that, I would have to give you a 2.6. . Luna Iwazaki . Displays all of the processes | Straight to the point and easy to follow | Edits make the video asthetically pleasing | . Grade &amp; Final Statement . Luna, nice job! Your video is straight to the point as mentioned above, and you have all of the needed processes and changes working/running. For that, I would grade you a 2.7. . Parav Jaiswal . TBD .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/scrum/python%20web%20server/local/server/2022/09/22/scrumreviewwk4.html",
            "relUrl": "/fastpages/jupyter/scrum/python%20web%20server/local/server/2022/09/22/scrumreviewwk4.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post110": {
            "title": "Title",
            "content": "console.log(&quot;Hello World&quot;) . NameError Traceback (most recent call last) c: Users etran Documents GitHub fastpages_EthanT _notebooks 2022-09-21-js.ipynb Cell 1 in &lt;cell line: 1&gt;() -&gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/Documents/GitHub/fastpages_EthanT/_notebooks/2022-09-21-js.ipynb#W0sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; console.log(&#34;Hello World&#34;) NameError: name &#39;console&#39; is not defined .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/09/21/js.html",
            "relUrl": "/2022/09/21/js.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post111": {
            "title": "Human Day Notes",
            "content": "Basic Notes . Many college students across the nation report feelings of... . Stress | Anxiety | Loneliness | Overwhelming | . Key Takeaways/Insights . - You can control your happiness - Personal circumstances don’t matter that much - Real, hard work takes the moost effort - It takes daily effort and a lot of work to be happier - To help yourself, you must help others - Allow time for gratitude - Sleep - Exercise - Savor the good things in life - We are wealthy in time | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/human%20day/notes/2022/09/15/HumanDayNotes.html",
            "relUrl": "/fastpages/human%20day/notes/2022/09/15/HumanDayNotes.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post112": {
            "title": "App Story-Boarding/Planning",
            "content": "PBL Prototyping (planning, purpose, and function) . Link to my scrum-board | I want to make a personality quiz | The quiz will use a points system | The quiz will also store data so people can see previously recorded results | The actual “score” will not be displayed, rather the given personality | The personality will have to be calculated using the score | For theming, I want to make the quiz to determine whether someone is a “Early Bird” or a “Night Owl” | Similar to my fastpages, the colors will mostly consist of light blue and white | . PBL Code/Code/Coding (Use data abstraction, code management, etc.) . Through a simple onClick function, I am able to create buttons | The functions allow me to add points and switch pages for the given buttons | The points system uses variables (“a” &amp; “b”), “a” is for the Early Birds, while “b” is for the Night Owls. | I found that using the createRecord block, I can store data that is saved even after the application is closed. | Through the records, I can display past results and update the records in real-time (data abstraction). | . Note: I will need time to collect data to show for the demo of the application . PBL Test . Using a test-driven development (TDD), I have now been able to complete the first rendition of my app. | The application works as it should be and is ready to be demoed | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/storyboard/planning/applab/2022/09/09/App-Plan.html",
            "relUrl": "/markdown/storyboard/planning/applab/2022/09/09/App-Plan.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post113": {
            "title": "Testing dictionaries, lists, and iterations",
            "content": "print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Ethan Tran&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 15 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot; , &quot;Bash&quot; , &quot;C&quot; , &quot;R&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs, } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Ethan Tran &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 15 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 100.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;C&#39;, &#39;R&#39;] &lt;class &#39;list&#39;&gt; length 6 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Ethan Tran&#39;, &#39;age&#39;: 15, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;C&#39;, &#39;R&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Ethan Tran &lt;class &#39;str&#39;&gt; . Color = &quot;Red&quot; ; &quot;Blue&quot; ; &quot;Green&quot; ; &quot;Yellow&quot; ; &quot;Purple&quot; name = &quot;Ethan&quot; ; &quot;John&quot; ; &quot;Jane&quot; age = &quot;15&quot; ; &quot;17&quot; ; &quot;20&quot; print(&quot;/&quot; , Color) print(&quot;//&quot; , name) print(&quot;///&quot; , age) Person = { &quot;Color&quot;: Color, &quot;name&quot;: name, &quot;age&quot;: age } print(Person) . / Red // Ethan /// 15 {&#39;Color&#39;: &#39;Red&#39;, &#39;name&#39;: &#39;Ethan&#39;, &#39;age&#39;: &#39;15&#39;} .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/dictionary/dictionaries/lists/iterations/2022/09/03/test-lists.html",
            "relUrl": "/fastpages/jupyter/dictionary/dictionaries/lists/iterations/2022/09/03/test-lists.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post114": {
            "title": "Lists, Dictionaries, & Iterations",
            "content": "Lists, Dictionaries, &amp; Iterations (input) . Using a list, I can set-up the to-be list of vocabulary | The list goes up to 6 inputs thus, the range is equates to 6 | The &quot;Word&quot; and &quot;Definition&quot; are set as inputs that can be set by the user | The &quot;Vocabulary&quot; is the final product as a result of the user&#39;s inputs | Vocabulary = {} for i in range(6): Word = input(&quot; &quot;) Definition = input(&quot; &quot;) Vocabulary[Word] = Definition print(Vocabulary) . {&#39;Sequence&#39;: &#39;Two or more lines of code&#39;, &#39;Key&#39;: &#39;A mix of fields used to take and sort rows from a given criteria&#39;, &#39;Value&#39;: &#39;Representation of an entity that can be changed by a given program&#39;, &#39;Import&#39;: &#39;A command that is used to add additional functions that have been previously developed&#39;, &#39;If&#39;: &#39;A command that is used to determine whether a response is correct or incorrect based on previously set expressions/conditions&#39;, &#39;Expression&#39;: &#39;Used in an if statement to determine whether a given command is right or wrong&#39;} . Personalized InfoDB (for + while loops &amp; recursive function) . Set InfoDB as a list | Using the &quot;.append&quot; expression, I can personalize (add) to my lists | Set up the data structure of the lists | Print the data structure to prepare it before formatting | The &quot;for_loop&quot; takes the data from &quot;InfoDB&quot; until the list is empty | Using the &quot;while_loop,&quot; the function will count through the elements of the list from zero until the end | The &quot;recursive_loop&quot; will continue to run itself within the given &quot;if&quot; statement until the end of the program | InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;Ethan&quot;, &quot;LastName&quot;: &quot;Tran&quot;, &quot;Birth_Month&quot;: &quot;May&quot;, &quot;Sports&quot;: [&quot;Basketball&quot; , &quot;Track&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Sean&quot;, &quot;LastName&quot;: &quot;Tran&quot;, &quot;Birth_Month&quot;: &quot;December&quot;, &quot;Sports&quot; : [&quot;Basketball&quot; , &quot;Track&quot; , &quot;Volleyball&quot;] }) def print_data(person): print(&quot;Name &quot; + person[&quot;FirstName&quot;] + person[&quot;LastName&quot;]) print(person[&quot;Birth_Month&quot;] + person[&quot;Sports&quot;]) print(InfoDb) def for_loop(): for person in InfoDB: print_data(person) def while_loop(): i = 0 while i &lt; len(InfoDb): print_data(InfoDb[i]) i = i + 1 def recursive(index): if index &gt;= len(InfoDb): return print_data(InfoDB[index]) return recursive(index + 1) . [{&#39;FirstName&#39;: &#39;Ethan&#39;, &#39;LastName&#39;: &#39;Tran&#39;, &#39;Birth_Month&#39;: &#39;May&#39;, &#39;Sports&#39;: [&#39;Basketball&#39;, &#39;Track&#39;]}, {&#39;FirstName&#39;: &#39;Sean&#39;, &#39;LastName&#39;: &#39;Tran&#39;, &#39;Birth_Month&#39;: &#39;December&#39;, &#39;Sports&#39;: [&#39;Basketball&#39;, &#39;Track&#39;, &#39;Volleyball&#39;]}] . Quiz using lists, dictionaries, and iterations . Uses input to allow the questions to be answered | A questions dictionary and answers dictionary are each set | A while_loop allows data to be pulled from the dictionaries (named lists for the variables) until the number of questions and answers hit zero | import getpass, sys import random # Function to layout the questions and answers def ask_question (question, answer): # Allow answers to be typed in through input &amp; print the questions and answers print(question) ans = input(question) print(ans) # Print &quot;Correct!&quot;&quot; and add 1 point (through return) per correct answer if ans == answer: print(&quot;Correct!&quot;) return 1 # Print &quot;Wrong&quot; when an answer is incorrect and return 0 points else: print(&quot;Wrong&quot;) return 0 # A list of my questions and answers using the previously added &quot;ask_question&quot; function question_list = [&quot;Who was the first emperor of Imperial China?&quot; , &quot;What is 5 x 8?&quot; , &quot;How many states are there in the United States of America?&quot; , &quot;What command is used to include other functions that were previously developed?&quot; , &quot;What command is used to evaluate correct or incorrect response in this example?&quot; , &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot; , &quot;What iterates a sequence until the code is over?&quot; , &quot;What repeats a block of code as long as the expression remains true?&quot;] answer_list = [&quot;Qin&quot;, &quot;40&quot;, &quot;50&quot; , &quot;import&quot; , &quot;if&quot; , &quot;expression&quot; , &quot;for_loop&quot; , &quot;while_loop&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 6) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Congratulations!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Not bad, keep working! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Its okay, better luck next time!&quot;) .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/dictionary/dictionaries/lists/functions/for%20loop/while%20loop/recursive/2022/09/02/dictionary.html",
            "relUrl": "/fastpages/jupyter/dictionary/dictionaries/lists/functions/for%20loop/while%20loop/recursive/2022/09/02/dictionary.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post115": {
            "title": "Alumni Panel Takeaways",
            "content": "Enjoyed doing CS to numerous algorithms and code. . | Set a foundation and solidified a basic understanding of CS . | Set up the course of what they wanted to do in the future. . | . Why CS classes (AP CSP, CSA, etc.) were helpful… . Taking classes such as Intro to CS and CSP helped with web design and understanding interactions, UI, interface, etc. . | AP CSA helped build skills to help with real-world problems. . Ex. COVID-19 database project. . | . | . Challenges (at the start and even after highschool)… . Starting out and trying to maintain motivation - projects and understanding certain concepts can be quite frustrating for many people. . | Dealing with egos, people trying to flex their achievements - . Trying to focus on yourself and working on our own learning curve. . | . | . Learning CS theory, structures that were not thought about before . College courses are typically structured differently than high school classes. . | . | . Persevering through the problems and hardship - finding solutions. . | Making sure to not cut corners (don’t take the easy ways out)! . | Trying to go above and beyond the standard . | Adjusting to the way tests are done and how they are not always structured in a way that is totally straight-forward. . | . Project based learning (PBLs)… . PBLs and tests are typically similar/the same. Though, PBLs are largely embedded in CS as a whole, rather than just theory. . | Group studying helps with understanding concepts especially during project based learning . Don’t be scared to ask questions. . | . | . Applying CS in non-CS majors:… . Writing scripts to make life easier (ie. programming converters for documents) . | Programming stress tests, manipulating certain code from class to help them work better, or 3D printing are things that use CS. . | Problem solving skills developed during CS courses help you to learn other concepts such as mathematics. . | Majors like statistics and cognitive science are not technically CS majors, but prior programming knowledge can be helpful. . | . Jobs/internships with a professor or teacher… . Stand out to teachers, interact with them, go above and beyond, . | Submit resumes. . | Work close to what you want to specialize in. . | Work on personal projects to show that you know what you’re doing (even 2-3 projects is sufficient) . This shows a company/interviewer that you are knowledgeable in the field of computer science. . | Sorting algorithms and path finding are some examples of things one can program. . | . | Have a resume and know when to apply for said internships/jobs . Many companies try to hire a year before, at the beginning of the school year (early September - mid November) . | Apply ahead and have a resume done by that time . | Have a LinkedIn profile . | . | Build a network of people you know and reach out - add people on LinkedIn. . This helps with referrals and overall networking . | . | . Insight/takeaways… . What I noticed nearly all of the alumni talk about is perseverance through the tough errors and to stand out by going above and beyond in and out of class. Furthermore, I see that there are many uses of computer science outside of the typical CS field. For example, one can make a quick file converter to help convert files for class, which is a great example of an everyday use of computer science. In regards to jobs and internships, I noticed that most of the alumni said to work on personal projects and sign-up early for such opportunities. To add, some of the speakers noted that resumes and a LinkedIn account are also beneficial for the field CS and working as a whole. Specifically, a LinkedIn account is important because it helps you network and connect with people in the field, and these people can in turn - submit referrals or send links to internships or job opportunities. Many of these notes I know are very useful, due to the fact that they have helped my brother Sean, who is also an alumni of our school and was in the same classes as many of the alumni who presented today. All of the topics and subjects presented during this panel were very helpful, and I will use this knowledge to help myself in the future as I pursue the field of computer science. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/08/29/Alumni-Panel-Takeaways.html",
            "relUrl": "/2022/08/29/Alumni-Panel-Takeaways.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post116": {
            "title": "Principles And Elements Of Design",
            "content": "Ethan Tran . Mrs. Philyaw . Honors Humanities #1 . 19 August 2022 . Principles and Elements of Design . Elements of Design . Elements of design are structural parts of a work of art, which must be used according to principles of design in order to produce satisfactory work. Design is a structure of art with the elements and principles unifying the different parts and giving the work visual order. The elements and principles are always used in combination and therefore work together to create a work of art with good design. . SPACE: is absolutely necessary to all works of art because other elements are composed and developed within it. It can extend in either two (2-D) or three (3-D) dimensions. Space has no meaning until its limits are determined and its existence used. . FORMAT: once an artist has determined the size and shape of the area in which a work of art will be created, that area is referred to as the format. . POSITIVE SPACE: the interior area of a shape, object, or form. . NEGATIVE SPACE: the area exterior to, surrounding, or between shapes, objects, or forms. . LINE: is a basic structural element of art; all works of art have linear aspects. Paul Klee said, “A line is a dot going for a walk.” Lines may express response or excitement, strength or weakness, or other conditions. Lines have five characteristics: . LENGTH: short, long, continuous. . | WIDTH: thick, thin, carrying . | ATTITUDE: vertical, horizontal, diagonal . | CURVATURE: straight, shallow, tight . | TEXTURE: hard, soft, vibrant . | SHAPE: the shape is produced by a continuous line connecting with itself; is usually regarded as a two-dimensional flat object. . FORM: usually regarded as three-dimensional objects or a shape that has the appearance of depth. . MASS: Bulk, weight, and density of three-dimensional forms, either actual or implied. . VOLUME: Any three-dimensional quantity that is bound or enclosed, whether solid or void. . COLOR: is a quality of visual sensation usually evoked by light stimulating the cones of the retina of the eye. Color has four qualities: . HUE: the generic name of a color, such as red, yellow, etc. . | INTENSITY: the brightness or dullness of a color. . | VALUE: the lightness or darkness of a color. Helps us understand two-dimensional art . | TEMPERATURE: the warm or cool quality in the appearance of a color, for example orange is a warm color, and green is a cool color. . | TEXTURE: denotes the surface tactile qualities, usually described as being rough, smooth, coarse or fine, shiny or dull. The texture is understood through the sense of light. . TRUE (actual) TEXTURE: occurs when the surface feels as it appears. Easily found in nature. . FALSE (implied) TEXTURE: occurs when the actual surface appears to be a texture other than what it is; usually found in works of art. . Principles of Design . A principle is a rule to be followed in creating a design or composition. Design in the structure of art, with the elements and principles unifying the different parts and giving the work visual order. The elements and principles are always used in combination and therefore work together to create a work of art with good design. . BALANCE: equality of visual weight achieved through the use of one or more elements or design. . SYMMETRICAL (formal) BALANCE: occurs when the elements on one side of the center are identical (but mirrored) to those of the other side. . | Asymmetrical (informal) BALANCE: occurs when the elements on one side of the center are not identical to those on the other, yet appear visually equal. . | RADIAL BALANCE: is similar to formal balance, but based on a circle with the center focal point. . | . UNITY: harmonious relationship of parts creating a single main idea, emotion, or point of view; obtained by relating elements of design to each other. . REPETITION: unity is obtained by repeating specific elements of design to produce patterns and rhythms. . | PROGRESSION (movement): elements that cause the eye to move through a composition. . | . PATTERN: pattern uses the art elements in planned or random repetitions to enhance surfaces of paintings or sculptures. Patterns often occur in nature, and artists use similar repeated motifs to create patterns in their work. Pattern increases visual excitement by enriching the surface interest. . . MOVEMENT: Artists to direct viewers through their work, often to focal areas, use visual movement. Such movement can be directed along lines, edges, shapes, and colors within works, but moves the eye most easily on the paths of equal value. . &lt;- Ex: bc lines are used to replicate movement when not moving . EMPHASIS: that part of a composition that is most important presents the main idea of the work of art. . DOMINANCE: provides a center of interest, attracts attention, or makes one part of the composition appear most important. . | . DOMINANT: the most prominent principle of the most obvious in the influence of position. . | THEME &amp; VARIATION: an idea or dominant feature that gives the artwork its character; the subject of a work of art, sometimes with a number of phases or different examples. . | SUBORDINATION (sub-dominance): those elements that are less dominating but provide interest and background into the composition. . | REST AREAS: those places within a composition that are relatively vacant, often regarded as negative shapes or spaces. . | . RHYTHM: visual movement achieved as the viewer’s eyes progress throughout a composition, moving and resting in regular or varied measures. . REPETITION: of colors, shapes, textures, lines, etc. . | . HARMONY: the appearance of visual order obtained by relating elements of design to each other to create a sense of unity. . APPROPRIATENESS: suitability of fitness of an idea, theme motif, or purpose to elements, media, or materials used in the creation of a work of art. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/08/28/Principles-and-Elements-of-Design.html",
            "relUrl": "/2022/08/28/Principles-and-Elements-of-Design.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post117": {
            "title": "Ap Csp Notes",
            "content": "2 or more lines of code = sequence . | print(“) = a cmd or function . | Import lets you import alr made code . | Each if contains an “else” statement as well . | HACKS: Add a “yes” &amp; “no” . | add google doc to notebook in vs code as a “.docx” file! . | Organize blog by category (classes) . | Blog about or different classes . | “Frontmatter” allows the posts/notebooks to show up on our blog . | Key (know it!) . | Value (know it!) . | Mimic frontmatter in pages . | _pages is where to put a menu . | site.base.url tells system the “base” of ur “url” . | For quiz make function for each question and randomize them . | Git Pull goes to SSD . | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/08/28/AP-CSP-Notes.html",
            "relUrl": "/2022/08/28/AP-CSP-Notes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post118": {
            "title": "Honors Humanities Notes",
            "content": "Elements of design . are structural parts of a work of art, which must be used according to principles of design in order to produce satisfactory work. Design is a structure of art with the elements and principles unifying the different parts and giving the work visual order. The elements and principles are always used in combination and therefore work together to create a work of art with good design. . SPACE: . is absolutely necessary to all works of art because other elements are composed and developed within it. It can extend in either two (2-D) or three (3-D) dimensions. Space has no meaning until its limits are determined and its existence used. . FORMAT: . once an artist has determined the size and shape of the area in which a work of art will be created, that area is referred to as the format. . POSITIVE SPACE: . the interior area of a shape, object, or form. . NEGATIVE SPACE: . the area exterior to, surrounding, or between shapes, objects, or forms. . LINE: . is a basic structural element of art; all works of art have linear aspects. Paul Klee said, “A line is a dot going for a walk.” Lines may express response or excitement, strength or weakness, or other conditions. Lines have five characteristics: . LENGTH: . short, long, continuous. . WIDTH: . thick, thin, carrying . ATTITUDE: . vertical, horizontal, diagonal . CURVATURE: . straight, shallow, tight . TEXTURE: . hard, soft, vibrant . SHAPE: . the shape is produced by a continuous line connecting with itself; is usually regarded as a two-dimensional flat object. . FORM: . usually regarded as three-dimensional objects or a shape that has the appearance of depth. . MASS: . Bulk, weight, and density of three-dimensional forms, either actual or implied. . VOLUME: . Any three-dimensional quantity that is bound or enclosed, whether solid or void. . COLOR: . is a quality of visual sensation usually evoked by light stimulating the cones of the retina of the eye. Color has four qualities: . HUE: . the generic name of a color, such as red, yellow, etc. . INTENSITY: . the brightness or dullness of a color. . VALUE: . the lightness or darkness of a color. Helps us understand two-dimensional art . TEMPERATURE: . the warm or cool quality in the appearance of a color, for example orange is a warm color, and green is a cool color. . TEXTURE: . denotes the surface tactile qualities, usually described as being rough, smooth, coarse or fine, shiny or dull. The texture is understood through the sense of light. . TRUE (actual) TEXTURE: . occurs when the surface feels as it appears. Easily found in nature. . FALSE (implied) TEXTURE: . occurs when the actual surface appears to be a texture other than what it is; usually found in works of art. . Principles of Design . A principle is a rule to be followed in creating a design or composition. Design in the structure of art, with the elements and principles unifying the different parts and giving the work visual order. The elements and principles are always used in combination and therefore work together to create a work of art with good design. . BALANCE: . equality of visual weight achieved through the use of one or more elements or design. . SYMMETRICAL: . (formal) BALANCE: occurs when the elements on one side of the center are identical (but mirrored) to those of the other side. . Asymmetrical: . (informal) BALANCE: occurs when the elements on one side of the center are not identical to those on the other, yet appear visually equal. . RADIAL BALANCE: . is similar to formal balance, but based on a circle with the center focal point. . UNITY: . harmonious relationship of parts creating a single main idea, emotion, or point of view; obtained by relating elements of design to each other. . REPETITION: . unity is obtained by repeating specific elements of design to produce patterns and rhythms. . PROGRESSION . (movement): elements that cause the eye to move through a composition. . PATTERN: . pattern uses the art elements in planned or random repetitions to enhance surfaces of paintings or sculptures. Patterns often occur in nature, and artists use similar repeated motifs to create patterns in their work. Pattern increases visual excitement by enriching the surface interest. . MOVEMENT: . Artists to direct viewers through their work, often to focal areas, use visual movement. Such movement can be directed along lines, edges, shapes, and colors within works, but moves the eye most easily on the paths of equal value. . Ex: bc lines are used to replicate movement when not moving | . EMPHASIS: . that part of a composition that is most important presents the main idea of the work of art. . DOMINANCE: . provides a center of interest, attracts attention, or makes one part of the composition appear most important. . DOMINANT: . the most prominent principle of the most obvious in the influence of position. . THEME &amp; VARIATION: . an idea or dominant feature that gives the artwork its character; the subject of a work of art, sometimes with a number of phases or different examples. . SUBORDINATION: . (sub-dominance): those elements that are less dominating but provide interest and background into the composition. . REST AREAS: . those places within a composition that are relatively vacant, often regarded as negative shapes or spaces. . RHYTHM: . visual movement achieved as the viewer’s eyes progress throughout a composition, moving and resting in regular or varied measures. . REPETITION: . of colors, shapes, textures, lines, etc. . HARMONY: . the appearance of visual order obtained by relating elements of design to each other to create a sense of unity. . APPROPRIATENESS: . suitability of fitness of an idea, theme motif, or purpose to elements, media, or materials used in the creation of a work of art. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/2022/08/27/HonHum.html",
            "relUrl": "/markdown/2022/08/27/HonHum.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post119": {
            "title": "AP Biology Notes",
            "content": "AP Biology . Chapter and Section . Evolution Figures #1 (7.1) . Evolution . A pattern and process | Evolution is NOT goal oriented | Individual organisms do not evolve. Populations evolve | Hardy Weinberg Equilibrium allows us to mathematically calculate allele frequency | Evolution is pressured and driven by environment | . Variation . Traits are heritable | Some organisms (i.e. spores &amp; humans) overproduce purposely | Overproduction is done as when there are low-resources, not all offspring survive - overproduction ensures that at least some organisms survive. | Three types of selection 1) Directionaly 2) Stationary 3) Disruptive | . Microevolution . Evolution of a group or species occurring over a small period of time | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/2022/08/27/APBio.html",
            "relUrl": "/markdown/2022/08/27/APBio.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post120": {
            "title": "My Quiz",
            "content": "import getpass, sys import random # Function to layout the questions and answers def ask_question (question, answer): # Allow answers to be typed in through input &amp; print the questions and answers print(question) ans = input(question) print(ans) # Print &quot;Correct!&quot;&quot; and add 1 point (through return) per correct answer if ans == answer: print(&quot;Correct!&quot;) return 1 # Print &quot;Wrong&quot; when an answer is incorrect and return 0 points else: print(&quot;Wrong&quot;) return 0 # A list of my questions and answers using the previously added &quot;ask_question&quot; function question_list = [&quot;Who was the first emperor of Imperial China?&quot; , &quot;What is 5 x 8?&quot; , &quot;How many states are there in the United States of America?&quot; , &quot;What command is used to include other functions that were previously developed?&quot; , &quot;What command is used to evaluate correct or incorrect response in this example?&quot; , &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;] answer_list = [&quot;Qin&quot;, &quot;40&quot;, &quot;50&quot; , &quot;import&quot; , &quot;if&quot; , &quot;expression&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 6) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Congratulations!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Not bad, keep working! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Its okay, better luck next time!&quot;) . What command is used to evaluate correct or incorrect response in this example? Wrong Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? Wrong What is 5 x 8? Wrong Who was the first emperor of Imperial China? Wrong What command is used to include other functions that were previously developed? Wrong How many states are there in the United States of America? Wrong 0.00% Your total score is: 0 out of 6. Its okay, better luck next time! .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/quiz/2022/08/26/quiz.html",
            "relUrl": "/fastpages/jupyter/quiz/2022/08/26/quiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post121": {
            "title": "First Markdown Post",
            "content": "Why Computer Science classes were enjoyable… . Enjoyed doing CS to numerous algorithms and code. | Set a foundation and solidified a basic understanding of CS | Set up the course of what they wanted to do in the future. Why CS classes (AP CSP, CSA, etc.) were helpful… . | Taking classes such as Intro to CS and CSP helped with web design and understanding interactions, UI, interface, etc. | AP CSA helped build skills to help with real-world problems. Ex. COVID-19 database project. Challenges (at the start and even after highschool)… . | Starting out and trying to maintain motivation - projects and understanding certain concepts can be quite frustrating for many people. | Dealing with egos, people trying to flex their achievements - | Trying to focus on yourself and working on our own learning curve. | Learning CS theory, structures that were not thought about before | College courses are typically structured differently than high school classes. | Persevering through the problems and hardship - finding solutions. | Making sure to not cut corners (don’t take the easy ways out)! | Trying to go above and beyond the standard Adjusting to the way tests are done and how they are not always structured in a way that is totally straight-forward. Project based learning (PBLs)… . | PBLs and tests are typically similar/the same. Though, PBLs are largely embedded in CS as a whole, rather than just theory. | Group studying helps with understanding concepts especially during project based learning | Don’t be scared to ask questions. Applying CS in non-CS majors:… . Writing scripts to make life easier (ie. programming converters for documents) Programming stress tests, manipulating certain code from class to help them work better, or 3D printing are things that use CS. Problem solving skills developed during CS courses help you to learn other concepts such as mathematics. Majors like statistics and cognitive science are not technically CS majors, but prior programming knowledge can be helpful. . Jobs/internships with a professor or teacher… . | Stand out to teachers, interact with them, go above and beyond, | Submit resumes. | Work close to what you want to specialize in. | Work on personal projects to show that you know what you’re doing (even 2-3 projects is sufficient) | This shows a company/interviewer that you are knowledgeable in the field of computer science. | Sorting algorithms and path finding are some examples of things one can program. | Have a resume and know when to apply for said internships/jobs | Many companies try to hire a year before, at the beginning of the school year (early September - mid November) | Apply ahead and have a resume done by that time | Have a LinkedIn profile | Build a network of people you know and reach out - add people on LinkedIn. | This helps with referrals and overall networking | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/2022/08/26/APCSP.html",
            "relUrl": "/markdown/2022/08/26/APCSP.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post122": {
            "title": "Installation Checks (Bash)",
            "content": "Check for the necessary AP CSP tools (ie. JavaScript, Python3, and Bash) . python2 --version python3 --version . Python 2.7.18 Python 3.8.10 . conda activate jupyter --version jupyter kernelspec list conda list conda deactivate . (base) Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 (base) Available kernels: javascript /root/.local/share/jupyter/kernels/javascript python3 /root/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash (base) # packages in environment at /root/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.14.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 (base) . View Each fastpages post . echo &quot;Search for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # Posts within fastpages pwd # present working directory ls -l # lists all posts on fastpages . Search for posts bash: cd: /_posts: No such file or directory /mnt/c/Users/etran/OneDrive/Documents/GitHub/fastpages_EthanT/_notebooks total 3112 -rwxrwxrwx 1 root root 3162470 Aug 19 18:35 2020-02-20-test -rwxrwxrwx 1 root root 2866 Aug 27 18:00 2022-08-19-first-notebook.ipynb -rwxrwxrwx 1 root root 784 Aug 27 18:00 2022-08-20-READ-ME.md -rwxrwxrwx 1 root root 2192 Aug 28 19:08 2022-08-25-bash.ipynb -rwxrwxrwx 1 root root 4152 Aug 28 18:50 2022-08-26-quiz.ipynb drwxrwxrwx 1 root root 4096 Aug 19 18:31 ghtop_images drwxrwxrwx 1 root root 4096 Aug 19 18:31 my_icons .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/bash/installation/checks/2022/08/25/bash.html",
            "relUrl": "/fastpages/jupyter/bash/installation/checks/2022/08/25/bash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post123": {
            "title": "First Markdown Post",
            "content": "Hello, my name is Ethan Tran and this is my first markdown post. . . About Me Click this! ↑ . . Closing statement . I hope to improve my skills with Python and get adjusted to IDEs such as Visual Studio. Cheers! .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/2022/08/19/first-post.html",
            "relUrl": "/markdown/2022/08/19/first-post.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post124": {
            "title": "Ethan's First Notebook",
            "content": "Printing &quot;Hello&quot; . print(&quot;Hello&quot;) . Hello . Time value of money after one year calculator! . With this calculator that I made, you can insert any initial amount of money and any interest rate. In this demo, I started with $1000 and used an interest rate of 0.1563. . print(&quot;Lets calculate your time value of money after one year!&quot;) print(&quot;How much money are you investing?&quot;) # Input the initial amount of money Money = float(input(&quot;Amount of money: &quot;)) print(&quot;$&quot; + &quot;{:.2f}&quot;.format(Money)) # Input interest rate print(&quot;What is the interest rate of your investment?&quot;) r = float(input(&quot;Interest rate: &quot;)) percent = (r * 100) # Interest rate shown as a percentage print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Calculation of the final amount of money final_amount = (Money * (1 + r)) print(&#39;This will be your amount of money after one year.&#39;) print(&quot;$&quot; + &quot;{:.2f}&quot;.format(final_amount)) . Lets calculate your time value of money after one year! How much money are you investing? $50.00 What is the interest rate of your investment? 15.00% This will be your amount of money after one year. $57.50 .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/first/2022/08/19/first-notebook.html",
            "relUrl": "/fastpages/jupyter/first/2022/08/19/first-notebook.html",
            "date": " • Aug 19, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Work in progress… .",
          "url": "https://muddydog25.github.io/fastpages_EthanT/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Class Notes",
          "content": "My Classes . AP Biology | . Honors Humanities | &lt;/td&gt; &lt;/tr&gt; AP Computer Science Principles | &lt;/td&gt;",
          "url": "https://muddydog25.github.io/fastpages_EthanT/classes/",
          "relUrl": "/classes/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Vocabulary",
          "content": "Word Definition . Sequence | Two or more lines of code | . Key | A mix of fields used to take and sort rows from a given criteria | . Value | Representation of an entity that can be changed by a given program | . Import | A command that is used to add additional functions that have been previously developed | . If | A command that is used to determine whether a response is correct or incorrect based on previously set expressions/conditions | . Expression | Used in an if statement to determine whether a given command is right or wrong | .",
          "url": "https://muddydog25.github.io/fastpages_EthanT/vocabulary/",
          "relUrl": "/vocabulary/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Periods",
          "content": "Source of the key/value: &quot;class_periods&quot; in &quot;_config.yml&quot; . Period Class . 0 | N/A | . 1 | AP Biology | . 2 | Honors Humanities | . 3 | Spanish | . 4 | AP CSP | . 5 | Math | .",
          "url": "https://muddydog25.github.io/fastpages_EthanT/class-periods/",
          "relUrl": "/class-periods/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "JavaScript",
          "content": "JavaScript Jupyter Notebook | JavaScript Post | .",
          "url": "https://muddydog25.github.io/fastpages_EthanT/javascript/",
          "relUrl": "/javascript/",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "JavaScript",
          "content": "",
          "url": "https://muddydog25.github.io/fastpages_EthanT/javascript/",
          "relUrl": "/javascript/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  

  

  

  

  

  
  

  
      ,"page24": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://muddydog25.github.io/fastpages_EthanT/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}