{
  
    
        "post0": {
            "title": "Title",
            "content": "Dictionary data set using &quot;input&quot; . Vocabulary = [] for i in range(6): Word = input(&quot; &quot;) Definition = input(&quot; &quot;) Vocabulary[Word] = Definition print(Vocabulary) . {&#39;Sequence&#39;: &#39;Two or more lines of code&#39;, &#39;&#39;: &#39;&#39;} . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Ethan&quot;, &quot;LastName&quot;: &quot;Tran&quot;, &quot;Birth_Month&quot;: &quot;May&quot;, &quot;Sports&quot;: [&quot;Basketball&quot; , &quot;Track&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sean&quot;, &quot;LastName&quot;: &quot;Tran&quot;, &quot;Birth_Month&quot;: &quot;December&quot;, &quot;Sports&quot; : [&quot;Basketball&quot; , &quot;Track&quot; , &quot;Volleyball&quot;] }) # Print the data structure def print_data(person): print(&quot;Name &quot; + person[&quot;FirstName&quot;] + person[&quot;LastName&quot;]) print(person[&quot;Birth_Month&quot;] + person[&quot;Sports&quot;]) print(InfoDb) def for_loop(): for person in InfoDB: print_data(person) def while_loop(): i = 0 while i &lt; len(InfoDb): print_data(InfoDb[i]) i = i + 1 def recursive(index): if index &gt;= len(InfoDb): return print_data(InfoDB[index]) return recursive(index + 1) . [{&#39;FirstName&#39;: &#39;Ethan&#39;, &#39;LastName&#39;: &#39;Tran&#39;, &#39;Birth_Month&#39;: &#39;May&#39;, &#39;Sports&#39;: [&#39;Basketball&#39;, &#39;Track&#39;]}, {&#39;FirstName&#39;: &#39;Sean&#39;, &#39;LastName&#39;: &#39;Tran&#39;, &#39;Birth_Month&#39;: &#39;December&#39;, &#39;Sports&#39;: [&#39;Basketball&#39;, &#39;Track&#39;, &#39;Volleyball&#39;]}] .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/09/02/dictionary.html",
            "relUrl": "/2022/09/02/dictionary.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Ethan Tran&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 15 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot; , &quot;Bash&quot; , &quot;C&quot; , &quot;R&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs, } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Ethan Tran &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 15 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 100.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;C&#39;, &#39;R&#39;] &lt;class &#39;list&#39;&gt; length 6 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Ethan Tran&#39;, &#39;age&#39;: 15, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;C&#39;, &#39;R&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Ethan Tran &lt;class &#39;str&#39;&gt; . Color = &quot;Red&quot; ; &quot;Blue&quot; ; &quot;Green&quot; ; &quot;Yellow&quot; ; &quot;Purple&quot; name = &quot;Ethan&quot; ; &quot;John&quot; ; &quot;Jane&quot; age = &quot;15&quot; ; &quot;17&quot; ; &quot;20&quot; print(&quot;/&quot; , Color) print(&quot;//&quot; , name) print(&quot;///&quot; , age) Person = { &quot;Color&quot;: Color, &quot;name&quot;: name, &quot;age&quot;: age } print(Person) . / Red // Ethan /// 15 {&#39;Color&#39;: &#39;Red&#39;, &#39;name&#39;: &#39;Ethan&#39;, &#39;age&#39;: &#39;15&#39;} .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/09/02/dictionaries-lists.html",
            "relUrl": "/2022/09/02/dictionaries-lists.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Alumni Panel Takeaways",
            "content": "Enjoyed doing CS to numerous algorithms and code. . | Set a foundation and solidified a basic understanding of CS . | Set up the course of what they wanted to do in the future. . | . Why CS classes (AP CSP, CSA, etc.) were helpful… . Taking classes such as Intro to CS and CSP helped with web design and understanding interactions, UI, interface, etc. . | AP CSA helped build skills to help with real-world problems. . Ex. COVID-19 database project. . | . | . Challenges (at the start and even after highschool)… . Starting out and trying to maintain motivation - projects and understanding certain concepts can be quite frustrating for many people. . | Dealing with egos, people trying to flex their achievements - . Trying to focus on yourself and working on our own learning curve. . | . | . Learning CS theory, structures that were not thought about before . College courses are typically structured differently than high school classes. . | . | . Persevering through the problems and hardship - finding solutions. . | Making sure to not cut corners (don’t take the easy ways out)! . | Trying to go above and beyond the standard . | Adjusting to the way tests are done and how they are not always structured in a way that is totally straight-forward. . | . Project based learning (PBLs)… . PBLs and tests are typically similar/the same. Though, PBLs are largely embedded in CS as a whole, rather than just theory. . | Group studying helps with understanding concepts especially during project based learning . Don’t be scared to ask questions. . | . | . Applying CS in non-CS majors:… . Writing scripts to make life easier (ie. programming converters for documents) . | Programming stress tests, manipulating certain code from class to help them work better, or 3D printing are things that use CS. . | Problem solving skills developed during CS courses help you to learn other concepts such as mathematics. . | Majors like statistics and cognitive science are not technically CS majors, but prior programming knowledge can be helpful. . | . Jobs/internships with a professor or teacher… . Stand out to teachers, interact with them, go above and beyond, . | Submit resumes. . | Work close to what you want to specialize in. . | Work on personal projects to show that you know what you’re doing (even 2-3 projects is sufficient) . This shows a company/interviewer that you are knowledgeable in the field of computer science. . | Sorting algorithms and path finding are some examples of things one can program. . | . | Have a resume and know when to apply for said internships/jobs . Many companies try to hire a year before, at the beginning of the school year (early September - mid November) . | Apply ahead and have a resume done by that time . | Have a LinkedIn profile . | . | Build a network of people you know and reach out - add people on LinkedIn. . This helps with referrals and overall networking . | . | . Insight/takeaways… . What I noticed nearly all of the alumni talk about is perseverance through the tough errors and to stand out by going above and beyond in and out of class. Furthermore, I see that there are many uses of computer science outside of the typical CS field. For example, one can make a quick file converter to help convert files for class, which is a great example of an everyday use of computer science. In regards to jobs and internships, I noticed that most of the alumni said to work on personal projects and sign-up early for such opportunities. To add, some of the speakers noted that resumes and a LinkedIn account are also beneficial for the field CS and working as a whole. Specifically, a LinkedIn account is important because it helps you network and connect with people in the field, and these people can in turn - submit referrals or send links to internships or job opportunities. Many of these notes I know are very useful, due to the fact that they have helped my brother Sean, who is also an alumni of our school and was in the same classes as many of the alumni who presented today. All of the topics and subjects presented during this panel were very helpful, and I will use this knowledge to help myself in the future as I pursue the field of computer science. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/08/29/Alumni-Panel-Takeaways.html",
            "relUrl": "/2022/08/29/Alumni-Panel-Takeaways.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Principles And Elements Of Design",
            "content": "Ethan Tran . Mrs. Philyaw . Honors Humanities #1 . 19 August 2022 . Principles and Elements of Design . Elements of Design . Elements of design are structural parts of a work of art, which must be used according to principles of design in order to produce satisfactory work. Design is a structure of art with the elements and principles unifying the different parts and giving the work visual order. The elements and principles are always used in combination and therefore work together to create a work of art with good design. . SPACE: is absolutely necessary to all works of art because other elements are composed and developed within it. It can extend in either two (2-D) or three (3-D) dimensions. Space has no meaning until its limits are determined and its existence used. . FORMAT: once an artist has determined the size and shape of the area in which a work of art will be created, that area is referred to as the format. . POSITIVE SPACE: the interior area of a shape, object, or form. . NEGATIVE SPACE: the area exterior to, surrounding, or between shapes, objects, or forms. . LINE: is a basic structural element of art; all works of art have linear aspects. Paul Klee said, “A line is a dot going for a walk.” Lines may express response or excitement, strength or weakness, or other conditions. Lines have five characteristics: . LENGTH: short, long, continuous. . | WIDTH: thick, thin, carrying . | ATTITUDE: vertical, horizontal, diagonal . | CURVATURE: straight, shallow, tight . | TEXTURE: hard, soft, vibrant . | SHAPE: the shape is produced by a continuous line connecting with itself; is usually regarded as a two-dimensional flat object. . FORM: usually regarded as three-dimensional objects or a shape that has the appearance of depth. . MASS: Bulk, weight, and density of three-dimensional forms, either actual or implied. . VOLUME: Any three-dimensional quantity that is bound or enclosed, whether solid or void. . COLOR: is a quality of visual sensation usually evoked by light stimulating the cones of the retina of the eye. Color has four qualities: . HUE: the generic name of a color, such as red, yellow, etc. . | INTENSITY: the brightness or dullness of a color. . | VALUE: the lightness or darkness of a color. Helps us understand two-dimensional art . | TEMPERATURE: the warm or cool quality in the appearance of a color, for example orange is a warm color, and green is a cool color. . | TEXTURE: denotes the surface tactile qualities, usually described as being rough, smooth, coarse or fine, shiny or dull. The texture is understood through the sense of light. . TRUE (actual) TEXTURE: occurs when the surface feels as it appears. Easily found in nature. . FALSE (implied) TEXTURE: occurs when the actual surface appears to be a texture other than what it is; usually found in works of art. . Principles of Design . A principle is a rule to be followed in creating a design or composition. Design in the structure of art, with the elements and principles unifying the different parts and giving the work visual order. The elements and principles are always used in combination and therefore work together to create a work of art with good design. . BALANCE: equality of visual weight achieved through the use of one or more elements or design. . SYMMETRICAL (formal) BALANCE: occurs when the elements on one side of the center are identical (but mirrored) to those of the other side. . | Asymmetrical (informal) BALANCE: occurs when the elements on one side of the center are not identical to those on the other, yet appear visually equal. . | RADIAL BALANCE: is similar to formal balance, but based on a circle with the center focal point. . | . UNITY: harmonious relationship of parts creating a single main idea, emotion, or point of view; obtained by relating elements of design to each other. . REPETITION: unity is obtained by repeating specific elements of design to produce patterns and rhythms. . | PROGRESSION (movement): elements that cause the eye to move through a composition. . | . PATTERN: pattern uses the art elements in planned or random repetitions to enhance surfaces of paintings or sculptures. Patterns often occur in nature, and artists use similar repeated motifs to create patterns in their work. Pattern increases visual excitement by enriching the surface interest. . . MOVEMENT: Artists to direct viewers through their work, often to focal areas, use visual movement. Such movement can be directed along lines, edges, shapes, and colors within works, but moves the eye most easily on the paths of equal value. . &lt;- Ex: bc lines are used to replicate movement when not moving . EMPHASIS: that part of a composition that is most important presents the main idea of the work of art. . DOMINANCE: provides a center of interest, attracts attention, or makes one part of the composition appear most important. . | . DOMINANT: the most prominent principle of the most obvious in the influence of position. . | THEME &amp; VARIATION: an idea or dominant feature that gives the artwork its character; the subject of a work of art, sometimes with a number of phases or different examples. . | SUBORDINATION (sub-dominance): those elements that are less dominating but provide interest and background into the composition. . | REST AREAS: those places within a composition that are relatively vacant, often regarded as negative shapes or spaces. . | . RHYTHM: visual movement achieved as the viewer’s eyes progress throughout a composition, moving and resting in regular or varied measures. . REPETITION: of colors, shapes, textures, lines, etc. . | . HARMONY: the appearance of visual order obtained by relating elements of design to each other to create a sense of unity. . APPROPRIATENESS: suitability of fitness of an idea, theme motif, or purpose to elements, media, or materials used in the creation of a work of art. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/08/28/Principles-and-Elements-of-Design.html",
            "relUrl": "/2022/08/28/Principles-and-Elements-of-Design.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Ap Csp Notes",
            "content": "2 or more lines of code = sequence . | print(“) = a cmd or function . | Import lets you import alr made code . | Each if contains an “else” statement as well . | HACKS: Add a “yes” &amp; “no” . | add google doc to notebook in vs code as a “.docx” file! . | Organize blog by category (classes) . | Blog about or different classes . | “Frontmatter” allows the posts/notebooks to show up on our blog . | Key (know it!) . | Value (know it!) . | Mimic frontmatter in pages . | _pages is where to put a menu . | site.base.url tells system the “base” of ur “url” . | For quiz make function for each question and randomize them . | Git Pull goes to SSD . | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/08/28/AP-CSP-Notes.html",
            "relUrl": "/2022/08/28/AP-CSP-Notes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Honors Humanities Notes",
            "content": "Elements of design . are structural parts of a work of art, which must be used according to principles of design in order to produce satisfactory work. Design is a structure of art with the elements and principles unifying the different parts and giving the work visual order. The elements and principles are always used in combination and therefore work together to create a work of art with good design. . SPACE: . is absolutely necessary to all works of art because other elements are composed and developed within it. It can extend in either two (2-D) or three (3-D) dimensions. Space has no meaning until its limits are determined and its existence used. . FORMAT: . once an artist has determined the size and shape of the area in which a work of art will be created, that area is referred to as the format. . POSITIVE SPACE: . the interior area of a shape, object, or form. . NEGATIVE SPACE: . the area exterior to, surrounding, or between shapes, objects, or forms. . LINE: . is a basic structural element of art; all works of art have linear aspects. Paul Klee said, “A line is a dot going for a walk.” Lines may express response or excitement, strength or weakness, or other conditions. Lines have five characteristics: . LENGTH: . short, long, continuous. . WIDTH: . thick, thin, carrying . ATTITUDE: . vertical, horizontal, diagonal . CURVATURE: . straight, shallow, tight . TEXTURE: . hard, soft, vibrant . SHAPE: . the shape is produced by a continuous line connecting with itself; is usually regarded as a two-dimensional flat object. . FORM: . usually regarded as three-dimensional objects or a shape that has the appearance of depth. . MASS: . Bulk, weight, and density of three-dimensional forms, either actual or implied. . VOLUME: . Any three-dimensional quantity that is bound or enclosed, whether solid or void. . COLOR: . is a quality of visual sensation usually evoked by light stimulating the cones of the retina of the eye. Color has four qualities: . HUE: . the generic name of a color, such as red, yellow, etc. . INTENSITY: . the brightness or dullness of a color. . VALUE: . the lightness or darkness of a color. Helps us understand two-dimensional art . TEMPERATURE: . the warm or cool quality in the appearance of a color, for example orange is a warm color, and green is a cool color. . TEXTURE: . denotes the surface tactile qualities, usually described as being rough, smooth, coarse or fine, shiny or dull. The texture is understood through the sense of light. . TRUE (actual) TEXTURE: . occurs when the surface feels as it appears. Easily found in nature. . FALSE (implied) TEXTURE: . occurs when the actual surface appears to be a texture other than what it is; usually found in works of art. . Principles of Design . A principle is a rule to be followed in creating a design or composition. Design in the structure of art, with the elements and principles unifying the different parts and giving the work visual order. The elements and principles are always used in combination and therefore work together to create a work of art with good design. . BALANCE: . equality of visual weight achieved through the use of one or more elements or design. . SYMMETRICAL: . (formal) BALANCE: occurs when the elements on one side of the center are identical (but mirrored) to those of the other side. . Asymmetrical: . (informal) BALANCE: occurs when the elements on one side of the center are not identical to those on the other, yet appear visually equal. . RADIAL BALANCE: . is similar to formal balance, but based on a circle with the center focal point. . UNITY: . harmonious relationship of parts creating a single main idea, emotion, or point of view; obtained by relating elements of design to each other. . REPETITION: . unity is obtained by repeating specific elements of design to produce patterns and rhythms. . PROGRESSION . (movement): elements that cause the eye to move through a composition. . PATTERN: . pattern uses the art elements in planned or random repetitions to enhance surfaces of paintings or sculptures. Patterns often occur in nature, and artists use similar repeated motifs to create patterns in their work. Pattern increases visual excitement by enriching the surface interest. . MOVEMENT: . Artists to direct viewers through their work, often to focal areas, use visual movement. Such movement can be directed along lines, edges, shapes, and colors within works, but moves the eye most easily on the paths of equal value. . Ex: bc lines are used to replicate movement when not moving | . EMPHASIS: . that part of a composition that is most important presents the main idea of the work of art. . DOMINANCE: . provides a center of interest, attracts attention, or makes one part of the composition appear most important. . DOMINANT: . the most prominent principle of the most obvious in the influence of position. . THEME &amp; VARIATION: . an idea or dominant feature that gives the artwork its character; the subject of a work of art, sometimes with a number of phases or different examples. . SUBORDINATION: . (sub-dominance): those elements that are less dominating but provide interest and background into the composition. . REST AREAS: . those places within a composition that are relatively vacant, often regarded as negative shapes or spaces. . RHYTHM: . visual movement achieved as the viewer’s eyes progress throughout a composition, moving and resting in regular or varied measures. . REPETITION: . of colors, shapes, textures, lines, etc. . HARMONY: . the appearance of visual order obtained by relating elements of design to each other to create a sense of unity. . APPROPRIATENESS: . suitability of fitness of an idea, theme motif, or purpose to elements, media, or materials used in the creation of a work of art. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/2022/08/27/HonHum.html",
            "relUrl": "/markdown/2022/08/27/HonHum.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "AP Biology Notes",
            "content": "AP Biology . Chapter and Section . Evolution Figures #1 (7.1) . Evolution . A pattern and process | Evolution is NOT goal oriented | Individual organisms do not evolve. Populations evolve | Hardy Weinberg Equilibrium allows us to mathematically calculate allele frequency | Evolution is pressured and driven by environment | . Variation . Traits are heritable | Some organisms (i.e. spores &amp; humans) overproduce purposely | Overproduction is done as when there are low-resources, not all offspring survive - overproduction ensures that at least some organisms survive. | Three types of selection 1) Directionaly 2) Stationary 3) Disruptive | . Microevolution . Evolution of a group or species occurring over a small period of time | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/2022/08/27/APBio.html",
            "relUrl": "/markdown/2022/08/27/APBio.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "My Quiz",
            "content": "import getpass, sys import random # Function to layout the questions and answers def ask_question (question, answer): # Allow answers to be typed in through input &amp; print the questions and answers print(question) ans = input(question) print(ans) # Print &quot;Correct!&quot;&quot; and add 1 point (through return) per correct answer if ans == answer: print(&quot;Correct!&quot;) return 1 # Print &quot;Wrong&quot; when an answer is incorrect and return 0 points else: print(&quot;Wrong&quot;) return 0 # A list of my questions and answers using the previously added &quot;ask_question&quot; function question_list = [&quot;Who was the first emperor of Imperial China?&quot; , &quot;What is 5 x 8?&quot; , &quot;How many states are there in the United States of America?&quot; , &quot;What command is used to include other functions that were previously developed?&quot; , &quot;What command is used to evaluate correct or incorrect response in this example?&quot; , &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;] answer_list = [&quot;Qin&quot;, &quot;40&quot;, &quot;50&quot; , &quot;import&quot; , &quot;if&quot; , &quot;expression&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 6) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Congratulations!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Not bad, keep working! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Its okay, better luck next time!&quot;) . Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression Correct! What is 5 x 8? 40 Correct! How many states are there in the United States of America? 50 Correct! What command is used to include other functions that were previously developed? import Correct! What command is used to evaluate correct or incorrect response in this example? if Correct! Who was the first emperor of Imperial China? Qin Correct! 100.00% Your total score is: 6 out of 6. Congratulations! .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/2022/08/26/quiz.html",
            "relUrl": "/fastpages/jupyter/2022/08/26/quiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "First Markdown Post",
            "content": "Why Computer Science classes were enjoyable… . Enjoyed doing CS to numerous algorithms and code. | Set a foundation and solidified a basic understanding of CS | Set up the course of what they wanted to do in the future. Why CS classes (AP CSP, CSA, etc.) were helpful… . | Taking classes such as Intro to CS and CSP helped with web design and understanding interactions, UI, interface, etc. | AP CSA helped build skills to help with real-world problems. Ex. COVID-19 database project. Challenges (at the start and even after highschool)… . | Starting out and trying to maintain motivation - projects and understanding certain concepts can be quite frustrating for many people. | Dealing with egos, people trying to flex their achievements - | Trying to focus on yourself and working on our own learning curve. | Learning CS theory, structures that were not thought about before | College courses are typically structured differently than high school classes. | Persevering through the problems and hardship - finding solutions. | Making sure to not cut corners (don’t take the easy ways out)! | Trying to go above and beyond the standard Adjusting to the way tests are done and how they are not always structured in a way that is totally straight-forward. Project based learning (PBLs)… . | PBLs and tests are typically similar/the same. Though, PBLs are largely embedded in CS as a whole, rather than just theory. | Group studying helps with understanding concepts especially during project based learning | Don’t be scared to ask questions. Applying CS in non-CS majors:… . Writing scripts to make life easier (ie. programming converters for documents) Programming stress tests, manipulating certain code from class to help them work better, or 3D printing are things that use CS. Problem solving skills developed during CS courses help you to learn other concepts such as mathematics. Majors like statistics and cognitive science are not technically CS majors, but prior programming knowledge can be helpful. . Jobs/internships with a professor or teacher… . | Stand out to teachers, interact with them, go above and beyond, | Submit resumes. | Work close to what you want to specialize in. | Work on personal projects to show that you know what you’re doing (even 2-3 projects is sufficient) | This shows a company/interviewer that you are knowledgeable in the field of computer science. | Sorting algorithms and path finding are some examples of things one can program. | Have a resume and know when to apply for said internships/jobs | Many companies try to hire a year before, at the beginning of the school year (early September - mid November) | Apply ahead and have a resume done by that time | Have a LinkedIn profile | Build a network of people you know and reach out - add people on LinkedIn. | This helps with referrals and overall networking | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/2022/08/26/APCSP.html",
            "relUrl": "/markdown/2022/08/26/APCSP.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Installation Checks (Bash)",
            "content": "Check for the necessary AP CSP tools (ie. JavaScript, Python3, and Bash) . python2 --version python3 --version . Python 2.7.18 Python 3.8.10 . conda activate jupyter --version jupyter kernelspec list conda list conda deactivate . (base) Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 (base) Available kernels: javascript /root/.local/share/jupyter/kernels/javascript python3 /root/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash (base) # packages in environment at /root/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.14.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 (base) . View Each fastpages post . echo &quot;Search for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # Posts within fastpages pwd # present working directory ls -l # lists all posts on fastpages . Search for posts bash: cd: /_posts: No such file or directory /mnt/c/Users/etran/OneDrive/Documents/GitHub/fastpages_EthanT/_notebooks total 3112 -rwxrwxrwx 1 root root 3162470 Aug 19 18:35 2020-02-20-test -rwxrwxrwx 1 root root 2866 Aug 27 18:00 2022-08-19-first-notebook.ipynb -rwxrwxrwx 1 root root 784 Aug 27 18:00 2022-08-20-READ-ME.md -rwxrwxrwx 1 root root 2192 Aug 28 19:08 2022-08-25-bash.ipynb -rwxrwxrwx 1 root root 4152 Aug 28 18:50 2022-08-26-quiz.ipynb drwxrwxrwx 1 root root 4096 Aug 19 18:31 ghtop_images drwxrwxrwx 1 root root 4096 Aug 19 18:31 my_icons .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/2022/08/25/bash.html",
            "relUrl": "/fastpages/jupyter/2022/08/25/bash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "First Markdown Post",
            "content": "Hello, my name is Ethan Tran and this is my first markdown post. . . About Me Click this! ↑ . . Closing statement . I hope to improve my skills with Python and get adjusted to IDEs such as Visual Studio. Cheers! .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/2022/08/19/first-post.html",
            "relUrl": "/markdown/2022/08/19/first-post.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Ethan's First Notebook",
            "content": "Printing &quot;Hello&quot; . print(&quot;Hello&quot;) . Hello . Time value of money after one year calculator! . With this calculator that I made, you can insert any initial amount of money and any interest rate. In this demo, I started with $1000 and used an interest rate of 0.1563. . print(&quot;Lets calculate your time value of money after one year!&quot;) print(&quot;How much money are you investing?&quot;) # Input the initial amount of money Money = float(input(&quot;Amount of money: &quot;)) print(&quot;$&quot; + &quot;{:.2f}&quot;.format(Money)) # Input interest rate print(&quot;What is the interest rate of your investment?&quot;) r = float(input(&quot;Interest rate: &quot;)) percent = (r * 100) # Interest rate shown as a percentage print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Calculation of the final amount of money final_amount = (Money * (1 + r)) print(&#39;This will be your amount of money after one year.&#39;) print(&quot;$&quot; + &quot;{:.2f}&quot;.format(final_amount)) . Lets calculate your time value of money after one year! How much money are you investing? $50.00 What is the interest rate of your investment? 15.00% This will be your amount of money after one year. $57.50 .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/2022/08/19/first-notebook.html",
            "relUrl": "/fastpages/jupyter/2022/08/19/first-notebook.html",
            "date": " • Aug 19, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://muddydog25.github.io/fastpages_EthanT/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Class Notes",
          "content": "My Classes . AP Biology | . Honors Humanities | &lt;/td&gt; &lt;/tr&gt; AP Computer Science Principles | &lt;/td&gt;",
          "url": "https://muddydog25.github.io/fastpages_EthanT/Classes/",
          "relUrl": "/Classes/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Vocabulary",
          "content": "Word Definition . Sequence | Two or more lines of code | . Key | A mix of fields used to take and sort rows from a given criteria | . Value | Representation of an entity that can be changed by a given program | . Import | A command that is used to add additional functions that have been previously developed | . If | A command that is used to determine whether a response is correct or incorrect based on previously set expressions/conditions | . Expression | Used in an if statement to determine whether a given command is right or wrong | .",
          "url": "https://muddydog25.github.io/fastpages_EthanT/Vocabulary/",
          "relUrl": "/Vocabulary/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Classes",
          "content": "Period Class . 1 | | . 2 | | . 3 | | . 4 | | . 5 | | .",
          "url": "https://muddydog25.github.io/fastpages_EthanT/Class%20Periods/",
          "relUrl": "/Class Periods/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://muddydog25.github.io/fastpages_EthanT/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}