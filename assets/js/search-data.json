{
  
    
        "post0": {
            "title": "Algorithms",
            "content": "Notes . Truth Tables: Truth tables are a type of mathematical table used in logic and computer science to display the truth-values of logical expressions. A truth table has one column for each input variable (for example, a, b, and c) and one final column showing all of the possible results of the expression for each combination of inputs. In other words, a truth table shows the output of a logical expression for every possible combination of input values. The output column of a truth table is often referred to as the &quot;truth value&quot; column because it shows the truth-value of the logical expression for each combination of inputs. . Procedures/Functions: A procedure or function is a set of instructions that a computer can execute in order to accomplish a given task. Procedures and functions are a fundamental component of computer programming, and are used to break complex tasks into smaller, more manageable pieces. Generally, a procedure or function will take some input, perform some processing on the input, and return some output. Procedures and functions can be written in any programming language, though they are most commonly written in high-level languages such as C++, Java, and Python. . Sequences of Code: A sequence of code is a set of instructions written in a programming language that can be executed by a computer. Sequences of code can range from simple commands to complex algorithms. Sequences of code are written to accomplish a specific task, such as sorting a list of numbers or displaying a user interface. Sequences of code are generally written in a programming language such as C++, Java, or Python. . def xor(x,y): return (x or y) and not (x and y) # The boolean function def F(A, B, C, D): P = xor(A, B) Q = xor(C, D) R = xor(P, Q) return R # Translates between &#39;T&#39;/&#39;F&#39; and True/False: def f(a,b,c,d): t = &#39;T&#39; (A,B,C,D) = (a==t, b==t, c==t, d==t) R = F(A, B, C, D) return &quot;FT&quot;[R] print(&quot;Truth Table&quot;) print() print(&quot;A B C D | f(A,B,C,D)&quot;) print(&quot;========|===========&quot;) r = &quot;TF&quot; for a in r: for b in r: for c in r: for d in r: print(a, b, c, d, &quot;| &quot;, f(a, b, c, d)) . Truth Table A B C D | f(A,B,C,D) ========|=========== T T T T | F T T T F | T T T F T | T T T F F | F T F T T | T T F T F | F T F F T | F T F F F | T F T T T | T F T T F | F F T F T | F F T F F | T F F T T | F F F T F | T F F F T | T F F F F | F .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/bash/installation/checks/2022/12/15/Algorithms.html",
            "relUrl": "/fastpages/jupyter/bash/installation/checks/2022/12/15/Algorithms.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 3 Vocabulary (Definitions + Examples)",
            "content": "Bits: A bit is the smallest unit of data in a computer, typically represented as a 0 or 1. . Bytes: A byte is a unit of digital information that contains 8 bits. . Hexadecimal / Nibbles: Hexadecimal is a base 16 number system, which is represented by the characters 0-9 and A-F. A nibble is 4 bits, or one-half of a byte. . Unsigned Integer: An unsigned integer is a binary number that can represent a positive number but not a negative number. . Signed Integer: A signed integer is a binary number that can represent both a positive and negative number. . Floating Point: A floating point is a binary number that can represent real numbers with fractional parts. . Boolean: A Boolean is a data type that can only have a value of either true or false. . ASCII: ASCII stands for American Standard Code for Information Interchange. It is a character encoding scheme used to represent text in computers. . Unicode: Unicode is a character encoding scheme that is used to represent text in computers. It is an extension of ASCII and can represent more characters than ASCII. . RGB: RGB stands for Red, Green, and Blue. It is a color model used in digital imaging and computer graphics. . Lossy: Lossy compression is a type of data compression that reduces file size by discarding some of the data. . Lossless: Lossless compression is a type of data compression that reduces the file size without discarding any of the data. . Variables: Variables are names that can store values. . Data Types: Data types are categories of data, such as numbers, strings, and Booleans. . Assignment Operators: Assignment operators are symbols used to assign values to variables. . 2D Lists: 2D lists are data structures used to store multiple lists in one variable. . Dictionaries: Dictionaries are data structures used to store data in key-value pairs. . Class: A class is a type of data structure used to store data and the methods used to manipulate that data. . Algorithms: An algorithm is a set of instructions that can be used to solve a problem. . Sequence: A sequence is a set of instructions that are executed in a specific order. . Expressions: Expressions are combinations of values and operators that evaluate to a single value. . Comparison Operators: Comparison operators are symbols used to compare two values. . Boolean Expressions and Selection: Boolean expressions are combinations of values and comparison operators that evaluate to a Boolean. They are used to create selection statements. . Boolean Expressions and Iteration: Boolean expressions are used to create iteration statements. . Truth Tables: Truth tables are tables that show the output of Boolean expressions for all possible inputs. . Characters: Characters are the smallest units of a string. . Strings: Strings are sequences of characters. . Length: The length of a string is the number of characters in the string. . Concatenation: Concatenation is the process of combining two strings. . Upper: Upper is a method that converts all characters in a string to uppercase. . Lower: Lower is a method that converts all characters in a string to lowercase. . Traversing Strings: Traversing strings is the process of looping through each character in a string. . Python If Statement: A statement used to perform a certain action only if a certain condition is met. . Elif Statement: An additional statement used to check for an alternative condition if the initial condition of the If statement is not met. . Else Conditionals: An additional statement used to perform a certain action if none of the conditions of the If or Elif statements were met. . Nested Selection Statements: When an If, Elif, or Else statement is used within another If, Elif, or Else statement. This can be used to check multiple conditions. . Python For Loop: A looping statement used to execute a set of statements multiple times. It is typically used to iterate through a set of items such as a list or a range of numbers. . While Loop with Range: A looping statement used to execute a set of statements multiple times. It is typically used to iterate through a range of numbers. . While Loop with List: A looping statement used to execute a set of statements multiple times. It is typically used to iterate through a list of items. . Combining Loops, Conditionals to Break: Combining multiple loops and conditions in order to break out of a certain loop when a certain condition is met. . Procedural Abstraction: A process used to simplify complex tasks by breaking them down into smaller, easier-to-manage tasks. . Python Def Procedures: A method used to define a set of instructions to be executed when a certain procedure is called. . Parameters: Arguments that are passed to a procedure when it is called. . Return Values: A value that is returned after a procedure has been executed. . Selection: Selection is a type of control flow that allows for the execution of certain code based on certain conditions. . firstNum = int(input(&quot;Input your first number.&quot;)) secondNum = int(input(&quot;Input your second number.&quot;)) conditional = input(&quot;AND, OR, XOR?&quot;).lower() if conditional == &quot;and&quot;: print(&quot;Selection:&quot; , &quot;AND&quot;, firstNum, &quot;&amp;&quot;, secondNum, &quot;=&quot;, firstNum &amp; secondNum) elif conditional ==&quot;or&quot;: print(&quot;Selection:&quot; , &quot;OR &quot;, firstNum, &quot;|&quot;, secondNum, &quot;=&quot;, firstNum | secondNum) elif conditional ==&quot;xor&quot;: print(&quot;Selection:&quot; , &quot;XOR&quot;, firstNum, &quot;^&quot;, secondNum, &quot;=&quot;, firstNum ^ secondNum) else: print(&quot;Error&quot;) . Selection: OR 2 | 10 = 10 . Lists: Lists are data structures used to store multiple values in one variable. . Iteration: Iteration is a type of control flow that allows for the execution of certain code multiple times. . print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Ethan Tran&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 15 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot; , &quot;Bash&quot; , &quot;C&quot; , &quot;R&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs, } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Ethan Tran &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 15 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 100.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;C&#39;, &#39;R&#39;] &lt;class &#39;list&#39;&gt; length 6 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Ethan Tran&#39;, &#39;age&#39;: 15, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;C&#39;, &#39;R&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Ethan Tran &lt;class &#39;str&#39;&gt; . Logical Operator: A logical operator is a type of operator in computer science that performs a logical operation, such as a comparison or a boolean operation, on two or more values or variables. Examples of logical operators include AND, OR, NOT, XOR, and NAND. . Tru = True equals = &quot;=&quot; opposite = not(Tru) print(opposite) fun = &quot;fun&quot; awesome = fun if fun and awesome == &quot;fun&quot;: print(&quot;AND&quot;) else: print(&quot;NOT AND&quot;) . False . fun = &quot;fun&quot; awesome = fun if fun and awesome == &quot;fun&quot;: print(&quot;AND&quot;) else: print(&quot;NOT AND&quot;) . AND . import random numList = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;] ranNum = random.randrange(len(numList)) print(ranNum) if ranNum == 2 or ranNum == 5: print(&quot;OR&quot;) else: print(&quot;NOT OR&quot;) . 3 NOT OR .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/unit%203/vocabulary/2022/12/14/unit-3-vocabulary.html",
            "relUrl": "/unit%203/vocabulary/2022/12/14/unit-3-vocabulary.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Notes Sections 8-10",
            "content": "1) Iteration: a repeating portion of an algorithm, repeats a specified number of times or until a given condition is met . 2) Iteration Statements: change the sequential flow of control by repeating a set of statements zero or more times, until a stopping condition is met . 3) Repeat Until: if the condition evaluates to true initially, the loop body is not executed at all, due to the condition being checked before the loop . For list operations, write expressions that use list indexing and list procedures | For algorithms involving elements of a list, write iteration statements to traverse a list | For list operations, evaluate expression that use list indexing and list procedures | For algorithms involving elements of a list, determine the result of an algorithm that includes list traversals | List procedures are implemented in accordance with the syntax rules of the programming language | Iteration Statements can be used to traverse a list . | AP EXAM provides pseudocode for loops . | Knowledge of existing algorithms that use iteration can help in constructing new algorithms | . nums = [&quot;10&quot;, &quot;15&quot;, &quot;20&quot;, &quot;25&quot;, &quot;30&quot;, &quot;35&quot;] potentialMin = int(nums.pop()) while len(nums) != 0: newNum = int(nums.pop()) if newNum &lt; potentialMin: potentialMin = newNum print(potentialMin, &quot;is the minimum value.&quot;) . 10 is the minimum value. . fruit = [&quot;apple&quot;, &quot;orange&quot;, &quot;strawberry&quot;, &quot;pear&quot;] i = 0 for x in fruit: print(fruit[i]) i += 1 . apple orange strawberry pear .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/hacks/turkey/tree/notes/2022/12/14/Unit-8-10-notes.html",
            "relUrl": "/hacks/turkey/tree/notes/2022/12/14/Unit-8-10-notes.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Hacks Sections 5-7",
            "content": "Notes . Boolean: A denoting a system of algebraic notation used to represent logical arguments | Relational Operators: The mathematical relationship shared between two given variables. Determines whether a statement is true or false based on the output. | Conditionals: Allow the expression of an algorithms that utilize selection to occur without the use of a programming language. | Conditional Statement: A statement that affects the sequence of control by executing certain statements depending on the value of a boolean. | . Unit 3.5 Hacks . Explain in your own words what each logical operator does NOT: Outputs the opposite of the given data and is typically used for true or false statements - has no effect on the variable. AND: Evaluates two separate conditions and determines if they are all met. OR: Checks for if only one condition is met. . | Code your own scenario that makes sense for each logical operator . | . Tru = True equals = &quot;=&quot; opposite = not(Tru) print(opposite) . False . fun = &quot;fun&quot; awesome = fun if fun and awesome == &quot;fun&quot;: print(&quot;AND&quot;) else: print(&quot;NOT AND&quot;) . AND . import random numList = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;] ranNum = random.randrange(len(numList)) print(ranNum) if ranNum == 2 or ranNum == 5: print(&quot;OR&quot;) else: print(&quot;NOT OR&quot;) . 2 OR . Unit 3.6 Hacks . 1 point for defining all the key terms in your own words. 0.5 points if you use examples that show you truly understand it. | 1 point for writing a program that uses binary conditional logic. 0.5 points if it is original and shows complexity | . 1) Selection: A construct in which the code will only run if a given condition is met. . Example: If an answer is true, then the program will run 2) Algorithm: A procedure utilized for completing mathematical operations or problem solving. | Example: An algorithm that takes in the correct and incorrect (overall points) of a test/quiz, that then displays the users&#39; score. 3) Conditional statement: When a program only runs if a set of conditions are met. | Example: a) If the basketball is not flat, the game will proceed. b) If the basketball is not broken, then the game will be able to continue. | . firstNum = int(input(&quot;Input your first number.&quot;)) secondNum = int(input(&quot;Input your second number.&quot;)) conditional = input(&quot;AND, OR, XOR?&quot;).lower() if conditional == &quot;and&quot;: print(&quot;Selection:&quot; , &quot;AND&quot;, firstNum, &quot;&amp;&quot;, secondNum, &quot;=&quot;, firstNum &amp; secondNum) elif conditional ==&quot;or&quot;: print(&quot;Selection:&quot; , &quot;OR &quot;, firstNum, &quot;|&quot;, secondNum, &quot;=&quot;, firstNum | secondNum) elif conditional ==&quot;xor&quot;: print(&quot;Selection:&quot; , &quot;XOR&quot;, firstNum, &quot;^&quot;, secondNum, &quot;=&quot;, firstNum ^ secondNum) else: print(&quot;Error&quot;) . Selection: AND 5 &amp; 10 = 0 . . color = &quot;orange&quot; item = &quot;fruit&quot; if color == &quot;orange&quot;: print(&quot;Right color, wrong item!&quot;) else: color != &quot;orange&quot; , item == &quot;fruit&quot; print(&quot;Wrong color, right item!&quot;) if color ==&quot;green&quot;: print(&quot;Wrong color, wrong item!&quot;) else: item != &quot;fruit&quot; , color != &quot;orange&quot; print(&quot;Right item, right color!&quot;) print(color) . Right color, wrong item! Right item, right color! orange . . Temperature = 85 Cloudy = True if Temperature &gt; 85: if Cloudy == True: print(&quot;Hot and cloudy!&quot;) elif Cloudy == False: print(&quot;Hot, but not cloudy!&quot;) elif Temperature &lt; 80: if Cloudy == True: print(&quot;Neither hot nor cloudy!&quot;) elif Cloudy == False: print(&quot;Neither hot nor cloudy!&quot;) . . if spice &gt; 1000: if tongue == &quot;strong!&quot;: print(&quot;Not spicy!&quot;) elif milk == &quot;present&quot;: print(&quot;Not spicy!&quot;) elif tongue == &quot;weak&quot;: print(&quot;Spicy!&quot;) else: print(&quot;Not spicy at all!&quot;) . Create a piece of code that displays four statements instead of three. Try to do more if you can. . make = &quot;BMW&quot; model = &quot;M4 Competition&quot; year = &quot;2022&quot; if make == &quot;BMW&quot;: print(make) if model == &quot;M4 Competition&quot;: print(model) if year == &quot;2022&quot;: print(year) print(&quot;Nice car!&quot;) . BMW M4 Competition 2022 Nice car! . Make piece of code that gives three different recommendations for possible classes to take at a school based on two different conditions. These conditions could be if the student likes STEM or not. . STEM = True MISC = True if STEM: print(&quot;Algebra, AP CSP, AP Biology&quot;) elif PE: print(&quot;Art, Racket sports, Photography&quot;) else: print(&quot;PE&quot;) . Algebra, AP CSP, AP Biology .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/hacks/turkey/post%20tree/notes/2022/12/14/Section_5_7_Hacks.html",
            "relUrl": "/hacks/turkey/post%20tree/notes/2022/12/14/Section_5_7_Hacks.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Hacks Sections 9-11",
            "content": "Notes . 1) Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm This may allow for the coding process to be more efficient and effective . 2) Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration Algorithms with selection only go through certain functions if certain things are true or false . 3) Why use algorithms? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . Hacks 3.9.1 . 1) Why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results? . It is vital to know that algorithms that appear different are capable of performing the same functions, and that algorithms that look the same may have different results. This is because it allows for creativity when coding, leading to finding new or different ways of solving the same issue(s). | . 2) For the converted conditional to boolean conversion . isSunny = True isRainy = False if isSunny == True: print(&quot;No umbrella necessary!&quot;) else: if isRainy == True: print(&quot;Might want an umbrella!&quot;) else: print(&quot;No umbrella necessary!&quot;) . No umbrella necessary! . isSunny = False isRainy = True # setting variables here (same as above to make comparison easier) puddles = not(isSunny) and isRainy if isRainy == False: print(&quot;Puddles!&quot;) if isSunny == True: print(&quot;No puddles!&quot;) . Hacks 3.9.2 . Develop your own complex algorithm using a flowchart and natural language, then code it! | Requirements: | Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . . 1) Once the code starts, the starting amount of money is set to $10. . 2) The variable, spendMoney, is set to True. . 3) While spendMoney remains true, $1 is deducted from the money variable. . 4) Once the variable, money, reaches a value of 0, spendMoney is set to False and the string, &quot;You&#39;re out of money!&quot; is printed. . 5) End . money = 10 spendMoney = True while(spendMoney == True): money -= 1 if money == 0: spendMoney == False print(&quot;You&#39;re out of money!&quot;) . You&#39;re out of money! . Hacks 3.9.3 . Fix the number guessing game | . 1) Make a flow chart for the algorithm number guessing game . 2) Make a function that gets the user guess . 3) Modify the existing search function to give more encouraging feedback . . import random #sets variables for the game num_guesses = 0 user_guess = -1 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(0,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 0 and 100.&quot;) print(number) #Write a function that gets a guess from the user using input() def guess(): num = input(&quot;Input your guess&quot;) #add something here return num #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if int(guess) &lt; int(number): print(&quot;Too low, try again! :)&quot;) #change this lower_bound = guess return lower_bound, upper_bound elif int(guess) &gt; int(number): print(&quot;Too high, try again! :D&quot;) #change this upper_bound = guess return lower_bound, upper_bound else: upper_bound, lower_bound = guess, guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) if int(upper_bound) == int(number): break else: print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . I&#39;m thinking of a number between 0 and 100. 92 You guessed 10. Too low, try again! :) Guess a number between 10 and 100. You guessed 99. Too high, try again! :D Guess a number between 10 and 99. You guessed 92. You guessed the number in 3 guesses! . Hacks 3.11 . 1) calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 92, 43, 74, 66, 30, 12, 1 7, 13, 96, 111, 33, 84, 60 . Answer: Below . . 2) Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? Set 1: 80, Set 2: 74, Set 3: 96 . Answer: Set 1: 80, Set 2: 74, Set 3: 96 . . 3) Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . Answer: C . . numListOne = [12,14,44,57,79,80,99] numListTwo = [92,43,74,66,30,12,1] numListThree = [7,13,96,111,33,84,60] numLists = [numListOne, numListTwo, numListThree] for x in range(len(numLists)): numLists[x].sort() middle = int(len(numLists[x])/2) print(&quot;Middle Index of List #&quot;,x+1,&quot;is&quot;,numLists[x][middle]) . Middle Index of List # 1 is 57 Middle Index of List # 2 is 43 Middle Index of List # 3 is 60 .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/hacks/turkey/post%20tree/notes/2022/12/14/Section-9_11_Hacks.html",
            "relUrl": "/hacks/turkey/post%20tree/notes/2022/12/14/Section-9_11_Hacks.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Hacks Sections 12-13",
            "content": "Notes . Procedures: A procedure is a block of code that performs a particular task. It can contain variables, constants, data structures, and other programming constructs. Procedures are also known as subroutines, functions, methods, or routines. They are used to break up large programs into smaller, more manageable pieces. . Parameters: Parameters are values that are passed to a procedure or function. They are used to customize the behavior of the procedure or function and can be used to modify its input and output. . Return Values: Return values are values that are returned from a procedure or function. They can be used to indicate the success or failure of a procedure or function, as well as return a value or set of values. . Output Parameters: Output parameters are values that are passed out of a procedure or function. They are used to return values from a procedure or function and can be used to modify its output. . Section 3.12 Hacks . 1. Define procedure and parameter in your own words &amp; Define Return Values and Output Parameters in your own words . a) Procedure: A block of code that is created to perform a given task - essentially a function. . b) Parameter: A variable that is utilized in a function that enables data to be imported into said function. . 2. Paste a screenshot of completion of the quiz . . 3. Define Return Values and Output Parameters in your own words . a) Return Values: A return value is a value that is returned by a function or method to the calling code after it has finished executing. It is the value that is passed back to the calling code once the function or method has finished its job. . b) Output Parameters: Output parameters are variables that are passed by reference to a function or method and are used to return a value to the calling code. They are typically used to return multiple values from a single function or method. . Code a procedure that finds the square root of any given number. (make sure to call and return the function) . import math userNum = float(input()) def sqrt(userNum): return userNum sqrt = math.sqrt(userNum) print(&quot;Input:&quot; , userNum) print(&quot;Square root:&quot; , int(sqrt)) . Input: 225.0 Square root: 15 . import math userNum = float(input()) sqrt = math.sqrt(userNum) print(&quot;Input:&quot; , userNum) print(sqrt) . Input: 25.0 5.0 . Section 3.13 (3.B) Hacks . 1) Q: Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective . A: Abstracting away program logic into separate, modular functions is effective when coding because it makes the code easier to read and understand, more reusable and maintainable, and allows for better organization and structure. By breaking down large, complex tasks into smaller, more manageable functions, it can help to simplify the code and make it more organized, which makes debugging and troubleshooting much easier. Additionally, modular functions are easier to update and extend, since they can be tested, modified, and replaced independently. This can help reduce the amount of code needed to be written and improve the overall code quality. Finally, modular functions make code more reusable, as they can be used in multiple projects and functions, which can lead to faster development times and reduced maintenance costs. . 2) Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) . The procedure below requires abstraction as it allows the function to organize the code as a whole. Abstracting the variables x and y allows me to not have to call the variables over and over again within the same function. . x = 20 y = 100 # Set function def addition(x,y): sum = x + y return(sum) #Print the result print(addition(x,y)) . 120 . 3) Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) . def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count def any_count(sentence, letter): words = split_string(sentence) count = count_words_starting_with_letter(words, letter) return count userLetter = input(&quot;Type any letter&quot;) answer = count_anything(s, str(userLetter)) print(str(answer) + &quot; word(s) starting with &quot; + str(userLetter)) . 0 word(s) starting with 2 . Section 3.13 (3.C) Hacks . 1) Define procedure names and arguments in your own words. Procedures and arguments are used to describe chunks of code that accomplish specific tasks. A procedure name is a label used to identify the code, while arguments are the inputs that the procedure can accept. . 2) Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) . Add two numbers . | Subtract two numbers . | Multiply two numbers . | Divide two numbers . | . Extra Work: Calculator uses binary . . Binary Calculator for +, -, * . &amp; Normal integer division . + - * / Clear . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/12/14/Hacks-Section-12-13.html",
            "relUrl": "/2022/12/14/Hacks-Section-12-13.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fixing Errors (Menu Problem)",
            "content": "import sys total = 0 menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;Burger&quot;: 3.99, &quot;Fries&quot;: 1.99, &quot;Drink&quot;: 0.99} print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) ordering = True while ordering: food = input(&quot;Please select an item from the menu. Press enter when you are done.&quot;) if food in menu: total += menu[food] print(&quot;Your total: $&quot; + &quot;{:.2f}&quot;.format(total)) else: print(&quot;Your order will be ready soon!&quot;) ordering = False . Menu burger $3.99 fries $1.99 drink $0.99 Your total: $3.99 Your total: $5.98 Your total: $6.97 Your total: $7.96 Your total: $11.95 Your order will be ready soon! .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/python/lists/iterations/menu/2022/12/14/ErrorFixing.html",
            "relUrl": "/fastpages/python/lists/iterations/menu/2022/12/14/ErrorFixing.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Title",
            "content": "def xor(x,y): return (x or y) and not (x and y) def F(A, B, C, D): P = xor(A, B) Q = xor(C, D) R = xor(P, Q) return R def f(a,b,c,d): t = &#39;T&#39; (A,B,C,D) = (a==t, b==t, c==t, d==t) R = F(A, B, C, D) return &quot;FT&quot;[R] print(&quot;Truth Table&quot;) print() print(&quot;A B C D | f(A,B,C,D)&quot;) print(&quot;========|===========&quot;) r = &quot;TF&quot; for a in r: for b in r: for c in r: for d in r: print(a, b, c, d, &quot;| &quot;, f(a, b, c, d)) . Truth Table A B C D | f(A,B,C,D) ========|=========== T T T T | F T T T r | F T T T u | F T T T e | F T T T F | F T T T a | F T T T l | F T T T s | F T T T e | F T T r T | F T T r r | F T T r u | F T T r e | F T T r F | F T T r a | F T T r l | F T T r s | F T T r e | F T T u T | F T T u r | F T T u u | F T T u e | F T T u F | F T T u a | F T T u l | F T T u s | F T T u e | F T T e T | F T T e r | F T T e u | F T T e e | F T T e F | F T T e a | F T T e l | F T T e s | F T T e e | F T T F T | F T T F r | F T T F u | F T T F e | F T T F F | F T T F a | F T T F l | F T T F s | F T T F e | F T T a T | F T T a r | F T T a u | F T T a e | F T T a F | F T T a a | F T T a l | F T T a s | F T T a e | F T T l T | F T T l r | F T T l u | F T T l e | F T T l F | F T T l a | F T T l l | F T T l s | F T T l e | F T T s T | F T T s r | F T T s u | F T T s e | F T T s F | F T T s a | F T T s l | F T T s s | F T T s e | F T T e T | F T T e r | F T T e u | F T T e e | F T T e F | F T T e a | F T T e l | F T T e s | F T T e e | F T r T T | F T r T r | F T r T u | F T r T e | F T r T F | F T r T a | F T r T l | F T r T s | F T r T e | F T r r T | F T r r r | F T r r u | F T r r e | F T r r F | F T r r a | F T r r l | F T r r s | F T r r e | F T r u T | F T r u r | F T r u u | F T r u e | F T r u F | F T r u a | F T r u l | F T r u s | F T r u e | F T r e T | F T r e r | F T r e u | F T r e e | F T r e F | F T r e a | F T r e l | F T r e s | F T r e e | F T r F T | F T r F r | F T r F u | F T r F e | F T r F F | F T r F a | F T r F l | F T r F s | F T r F e | F T r a T | F T r a r | F T r a u | F T r a e | F T r a F | F T r a a | F T r a l | F T r a s | F T r a e | F T r l T | F T r l r | F T r l u | F T r l e | F T r l F | F T r l a | F T r l l | F T r l s | F T r l e | F T r s T | F T r s r | F T r s u | F T r s e | F T r s F | F T r s a | F T r s l | F T r s s | F T r s e | F T r e T | F T r e r | F T r e u | F T r e e | F T r e F | F T r e a | F T r e l | F T r e s | F T r e e | F T u T T | F T u T r | F T u T u | F T u T e | F T u T F | F T u T a | F T u T l | F T u T s | F T u T e | F T u r T | F T u r r | F T u r u | F T u r e | F T u r F | F T u r a | F T u r l | F T u r s | F T u r e | F T u u T | F T u u r | F T u u u | F T u u e | F T u u F | F T u u a | F T u u l | F T u u s | F T u u e | F T u e T | F T u e r | F T u e u | F T u e e | F T u e F | F T u e a | F T u e l | F T u e s | F T u e e | F T u F T | F T u F r | F T u F u | F T u F e | F T u F F | F T u F a | F T u F l | F T u F s | F T u F e | F T u a T | F T u a r | F T u a u | F T u a e | F T u a F | F T u a a | F T u a l | F T u a s | F T u a e | F T u l T | F T u l r | F T u l u | F T u l e | F T u l F | F T u l a | F T u l l | F T u l s | F T u l e | F T u s T | F T u s r | F T u s u | F T u s e | F T u s F | F T u s a | F T u s l | F T u s s | F T u s e | F T u e T | F T u e r | F T u e u | F T u e e | F T u e F | F T u e a | F T u e l | F T u e s | F T u e e | F T e T T | F T e T r | F T e T u | F T e T e | F T e T F | F T e T a | F T e T l | F T e T s | F T e T e | F T e r T | F T e r r | F T e r u | F T e r e | F T e r F | F T e r a | F T e r l | F T e r s | F T e r e | F T e u T | F T e u r | F T e u u | F T e u e | F T e u F | F T e u a | F T e u l | F T e u s | F T e u e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T e F T | F T e F r | F T e F u | F T e F e | F T e F F | F T e F a | F T e F l | F T e F s | F T e F e | F T e a T | F T e a r | F T e a u | F T e a e | F T e a F | F T e a a | F T e a l | F T e a s | F T e a e | F T e l T | F T e l r | F T e l u | F T e l e | F T e l F | F T e l a | F T e l l | F T e l s | F T e l e | F T e s T | F T e s r | F T e s u | F T e s e | F T e s F | F T e s a | F T e s l | F T e s s | F T e s e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T F T T | F T F T r | F T F T u | F T F T e | F T F T F | F T F T a | F T F T l | F T F T s | F T F T e | F T F r T | F T F r r | F T F r u | F T F r e | F T F r F | F T F r a | F T F r l | F T F r s | F T F r e | F T F u T | F T F u r | F T F u u | F T F u e | F T F u F | F T F u a | F T F u l | F T F u s | F T F u e | F T F e T | F T F e r | F T F e u | F T F e e | F T F e F | F T F e a | F T F e l | F T F e s | F T F e e | F T F F T | F T F F r | F T F F u | F T F F e | F T F F F | F T F F a | F T F F l | F T F F s | F T F F e | F T F a T | F T F a r | F T F a u | F T F a e | F T F a F | F T F a a | F T F a l | F T F a s | F T F a e | F T F l T | F T F l r | F T F l u | F T F l e | F T F l F | F T F l a | F T F l l | F T F l s | F T F l e | F T F s T | F T F s r | F T F s u | F T F s e | F T F s F | F T F s a | F T F s l | F T F s s | F T F s e | F T F e T | F T F e r | F T F e u | F T F e e | F T F e F | F T F e a | F T F e l | F T F e s | F T F e e | F T a T T | F T a T r | F T a T u | F T a T e | F T a T F | F T a T a | F T a T l | F T a T s | F T a T e | F T a r T | F T a r r | F T a r u | F T a r e | F T a r F | F T a r a | F T a r l | F T a r s | F T a r e | F T a u T | F T a u r | F T a u u | F T a u e | F T a u F | F T a u a | F T a u l | F T a u s | F T a u e | F T a e T | F T a e r | F T a e u | F T a e e | F T a e F | F T a e a | F T a e l | F T a e s | F T a e e | F T a F T | F T a F r | F T a F u | F T a F e | F T a F F | F T a F a | F T a F l | F T a F s | F T a F e | F T a a T | F T a a r | F T a a u | F T a a e | F T a a F | F T a a a | F T a a l | F T a a s | F T a a e | F T a l T | F T a l r | F T a l u | F T a l e | F T a l F | F T a l a | F T a l l | F T a l s | F T a l e | F T a s T | F T a s r | F T a s u | F T a s e | F T a s F | F T a s a | F T a s l | F T a s s | F T a s e | F T a e T | F T a e r | F T a e u | F T a e e | F T a e F | F T a e a | F T a e l | F T a e s | F T a e e | F T l T T | F T l T r | F T l T u | F T l T e | F T l T F | F T l T a | F T l T l | F T l T s | F T l T e | F T l r T | F T l r r | F T l r u | F T l r e | F T l r F | F T l r a | F T l r l | F T l r s | F T l r e | F T l u T | F T l u r | F T l u u | F T l u e | F T l u F | F T l u a | F T l u l | F T l u s | F T l u e | F T l e T | F T l e r | F T l e u | F T l e e | F T l e F | F T l e a | F T l e l | F T l e s | F T l e e | F T l F T | F T l F r | F T l F u | F T l F e | F T l F F | F T l F a | F T l F l | F T l F s | F T l F e | F T l a T | F T l a r | F T l a u | F T l a e | F T l a F | F T l a a | F T l a l | F T l a s | F T l a e | F T l l T | F T l l r | F T l l u | F T l l e | F T l l F | F T l l a | F T l l l | F T l l s | F T l l e | F T l s T | F T l s r | F T l s u | F T l s e | F T l s F | F T l s a | F T l s l | F T l s s | F T l s e | F T l e T | F T l e r | F T l e u | F T l e e | F T l e F | F T l e a | F T l e l | F T l e s | F T l e e | F T s T T | F T s T r | F T s T u | F T s T e | F T s T F | F T s T a | F T s T l | F T s T s | F T s T e | F T s r T | F T s r r | F T s r u | F T s r e | F T s r F | F T s r a | F T s r l | F T s r s | F T s r e | F T s u T | F T s u r | F T s u u | F T s u e | F T s u F | F T s u a | F T s u l | F T s u s | F T s u e | F T s e T | F T s e r | F T s e u | F T s e e | F T s e F | F T s e a | F T s e l | F T s e s | F T s e e | F T s F T | F T s F r | F T s F u | F T s F e | F T s F F | F T s F a | F T s F l | F T s F s | F T s F e | F T s a T | F T s a r | F T s a u | F T s a e | F T s a F | F T s a a | F T s a l | F T s a s | F T s a e | F T s l T | F T s l r | F T s l u | F T s l e | F T s l F | F T s l a | F T s l l | F T s l s | F T s l e | F T s s T | F T s s r | F T s s u | F T s s e | F T s s F | F T s s a | F T s s l | F T s s s | F T s s e | F T s e T | F T s e r | F T s e u | F T s e e | F T s e F | F T s e a | F T s e l | F T s e s | F T s e e | F T e T T | F T e T r | F T e T u | F T e T e | F T e T F | F T e T a | F T e T l | F T e T s | F T e T e | F T e r T | F T e r r | F T e r u | F T e r e | F T e r F | F T e r a | F T e r l | F T e r s | F T e r e | F T e u T | F T e u r | F T e u u | F T e u e | F T e u F | F T e u a | F T e u l | F T e u s | F T e u e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F T e F T | F T e F r | F T e F u | F T e F e | F T e F F | F T e F a | F T e F l | F T e F s | F T e F e | F T e a T | F T e a r | F T e a u | F T e a e | F T e a F | F T e a a | F T e a l | F T e a s | F T e a e | F T e l T | F T e l r | F T e l u | F T e l e | F T e l F | F T e l a | F T e l l | F T e l s | F T e l e | F T e s T | F T e s r | F T e s u | F T e s e | F T e s F | F T e s a | F T e s l | F T e s s | F T e s e | F T e e T | F T e e r | F T e e u | F T e e e | F T e e F | F T e e a | F T e e l | F T e e s | F T e e e | F r T T T | F r T T r | F r T T u | F r T T e | F r T T F | F r T T a | F r T T l | F r T T s | F r T T e | F r T r T | F r T r r | F r T r u | F r T r e | F r T r F | F r T r a | F r T r l | F r T r s | F r T r e | F r T u T | F r T u r | F r T u u | F r T u e | F r T u F | F r T u a | F r T u l | F r T u s | F r T u e | F r T e T | F r T e r | F r T e u | F r T e e | F r T e F | F r T e a | F r T e l | F r T e s | F r T e e | F r T F T | F r T F r | F r T F u | F r T F e | F r T F F | F r T F a | F r T F l | F r T F s | F r T F e | F r T a T | F r T a r | F r T a u | F r T a e | F r T a F | F r T a a | F r T a l | F r T a s | F r T a e | F r T l T | F r T l r | F r T l u | F r T l e | F r T l F | F r T l a | F r T l l | F r T l s | F r T l e | F r T s T | F r T s r | F r T s u | F r T s e | F r T s F | F r T s a | F r T s l | F r T s s | F r T s e | F r T e T | F r T e r | F r T e u | F r T e e | F r T e F | F r T e a | F r T e l | F r T e s | F r T e e | F r r T T | F r r T r | F r r T u | F r r T e | F r r T F | F r r T a | F r r T l | F r r T s | F r r T e | F r r r T | F r r r r | F r r r u | F r r r e | F r r r F | F r r r a | F r r r l | F r r r s | F r r r e | F r r u T | F r r u r | F r r u u | F r r u e | F r r u F | F r r u a | F r r u l | F r r u s | F r r u e | F r r e T | F r r e r | F r r e u | F r r e e | F r r e F | F r r e a | F r r e l | F r r e s | F r r e e | F r r F T | F r r F r | F r r F u | F r r F e | F r r F F | F r r F a | F r r F l | F r r F s | F r r F e | F r r a T | F r r a r | F r r a u | F r r a e | F r r a F | F r r a a | F r r a l | F r r a s | F r r a e | F r r l T | F r r l r | F r r l u | F r r l e | F r r l F | F r r l a | F r r l l | F r r l s | F r r l e | F r r s T | F r r s r | F r r s u | F r r s e | F r r s F | F r r s a | F r r s l | F r r s s | F r r s e | F r r e T | F r r e r | F r r e u | F r r e e | F r r e F | F r r e a | F r r e l | F r r e s | F r r e e | F r u T T | F r u T r | F r u T u | F r u T e | F r u T F | F r u T a | F r u T l | F r u T s | F r u T e | F r u r T | F r u r r | F r u r u | F r u r e | F r u r F | F r u r a | F r u r l | F r u r s | F r u r e | F r u u T | F r u u r | F r u u u | F r u u e | F r u u F | F r u u a | F r u u l | F r u u s | F r u u e | F r u e T | F r u e r | F r u e u | F r u e e | F r u e F | F r u e a | F r u e l | F r u e s | F r u e e | F r u F T | F r u F r | F r u F u | F r u F e | F r u F F | F r u F a | F r u F l | F r u F s | F r u F e | F r u a T | F r u a r | F r u a u | F r u a e | F r u a F | F r u a a | F r u a l | F r u a s | F r u a e | F r u l T | F r u l r | F r u l u | F r u l e | F r u l F | F r u l a | F r u l l | F r u l s | F r u l e | F r u s T | F r u s r | F r u s u | F r u s e | F r u s F | F r u s a | F r u s l | F r u s s | F r u s e | F r u e T | F r u e r | F r u e u | F r u e e | F r u e F | F r u e a | F r u e l | F r u e s | F r u e e | F r e T T | F r e T r | F r e T u | F r e T e | F r e T F | F r e T a | F r e T l | F r e T s | F r e T e | F r e r T | F r e r r | F r e r u | F r e r e | F r e r F | F r e r a | F r e r l | F r e r s | F r e r e | F r e u T | F r e u r | F r e u u | F r e u e | F r e u F | F r e u a | F r e u l | F r e u s | F r e u e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r e F T | F r e F r | F r e F u | F r e F e | F r e F F | F r e F a | F r e F l | F r e F s | F r e F e | F r e a T | F r e a r | F r e a u | F r e a e | F r e a F | F r e a a | F r e a l | F r e a s | F r e a e | F r e l T | F r e l r | F r e l u | F r e l e | F r e l F | F r e l a | F r e l l | F r e l s | F r e l e | F r e s T | F r e s r | F r e s u | F r e s e | F r e s F | F r e s a | F r e s l | F r e s s | F r e s e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r F T T | F r F T r | F r F T u | F r F T e | F r F T F | F r F T a | F r F T l | F r F T s | F r F T e | F r F r T | F r F r r | F r F r u | F r F r e | F r F r F | F r F r a | F r F r l | F r F r s | F r F r e | F r F u T | F r F u r | F r F u u | F r F u e | F r F u F | F r F u a | F r F u l | F r F u s | F r F u e | F r F e T | F r F e r | F r F e u | F r F e e | F r F e F | F r F e a | F r F e l | F r F e s | F r F e e | F r F F T | F r F F r | F r F F u | F r F F e | F r F F F | F r F F a | F r F F l | F r F F s | F r F F e | F r F a T | F r F a r | F r F a u | F r F a e | F r F a F | F r F a a | F r F a l | F r F a s | F r F a e | F r F l T | F r F l r | F r F l u | F r F l e | F r F l F | F r F l a | F r F l l | F r F l s | F r F l e | F r F s T | F r F s r | F r F s u | F r F s e | F r F s F | F r F s a | F r F s l | F r F s s | F r F s e | F r F e T | F r F e r | F r F e u | F r F e e | F r F e F | F r F e a | F r F e l | F r F e s | F r F e e | F r a T T | F r a T r | F r a T u | F r a T e | F r a T F | F r a T a | F r a T l | F r a T s | F r a T e | F r a r T | F r a r r | F r a r u | F r a r e | F r a r F | F r a r a | F r a r l | F r a r s | F r a r e | F r a u T | F r a u r | F r a u u | F r a u e | F r a u F | F r a u a | F r a u l | F r a u s | F r a u e | F r a e T | F r a e r | F r a e u | F r a e e | F r a e F | F r a e a | F r a e l | F r a e s | F r a e e | F r a F T | F r a F r | F r a F u | F r a F e | F r a F F | F r a F a | F r a F l | F r a F s | F r a F e | F r a a T | F r a a r | F r a a u | F r a a e | F r a a F | F r a a a | F r a a l | F r a a s | F r a a e | F r a l T | F r a l r | F r a l u | F r a l e | F r a l F | F r a l a | F r a l l | F r a l s | F r a l e | F r a s T | F r a s r | F r a s u | F r a s e | F r a s F | F r a s a | F r a s l | F r a s s | F r a s e | F r a e T | F r a e r | F r a e u | F r a e e | F r a e F | F r a e a | F r a e l | F r a e s | F r a e e | F r l T T | F r l T r | F r l T u | F r l T e | F r l T F | F r l T a | F r l T l | F r l T s | F r l T e | F r l r T | F r l r r | F r l r u | F r l r e | F r l r F | F r l r a | F r l r l | F r l r s | F r l r e | F r l u T | F r l u r | F r l u u | F r l u e | F r l u F | F r l u a | F r l u l | F r l u s | F r l u e | F r l e T | F r l e r | F r l e u | F r l e e | F r l e F | F r l e a | F r l e l | F r l e s | F r l e e | F r l F T | F r l F r | F r l F u | F r l F e | F r l F F | F r l F a | F r l F l | F r l F s | F r l F e | F r l a T | F r l a r | F r l a u | F r l a e | F r l a F | F r l a a | F r l a l | F r l a s | F r l a e | F r l l T | F r l l r | F r l l u | F r l l e | F r l l F | F r l l a | F r l l l | F r l l s | F r l l e | F r l s T | F r l s r | F r l s u | F r l s e | F r l s F | F r l s a | F r l s l | F r l s s | F r l s e | F r l e T | F r l e r | F r l e u | F r l e e | F r l e F | F r l e a | F r l e l | F r l e s | F r l e e | F r s T T | F r s T r | F r s T u | F r s T e | F r s T F | F r s T a | F r s T l | F r s T s | F r s T e | F r s r T | F r s r r | F r s r u | F r s r e | F r s r F | F r s r a | F r s r l | F r s r s | F r s r e | F r s u T | F r s u r | F r s u u | F r s u e | F r s u F | F r s u a | F r s u l | F r s u s | F r s u e | F r s e T | F r s e r | F r s e u | F r s e e | F r s e F | F r s e a | F r s e l | F r s e s | F r s e e | F r s F T | F r s F r | F r s F u | F r s F e | F r s F F | F r s F a | F r s F l | F r s F s | F r s F e | F r s a T | F r s a r | F r s a u | F r s a e | F r s a F | F r s a a | F r s a l | F r s a s | F r s a e | F r s l T | F r s l r | F r s l u | F r s l e | F r s l F | F r s l a | F r s l l | F r s l s | F r s l e | F r s s T | F r s s r | F r s s u | F r s s e | F r s s F | F r s s a | F r s s l | F r s s s | F r s s e | F r s e T | F r s e r | F r s e u | F r s e e | F r s e F | F r s e a | F r s e l | F r s e s | F r s e e | F r e T T | F r e T r | F r e T u | F r e T e | F r e T F | F r e T a | F r e T l | F r e T s | F r e T e | F r e r T | F r e r r | F r e r u | F r e r e | F r e r F | F r e r a | F r e r l | F r e r s | F r e r e | F r e u T | F r e u r | F r e u u | F r e u e | F r e u F | F r e u a | F r e u l | F r e u s | F r e u e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F r e F T | F r e F r | F r e F u | F r e F e | F r e F F | F r e F a | F r e F l | F r e F s | F r e F e | F r e a T | F r e a r | F r e a u | F r e a e | F r e a F | F r e a a | F r e a l | F r e a s | F r e a e | F r e l T | F r e l r | F r e l u | F r e l e | F r e l F | F r e l a | F r e l l | F r e l s | F r e l e | F r e s T | F r e s r | F r e s u | F r e s e | F r e s F | F r e s a | F r e s l | F r e s s | F r e s e | F r e e T | F r e e r | F r e e u | F r e e e | F r e e F | F r e e a | F r e e l | F r e e s | F r e e e | F u T T T | F u T T r | F u T T u | F u T T e | F u T T F | F u T T a | F u T T l | F u T T s | F u T T e | F u T r T | F u T r r | F u T r u | F u T r e | F u T r F | F u T r a | F u T r l | F u T r s | F u T r e | F u T u T | F u T u r | F u T u u | F u T u e | F u T u F | F u T u a | F u T u l | F u T u s | F u T u e | F u T e T | F u T e r | F u T e u | F u T e e | F u T e F | F u T e a | F u T e l | F u T e s | F u T e e | F u T F T | F u T F r | F u T F u | F u T F e | F u T F F | F u T F a | F u T F l | F u T F s | F u T F e | F u T a T | F u T a r | F u T a u | F u T a e | F u T a F | F u T a a | F u T a l | F u T a s | F u T a e | F u T l T | F u T l r | F u T l u | F u T l e | F u T l F | F u T l a | F u T l l | F u T l s | F u T l e | F u T s T | F u T s r | F u T s u | F u T s e | F u T s F | F u T s a | F u T s l | F u T s s | F u T s e | F u T e T | F u T e r | F u T e u | F u T e e | F u T e F | F u T e a | F u T e l | F u T e s | F u T e e | F u r T T | F u r T r | F u r T u | F u r T e | F u r T F | F u r T a | F u r T l | F u r T s | F u r T e | F u r r T | F u r r r | F u r r u | F u r r e | F u r r F | F u r r a | F u r r l | F u r r s | F u r r e | F u r u T | F u r u r | F u r u u | F u r u e | F u r u F | F u r u a | F u r u l | F u r u s | F u r u e | F u r e T | F u r e r | F u r e u | F u r e e | F u r e F | F u r e a | F u r e l | F u r e s | F u r e e | F u r F T | F u r F r | F u r F u | F u r F e | F u r F F | F u r F a | F u r F l | F u r F s | F u r F e | F u r a T | F u r a r | F u r a u | F u r a e | F u r a F | F u r a a | F u r a l | F u r a s | F u r a e | F u r l T | F u r l r | F u r l u | F u r l e | F u r l F | F u r l a | F u r l l | F u r l s | F u r l e | F u r s T | F u r s r | F u r s u | F u r s e | F u r s F | F u r s a | F u r s l | F u r s s | F u r s e | F u r e T | F u r e r | F u r e u | F u r e e | F u r e F | F u r e a | F u r e l | F u r e s | F u r e e | F u u T T | F u u T r | F u u T u | F u u T e | F u u T F | F u u T a | F u u T l | F u u T s | F u u T e | F u u r T | F u u r r | F u u r u | F u u r e | F u u r F | F u u r a | F u u r l | F u u r s | F u u r e | F u u u T | F u u u r | F u u u u | F u u u e | F u u u F | F u u u a | F u u u l | F u u u s | F u u u e | F u u e T | F u u e r | F u u e u | F u u e e | F u u e F | F u u e a | F u u e l | F u u e s | F u u e e | F u u F T | F u u F r | F u u F u | F u u F e | F u u F F | F u u F a | F u u F l | F u u F s | F u u F e | F u u a T | F u u a r | F u u a u | F u u a e | F u u a F | F u u a a | F u u a l | F u u a s | F u u a e | F u u l T | F u u l r | F u u l u | F u u l e | F u u l F | F u u l a | F u u l l | F u u l s | F u u l e | F u u s T | F u u s r | F u u s u | F u u s e | F u u s F | F u u s a | F u u s l | F u u s s | F u u s e | F u u e T | F u u e r | F u u e u | F u u e e | F u u e F | F u u e a | F u u e l | F u u e s | F u u e e | F u e T T | F u e T r | F u e T u | F u e T e | F u e T F | F u e T a | F u e T l | F u e T s | F u e T e | F u e r T | F u e r r | F u e r u | F u e r e | F u e r F | F u e r a | F u e r l | F u e r s | F u e r e | F u e u T | F u e u r | F u e u u | F u e u e | F u e u F | F u e u a | F u e u l | F u e u s | F u e u e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u e F T | F u e F r | F u e F u | F u e F e | F u e F F | F u e F a | F u e F l | F u e F s | F u e F e | F u e a T | F u e a r | F u e a u | F u e a e | F u e a F | F u e a a | F u e a l | F u e a s | F u e a e | F u e l T | F u e l r | F u e l u | F u e l e | F u e l F | F u e l a | F u e l l | F u e l s | F u e l e | F u e s T | F u e s r | F u e s u | F u e s e | F u e s F | F u e s a | F u e s l | F u e s s | F u e s e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u F T T | F u F T r | F u F T u | F u F T e | F u F T F | F u F T a | F u F T l | F u F T s | F u F T e | F u F r T | F u F r r | F u F r u | F u F r e | F u F r F | F u F r a | F u F r l | F u F r s | F u F r e | F u F u T | F u F u r | F u F u u | F u F u e | F u F u F | F u F u a | F u F u l | F u F u s | F u F u e | F u F e T | F u F e r | F u F e u | F u F e e | F u F e F | F u F e a | F u F e l | F u F e s | F u F e e | F u F F T | F u F F r | F u F F u | F u F F e | F u F F F | F u F F a | F u F F l | F u F F s | F u F F e | F u F a T | F u F a r | F u F a u | F u F a e | F u F a F | F u F a a | F u F a l | F u F a s | F u F a e | F u F l T | F u F l r | F u F l u | F u F l e | F u F l F | F u F l a | F u F l l | F u F l s | F u F l e | F u F s T | F u F s r | F u F s u | F u F s e | F u F s F | F u F s a | F u F s l | F u F s s | F u F s e | F u F e T | F u F e r | F u F e u | F u F e e | F u F e F | F u F e a | F u F e l | F u F e s | F u F e e | F u a T T | F u a T r | F u a T u | F u a T e | F u a T F | F u a T a | F u a T l | F u a T s | F u a T e | F u a r T | F u a r r | F u a r u | F u a r e | F u a r F | F u a r a | F u a r l | F u a r s | F u a r e | F u a u T | F u a u r | F u a u u | F u a u e | F u a u F | F u a u a | F u a u l | F u a u s | F u a u e | F u a e T | F u a e r | F u a e u | F u a e e | F u a e F | F u a e a | F u a e l | F u a e s | F u a e e | F u a F T | F u a F r | F u a F u | F u a F e | F u a F F | F u a F a | F u a F l | F u a F s | F u a F e | F u a a T | F u a a r | F u a a u | F u a a e | F u a a F | F u a a a | F u a a l | F u a a s | F u a a e | F u a l T | F u a l r | F u a l u | F u a l e | F u a l F | F u a l a | F u a l l | F u a l s | F u a l e | F u a s T | F u a s r | F u a s u | F u a s e | F u a s F | F u a s a | F u a s l | F u a s s | F u a s e | F u a e T | F u a e r | F u a e u | F u a e e | F u a e F | F u a e a | F u a e l | F u a e s | F u a e e | F u l T T | F u l T r | F u l T u | F u l T e | F u l T F | F u l T a | F u l T l | F u l T s | F u l T e | F u l r T | F u l r r | F u l r u | F u l r e | F u l r F | F u l r a | F u l r l | F u l r s | F u l r e | F u l u T | F u l u r | F u l u u | F u l u e | F u l u F | F u l u a | F u l u l | F u l u s | F u l u e | F u l e T | F u l e r | F u l e u | F u l e e | F u l e F | F u l e a | F u l e l | F u l e s | F u l e e | F u l F T | F u l F r | F u l F u | F u l F e | F u l F F | F u l F a | F u l F l | F u l F s | F u l F e | F u l a T | F u l a r | F u l a u | F u l a e | F u l a F | F u l a a | F u l a l | F u l a s | F u l a e | F u l l T | F u l l r | F u l l u | F u l l e | F u l l F | F u l l a | F u l l l | F u l l s | F u l l e | F u l s T | F u l s r | F u l s u | F u l s e | F u l s F | F u l s a | F u l s l | F u l s s | F u l s e | F u l e T | F u l e r | F u l e u | F u l e e | F u l e F | F u l e a | F u l e l | F u l e s | F u l e e | F u s T T | F u s T r | F u s T u | F u s T e | F u s T F | F u s T a | F u s T l | F u s T s | F u s T e | F u s r T | F u s r r | F u s r u | F u s r e | F u s r F | F u s r a | F u s r l | F u s r s | F u s r e | F u s u T | F u s u r | F u s u u | F u s u e | F u s u F | F u s u a | F u s u l | F u s u s | F u s u e | F u s e T | F u s e r | F u s e u | F u s e e | F u s e F | F u s e a | F u s e l | F u s e s | F u s e e | F u s F T | F u s F r | F u s F u | F u s F e | F u s F F | F u s F a | F u s F l | F u s F s | F u s F e | F u s a T | F u s a r | F u s a u | F u s a e | F u s a F | F u s a a | F u s a l | F u s a s | F u s a e | F u s l T | F u s l r | F u s l u | F u s l e | F u s l F | F u s l a | F u s l l | F u s l s | F u s l e | F u s s T | F u s s r | F u s s u | F u s s e | F u s s F | F u s s a | F u s s l | F u s s s | F u s s e | F u s e T | F u s e r | F u s e u | F u s e e | F u s e F | F u s e a | F u s e l | F u s e s | F u s e e | F u e T T | F u e T r | F u e T u | F u e T e | F u e T F | F u e T a | F u e T l | F u e T s | F u e T e | F u e r T | F u e r r | F u e r u | F u e r e | F u e r F | F u e r a | F u e r l | F u e r s | F u e r e | F u e u T | F u e u r | F u e u u | F u e u e | F u e u F | F u e u a | F u e u l | F u e u s | F u e u e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F u e F T | F u e F r | F u e F u | F u e F e | F u e F F | F u e F a | F u e F l | F u e F s | F u e F e | F u e a T | F u e a r | F u e a u | F u e a e | F u e a F | F u e a a | F u e a l | F u e a s | F u e a e | F u e l T | F u e l r | F u e l u | F u e l e | F u e l F | F u e l a | F u e l l | F u e l s | F u e l e | F u e s T | F u e s r | F u e s u | F u e s e | F u e s F | F u e s a | F u e s l | F u e s s | F u e s e | F u e e T | F u e e r | F u e e u | F u e e e | F u e e F | F u e e a | F u e e l | F u e e s | F u e e e | F e T T T | F e T T r | F e T T u | F e T T e | F e T T F | F e T T a | F e T T l | F e T T s | F e T T e | F e T r T | F e T r r | F e T r u | F e T r e | F e T r F | F e T r a | F e T r l | F e T r s | F e T r e | F e T u T | F e T u r | F e T u u | F e T u e | F e T u F | F e T u a | F e T u l | F e T u s | F e T u e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e T F T | F e T F r | F e T F u | F e T F e | F e T F F | F e T F a | F e T F l | F e T F s | F e T F e | F e T a T | F e T a r | F e T a u | F e T a e | F e T a F | F e T a a | F e T a l | F e T a s | F e T a e | F e T l T | F e T l r | F e T l u | F e T l e | F e T l F | F e T l a | F e T l l | F e T l s | F e T l e | F e T s T | F e T s r | F e T s u | F e T s e | F e T s F | F e T s a | F e T s l | F e T s s | F e T s e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e r T T | F e r T r | F e r T u | F e r T e | F e r T F | F e r T a | F e r T l | F e r T s | F e r T e | F e r r T | F e r r r | F e r r u | F e r r e | F e r r F | F e r r a | F e r r l | F e r r s | F e r r e | F e r u T | F e r u r | F e r u u | F e r u e | F e r u F | F e r u a | F e r u l | F e r u s | F e r u e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e r F T | F e r F r | F e r F u | F e r F e | F e r F F | F e r F a | F e r F l | F e r F s | F e r F e | F e r a T | F e r a r | F e r a u | F e r a e | F e r a F | F e r a a | F e r a l | F e r a s | F e r a e | F e r l T | F e r l r | F e r l u | F e r l e | F e r l F | F e r l a | F e r l l | F e r l s | F e r l e | F e r s T | F e r s r | F e r s u | F e r s e | F e r s F | F e r s a | F e r s l | F e r s s | F e r s e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e u T T | F e u T r | F e u T u | F e u T e | F e u T F | F e u T a | F e u T l | F e u T s | F e u T e | F e u r T | F e u r r | F e u r u | F e u r e | F e u r F | F e u r a | F e u r l | F e u r s | F e u r e | F e u u T | F e u u r | F e u u u | F e u u e | F e u u F | F e u u a | F e u u l | F e u u s | F e u u e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e u F T | F e u F r | F e u F u | F e u F e | F e u F F | F e u F a | F e u F l | F e u F s | F e u F e | F e u a T | F e u a r | F e u a u | F e u a e | F e u a F | F e u a a | F e u a l | F e u a s | F e u a e | F e u l T | F e u l r | F e u l u | F e u l e | F e u l F | F e u l a | F e u l l | F e u l s | F e u l e | F e u s T | F e u s r | F e u s u | F e u s e | F e u s F | F e u s a | F e u s l | F e u s s | F e u s e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e F T T | F e F T r | F e F T u | F e F T e | F e F T F | F e F T a | F e F T l | F e F T s | F e F T e | F e F r T | F e F r r | F e F r u | F e F r e | F e F r F | F e F r a | F e F r l | F e F r s | F e F r e | F e F u T | F e F u r | F e F u u | F e F u e | F e F u F | F e F u a | F e F u l | F e F u s | F e F u e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e F F T | F e F F r | F e F F u | F e F F e | F e F F F | F e F F a | F e F F l | F e F F s | F e F F e | F e F a T | F e F a r | F e F a u | F e F a e | F e F a F | F e F a a | F e F a l | F e F a s | F e F a e | F e F l T | F e F l r | F e F l u | F e F l e | F e F l F | F e F l a | F e F l l | F e F l s | F e F l e | F e F s T | F e F s r | F e F s u | F e F s e | F e F s F | F e F s a | F e F s l | F e F s s | F e F s e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e a T T | F e a T r | F e a T u | F e a T e | F e a T F | F e a T a | F e a T l | F e a T s | F e a T e | F e a r T | F e a r r | F e a r u | F e a r e | F e a r F | F e a r a | F e a r l | F e a r s | F e a r e | F e a u T | F e a u r | F e a u u | F e a u e | F e a u F | F e a u a | F e a u l | F e a u s | F e a u e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e a F T | F e a F r | F e a F u | F e a F e | F e a F F | F e a F a | F e a F l | F e a F s | F e a F e | F e a a T | F e a a r | F e a a u | F e a a e | F e a a F | F e a a a | F e a a l | F e a a s | F e a a e | F e a l T | F e a l r | F e a l u | F e a l e | F e a l F | F e a l a | F e a l l | F e a l s | F e a l e | F e a s T | F e a s r | F e a s u | F e a s e | F e a s F | F e a s a | F e a s l | F e a s s | F e a s e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e l T T | F e l T r | F e l T u | F e l T e | F e l T F | F e l T a | F e l T l | F e l T s | F e l T e | F e l r T | F e l r r | F e l r u | F e l r e | F e l r F | F e l r a | F e l r l | F e l r s | F e l r e | F e l u T | F e l u r | F e l u u | F e l u e | F e l u F | F e l u a | F e l u l | F e l u s | F e l u e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e l F T | F e l F r | F e l F u | F e l F e | F e l F F | F e l F a | F e l F l | F e l F s | F e l F e | F e l a T | F e l a r | F e l a u | F e l a e | F e l a F | F e l a a | F e l a l | F e l a s | F e l a e | F e l l T | F e l l r | F e l l u | F e l l e | F e l l F | F e l l a | F e l l l | F e l l s | F e l l e | F e l s T | F e l s r | F e l s u | F e l s e | F e l s F | F e l s a | F e l s l | F e l s s | F e l s e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e s T T | F e s T r | F e s T u | F e s T e | F e s T F | F e s T a | F e s T l | F e s T s | F e s T e | F e s r T | F e s r r | F e s r u | F e s r e | F e s r F | F e s r a | F e s r l | F e s r s | F e s r e | F e s u T | F e s u r | F e s u u | F e s u e | F e s u F | F e s u a | F e s u l | F e s u s | F e s u e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e s F T | F e s F r | F e s F u | F e s F e | F e s F F | F e s F a | F e s F l | F e s F s | F e s F e | F e s a T | F e s a r | F e s a u | F e s a e | F e s a F | F e s a a | F e s a l | F e s a s | F e s a e | F e s l T | F e s l r | F e s l u | F e s l e | F e s l F | F e s l a | F e s l l | F e s l s | F e s l e | F e s s T | F e s s r | F e s s u | F e s s e | F e s s F | F e s s a | F e s s l | F e s s s | F e s s e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F F T T T | F F T T r | F F T T u | F F T T e | F F T T F | F F T T a | F F T T l | F F T T s | F F T T e | F F T r T | F F T r r | F F T r u | F F T r e | F F T r F | F F T r a | F F T r l | F F T r s | F F T r e | F F T u T | F F T u r | F F T u u | F F T u e | F F T u F | F F T u a | F F T u l | F F T u s | F F T u e | F F T e T | F F T e r | F F T e u | F F T e e | F F T e F | F F T e a | F F T e l | F F T e s | F F T e e | F F T F T | F F T F r | F F T F u | F F T F e | F F T F F | F F T F a | F F T F l | F F T F s | F F T F e | F F T a T | F F T a r | F F T a u | F F T a e | F F T a F | F F T a a | F F T a l | F F T a s | F F T a e | F F T l T | F F T l r | F F T l u | F F T l e | F F T l F | F F T l a | F F T l l | F F T l s | F F T l e | F F T s T | F F T s r | F F T s u | F F T s e | F F T s F | F F T s a | F F T s l | F F T s s | F F T s e | F F T e T | F F T e r | F F T e u | F F T e e | F F T e F | F F T e a | F F T e l | F F T e s | F F T e e | F F r T T | F F r T r | F F r T u | F F r T e | F F r T F | F F r T a | F F r T l | F F r T s | F F r T e | F F r r T | F F r r r | F F r r u | F F r r e | F F r r F | F F r r a | F F r r l | F F r r s | F F r r e | F F r u T | F F r u r | F F r u u | F F r u e | F F r u F | F F r u a | F F r u l | F F r u s | F F r u e | F F r e T | F F r e r | F F r e u | F F r e e | F F r e F | F F r e a | F F r e l | F F r e s | F F r e e | F F r F T | F F r F r | F F r F u | F F r F e | F F r F F | F F r F a | F F r F l | F F r F s | F F r F e | F F r a T | F F r a r | F F r a u | F F r a e | F F r a F | F F r a a | F F r a l | F F r a s | F F r a e | F F r l T | F F r l r | F F r l u | F F r l e | F F r l F | F F r l a | F F r l l | F F r l s | F F r l e | F F r s T | F F r s r | F F r s u | F F r s e | F F r s F | F F r s a | F F r s l | F F r s s | F F r s e | F F r e T | F F r e r | F F r e u | F F r e e | F F r e F | F F r e a | F F r e l | F F r e s | F F r e e | F F u T T | F F u T r | F F u T u | F F u T e | F F u T F | F F u T a | F F u T l | F F u T s | F F u T e | F F u r T | F F u r r | F F u r u | F F u r e | F F u r F | F F u r a | F F u r l | F F u r s | F F u r e | F F u u T | F F u u r | F F u u u | F F u u e | F F u u F | F F u u a | F F u u l | F F u u s | F F u u e | F F u e T | F F u e r | F F u e u | F F u e e | F F u e F | F F u e a | F F u e l | F F u e s | F F u e e | F F u F T | F F u F r | F F u F u | F F u F e | F F u F F | F F u F a | F F u F l | F F u F s | F F u F e | F F u a T | F F u a r | F F u a u | F F u a e | F F u a F | F F u a a | F F u a l | F F u a s | F F u a e | F F u l T | F F u l r | F F u l u | F F u l e | F F u l F | F F u l a | F F u l l | F F u l s | F F u l e | F F u s T | F F u s r | F F u s u | F F u s e | F F u s F | F F u s a | F F u s l | F F u s s | F F u s e | F F u e T | F F u e r | F F u e u | F F u e e | F F u e F | F F u e a | F F u e l | F F u e s | F F u e e | F F e T T | F F e T r | F F e T u | F F e T e | F F e T F | F F e T a | F F e T l | F F e T s | F F e T e | F F e r T | F F e r r | F F e r u | F F e r e | F F e r F | F F e r a | F F e r l | F F e r s | F F e r e | F F e u T | F F e u r | F F e u u | F F e u e | F F e u F | F F e u a | F F e u l | F F e u s | F F e u e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F e F T | F F e F r | F F e F u | F F e F e | F F e F F | F F e F a | F F e F l | F F e F s | F F e F e | F F e a T | F F e a r | F F e a u | F F e a e | F F e a F | F F e a a | F F e a l | F F e a s | F F e a e | F F e l T | F F e l r | F F e l u | F F e l e | F F e l F | F F e l a | F F e l l | F F e l s | F F e l e | F F e s T | F F e s r | F F e s u | F F e s e | F F e s F | F F e s a | F F e s l | F F e s s | F F e s e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F F T T | F F F T r | F F F T u | F F F T e | F F F T F | F F F T a | F F F T l | F F F T s | F F F T e | F F F r T | F F F r r | F F F r u | F F F r e | F F F r F | F F F r a | F F F r l | F F F r s | F F F r e | F F F u T | F F F u r | F F F u u | F F F u e | F F F u F | F F F u a | F F F u l | F F F u s | F F F u e | F F F e T | F F F e r | F F F e u | F F F e e | F F F e F | F F F e a | F F F e l | F F F e s | F F F e e | F F F F T | F F F F r | F F F F u | F F F F e | F F F F F | F F F F a | F F F F l | F F F F s | F F F F e | F F F a T | F F F a r | F F F a u | F F F a e | F F F a F | F F F a a | F F F a l | F F F a s | F F F a e | F F F l T | F F F l r | F F F l u | F F F l e | F F F l F | F F F l a | F F F l l | F F F l s | F F F l e | F F F s T | F F F s r | F F F s u | F F F s e | F F F s F | F F F s a | F F F s l | F F F s s | F F F s e | F F F e T | F F F e r | F F F e u | F F F e e | F F F e F | F F F e a | F F F e l | F F F e s | F F F e e | F F a T T | F F a T r | F F a T u | F F a T e | F F a T F | F F a T a | F F a T l | F F a T s | F F a T e | F F a r T | F F a r r | F F a r u | F F a r e | F F a r F | F F a r a | F F a r l | F F a r s | F F a r e | F F a u T | F F a u r | F F a u u | F F a u e | F F a u F | F F a u a | F F a u l | F F a u s | F F a u e | F F a e T | F F a e r | F F a e u | F F a e e | F F a e F | F F a e a | F F a e l | F F a e s | F F a e e | F F a F T | F F a F r | F F a F u | F F a F e | F F a F F | F F a F a | F F a F l | F F a F s | F F a F e | F F a a T | F F a a r | F F a a u | F F a a e | F F a a F | F F a a a | F F a a l | F F a a s | F F a a e | F F a l T | F F a l r | F F a l u | F F a l e | F F a l F | F F a l a | F F a l l | F F a l s | F F a l e | F F a s T | F F a s r | F F a s u | F F a s e | F F a s F | F F a s a | F F a s l | F F a s s | F F a s e | F F a e T | F F a e r | F F a e u | F F a e e | F F a e F | F F a e a | F F a e l | F F a e s | F F a e e | F F l T T | F F l T r | F F l T u | F F l T e | F F l T F | F F l T a | F F l T l | F F l T s | F F l T e | F F l r T | F F l r r | F F l r u | F F l r e | F F l r F | F F l r a | F F l r l | F F l r s | F F l r e | F F l u T | F F l u r | F F l u u | F F l u e | F F l u F | F F l u a | F F l u l | F F l u s | F F l u e | F F l e T | F F l e r | F F l e u | F F l e e | F F l e F | F F l e a | F F l e l | F F l e s | F F l e e | F F l F T | F F l F r | F F l F u | F F l F e | F F l F F | F F l F a | F F l F l | F F l F s | F F l F e | F F l a T | F F l a r | F F l a u | F F l a e | F F l a F | F F l a a | F F l a l | F F l a s | F F l a e | F F l l T | F F l l r | F F l l u | F F l l e | F F l l F | F F l l a | F F l l l | F F l l s | F F l l e | F F l s T | F F l s r | F F l s u | F F l s e | F F l s F | F F l s a | F F l s l | F F l s s | F F l s e | F F l e T | F F l e r | F F l e u | F F l e e | F F l e F | F F l e a | F F l e l | F F l e s | F F l e e | F F s T T | F F s T r | F F s T u | F F s T e | F F s T F | F F s T a | F F s T l | F F s T s | F F s T e | F F s r T | F F s r r | F F s r u | F F s r e | F F s r F | F F s r a | F F s r l | F F s r s | F F s r e | F F s u T | F F s u r | F F s u u | F F s u e | F F s u F | F F s u a | F F s u l | F F s u s | F F s u e | F F s e T | F F s e r | F F s e u | F F s e e | F F s e F | F F s e a | F F s e l | F F s e s | F F s e e | F F s F T | F F s F r | F F s F u | F F s F e | F F s F F | F F s F a | F F s F l | F F s F s | F F s F e | F F s a T | F F s a r | F F s a u | F F s a e | F F s a F | F F s a a | F F s a l | F F s a s | F F s a e | F F s l T | F F s l r | F F s l u | F F s l e | F F s l F | F F s l a | F F s l l | F F s l s | F F s l e | F F s s T | F F s s r | F F s s u | F F s s e | F F s s F | F F s s a | F F s s l | F F s s s | F F s s e | F F s e T | F F s e r | F F s e u | F F s e e | F F s e F | F F s e a | F F s e l | F F s e s | F F s e e | F F e T T | F F e T r | F F e T u | F F e T e | F F e T F | F F e T a | F F e T l | F F e T s | F F e T e | F F e r T | F F e r r | F F e r u | F F e r e | F F e r F | F F e r a | F F e r l | F F e r s | F F e r e | F F e u T | F F e u r | F F e u u | F F e u e | F F e u F | F F e u a | F F e u l | F F e u s | F F e u e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F F e F T | F F e F r | F F e F u | F F e F e | F F e F F | F F e F a | F F e F l | F F e F s | F F e F e | F F e a T | F F e a r | F F e a u | F F e a e | F F e a F | F F e a a | F F e a l | F F e a s | F F e a e | F F e l T | F F e l r | F F e l u | F F e l e | F F e l F | F F e l a | F F e l l | F F e l s | F F e l e | F F e s T | F F e s r | F F e s u | F F e s e | F F e s F | F F e s a | F F e s l | F F e s s | F F e s e | F F e e T | F F e e r | F F e e u | F F e e e | F F e e F | F F e e a | F F e e l | F F e e s | F F e e e | F a T T T | F a T T r | F a T T u | F a T T e | F a T T F | F a T T a | F a T T l | F a T T s | F a T T e | F a T r T | F a T r r | F a T r u | F a T r e | F a T r F | F a T r a | F a T r l | F a T r s | F a T r e | F a T u T | F a T u r | F a T u u | F a T u e | F a T u F | F a T u a | F a T u l | F a T u s | F a T u e | F a T e T | F a T e r | F a T e u | F a T e e | F a T e F | F a T e a | F a T e l | F a T e s | F a T e e | F a T F T | F a T F r | F a T F u | F a T F e | F a T F F | F a T F a | F a T F l | F a T F s | F a T F e | F a T a T | F a T a r | F a T a u | F a T a e | F a T a F | F a T a a | F a T a l | F a T a s | F a T a e | F a T l T | F a T l r | F a T l u | F a T l e | F a T l F | F a T l a | F a T l l | F a T l s | F a T l e | F a T s T | F a T s r | F a T s u | F a T s e | F a T s F | F a T s a | F a T s l | F a T s s | F a T s e | F a T e T | F a T e r | F a T e u | F a T e e | F a T e F | F a T e a | F a T e l | F a T e s | F a T e e | F a r T T | F a r T r | F a r T u | F a r T e | F a r T F | F a r T a | F a r T l | F a r T s | F a r T e | F a r r T | F a r r r | F a r r u | F a r r e | F a r r F | F a r r a | F a r r l | F a r r s | F a r r e | F a r u T | F a r u r | F a r u u | F a r u e | F a r u F | F a r u a | F a r u l | F a r u s | F a r u e | F a r e T | F a r e r | F a r e u | F a r e e | F a r e F | F a r e a | F a r e l | F a r e s | F a r e e | F a r F T | F a r F r | F a r F u | F a r F e | F a r F F | F a r F a | F a r F l | F a r F s | F a r F e | F a r a T | F a r a r | F a r a u | F a r a e | F a r a F | F a r a a | F a r a l | F a r a s | F a r a e | F a r l T | F a r l r | F a r l u | F a r l e | F a r l F | F a r l a | F a r l l | F a r l s | F a r l e | F a r s T | F a r s r | F a r s u | F a r s e | F a r s F | F a r s a | F a r s l | F a r s s | F a r s e | F a r e T | F a r e r | F a r e u | F a r e e | F a r e F | F a r e a | F a r e l | F a r e s | F a r e e | F a u T T | F a u T r | F a u T u | F a u T e | F a u T F | F a u T a | F a u T l | F a u T s | F a u T e | F a u r T | F a u r r | F a u r u | F a u r e | F a u r F | F a u r a | F a u r l | F a u r s | F a u r e | F a u u T | F a u u r | F a u u u | F a u u e | F a u u F | F a u u a | F a u u l | F a u u s | F a u u e | F a u e T | F a u e r | F a u e u | F a u e e | F a u e F | F a u e a | F a u e l | F a u e s | F a u e e | F a u F T | F a u F r | F a u F u | F a u F e | F a u F F | F a u F a | F a u F l | F a u F s | F a u F e | F a u a T | F a u a r | F a u a u | F a u a e | F a u a F | F a u a a | F a u a l | F a u a s | F a u a e | F a u l T | F a u l r | F a u l u | F a u l e | F a u l F | F a u l a | F a u l l | F a u l s | F a u l e | F a u s T | F a u s r | F a u s u | F a u s e | F a u s F | F a u s a | F a u s l | F a u s s | F a u s e | F a u e T | F a u e r | F a u e u | F a u e e | F a u e F | F a u e a | F a u e l | F a u e s | F a u e e | F a e T T | F a e T r | F a e T u | F a e T e | F a e T F | F a e T a | F a e T l | F a e T s | F a e T e | F a e r T | F a e r r | F a e r u | F a e r e | F a e r F | F a e r a | F a e r l | F a e r s | F a e r e | F a e u T | F a e u r | F a e u u | F a e u e | F a e u F | F a e u a | F a e u l | F a e u s | F a e u e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a e F T | F a e F r | F a e F u | F a e F e | F a e F F | F a e F a | F a e F l | F a e F s | F a e F e | F a e a T | F a e a r | F a e a u | F a e a e | F a e a F | F a e a a | F a e a l | F a e a s | F a e a e | F a e l T | F a e l r | F a e l u | F a e l e | F a e l F | F a e l a | F a e l l | F a e l s | F a e l e | F a e s T | F a e s r | F a e s u | F a e s e | F a e s F | F a e s a | F a e s l | F a e s s | F a e s e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a F T T | F a F T r | F a F T u | F a F T e | F a F T F | F a F T a | F a F T l | F a F T s | F a F T e | F a F r T | F a F r r | F a F r u | F a F r e | F a F r F | F a F r a | F a F r l | F a F r s | F a F r e | F a F u T | F a F u r | F a F u u | F a F u e | F a F u F | F a F u a | F a F u l | F a F u s | F a F u e | F a F e T | F a F e r | F a F e u | F a F e e | F a F e F | F a F e a | F a F e l | F a F e s | F a F e e | F a F F T | F a F F r | F a F F u | F a F F e | F a F F F | F a F F a | F a F F l | F a F F s | F a F F e | F a F a T | F a F a r | F a F a u | F a F a e | F a F a F | F a F a a | F a F a l | F a F a s | F a F a e | F a F l T | F a F l r | F a F l u | F a F l e | F a F l F | F a F l a | F a F l l | F a F l s | F a F l e | F a F s T | F a F s r | F a F s u | F a F s e | F a F s F | F a F s a | F a F s l | F a F s s | F a F s e | F a F e T | F a F e r | F a F e u | F a F e e | F a F e F | F a F e a | F a F e l | F a F e s | F a F e e | F a a T T | F a a T r | F a a T u | F a a T e | F a a T F | F a a T a | F a a T l | F a a T s | F a a T e | F a a r T | F a a r r | F a a r u | F a a r e | F a a r F | F a a r a | F a a r l | F a a r s | F a a r e | F a a u T | F a a u r | F a a u u | F a a u e | F a a u F | F a a u a | F a a u l | F a a u s | F a a u e | F a a e T | F a a e r | F a a e u | F a a e e | F a a e F | F a a e a | F a a e l | F a a e s | F a a e e | F a a F T | F a a F r | F a a F u | F a a F e | F a a F F | F a a F a | F a a F l | F a a F s | F a a F e | F a a a T | F a a a r | F a a a u | F a a a e | F a a a F | F a a a a | F a a a l | F a a a s | F a a a e | F a a l T | F a a l r | F a a l u | F a a l e | F a a l F | F a a l a | F a a l l | F a a l s | F a a l e | F a a s T | F a a s r | F a a s u | F a a s e | F a a s F | F a a s a | F a a s l | F a a s s | F a a s e | F a a e T | F a a e r | F a a e u | F a a e e | F a a e F | F a a e a | F a a e l | F a a e s | F a a e e | F a l T T | F a l T r | F a l T u | F a l T e | F a l T F | F a l T a | F a l T l | F a l T s | F a l T e | F a l r T | F a l r r | F a l r u | F a l r e | F a l r F | F a l r a | F a l r l | F a l r s | F a l r e | F a l u T | F a l u r | F a l u u | F a l u e | F a l u F | F a l u a | F a l u l | F a l u s | F a l u e | F a l e T | F a l e r | F a l e u | F a l e e | F a l e F | F a l e a | F a l e l | F a l e s | F a l e e | F a l F T | F a l F r | F a l F u | F a l F e | F a l F F | F a l F a | F a l F l | F a l F s | F a l F e | F a l a T | F a l a r | F a l a u | F a l a e | F a l a F | F a l a a | F a l a l | F a l a s | F a l a e | F a l l T | F a l l r | F a l l u | F a l l e | F a l l F | F a l l a | F a l l l | F a l l s | F a l l e | F a l s T | F a l s r | F a l s u | F a l s e | F a l s F | F a l s a | F a l s l | F a l s s | F a l s e | F a l e T | F a l e r | F a l e u | F a l e e | F a l e F | F a l e a | F a l e l | F a l e s | F a l e e | F a s T T | F a s T r | F a s T u | F a s T e | F a s T F | F a s T a | F a s T l | F a s T s | F a s T e | F a s r T | F a s r r | F a s r u | F a s r e | F a s r F | F a s r a | F a s r l | F a s r s | F a s r e | F a s u T | F a s u r | F a s u u | F a s u e | F a s u F | F a s u a | F a s u l | F a s u s | F a s u e | F a s e T | F a s e r | F a s e u | F a s e e | F a s e F | F a s e a | F a s e l | F a s e s | F a s e e | F a s F T | F a s F r | F a s F u | F a s F e | F a s F F | F a s F a | F a s F l | F a s F s | F a s F e | F a s a T | F a s a r | F a s a u | F a s a e | F a s a F | F a s a a | F a s a l | F a s a s | F a s a e | F a s l T | F a s l r | F a s l u | F a s l e | F a s l F | F a s l a | F a s l l | F a s l s | F a s l e | F a s s T | F a s s r | F a s s u | F a s s e | F a s s F | F a s s a | F a s s l | F a s s s | F a s s e | F a s e T | F a s e r | F a s e u | F a s e e | F a s e F | F a s e a | F a s e l | F a s e s | F a s e e | F a e T T | F a e T r | F a e T u | F a e T e | F a e T F | F a e T a | F a e T l | F a e T s | F a e T e | F a e r T | F a e r r | F a e r u | F a e r e | F a e r F | F a e r a | F a e r l | F a e r s | F a e r e | F a e u T | F a e u r | F a e u u | F a e u e | F a e u F | F a e u a | F a e u l | F a e u s | F a e u e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F a e F T | F a e F r | F a e F u | F a e F e | F a e F F | F a e F a | F a e F l | F a e F s | F a e F e | F a e a T | F a e a r | F a e a u | F a e a e | F a e a F | F a e a a | F a e a l | F a e a s | F a e a e | F a e l T | F a e l r | F a e l u | F a e l e | F a e l F | F a e l a | F a e l l | F a e l s | F a e l e | F a e s T | F a e s r | F a e s u | F a e s e | F a e s F | F a e s a | F a e s l | F a e s s | F a e s e | F a e e T | F a e e r | F a e e u | F a e e e | F a e e F | F a e e a | F a e e l | F a e e s | F a e e e | F l T T T | F l T T r | F l T T u | F l T T e | F l T T F | F l T T a | F l T T l | F l T T s | F l T T e | F l T r T | F l T r r | F l T r u | F l T r e | F l T r F | F l T r a | F l T r l | F l T r s | F l T r e | F l T u T | F l T u r | F l T u u | F l T u e | F l T u F | F l T u a | F l T u l | F l T u s | F l T u e | F l T e T | F l T e r | F l T e u | F l T e e | F l T e F | F l T e a | F l T e l | F l T e s | F l T e e | F l T F T | F l T F r | F l T F u | F l T F e | F l T F F | F l T F a | F l T F l | F l T F s | F l T F e | F l T a T | F l T a r | F l T a u | F l T a e | F l T a F | F l T a a | F l T a l | F l T a s | F l T a e | F l T l T | F l T l r | F l T l u | F l T l e | F l T l F | F l T l a | F l T l l | F l T l s | F l T l e | F l T s T | F l T s r | F l T s u | F l T s e | F l T s F | F l T s a | F l T s l | F l T s s | F l T s e | F l T e T | F l T e r | F l T e u | F l T e e | F l T e F | F l T e a | F l T e l | F l T e s | F l T e e | F l r T T | F l r T r | F l r T u | F l r T e | F l r T F | F l r T a | F l r T l | F l r T s | F l r T e | F l r r T | F l r r r | F l r r u | F l r r e | F l r r F | F l r r a | F l r r l | F l r r s | F l r r e | F l r u T | F l r u r | F l r u u | F l r u e | F l r u F | F l r u a | F l r u l | F l r u s | F l r u e | F l r e T | F l r e r | F l r e u | F l r e e | F l r e F | F l r e a | F l r e l | F l r e s | F l r e e | F l r F T | F l r F r | F l r F u | F l r F e | F l r F F | F l r F a | F l r F l | F l r F s | F l r F e | F l r a T | F l r a r | F l r a u | F l r a e | F l r a F | F l r a a | F l r a l | F l r a s | F l r a e | F l r l T | F l r l r | F l r l u | F l r l e | F l r l F | F l r l a | F l r l l | F l r l s | F l r l e | F l r s T | F l r s r | F l r s u | F l r s e | F l r s F | F l r s a | F l r s l | F l r s s | F l r s e | F l r e T | F l r e r | F l r e u | F l r e e | F l r e F | F l r e a | F l r e l | F l r e s | F l r e e | F l u T T | F l u T r | F l u T u | F l u T e | F l u T F | F l u T a | F l u T l | F l u T s | F l u T e | F l u r T | F l u r r | F l u r u | F l u r e | F l u r F | F l u r a | F l u r l | F l u r s | F l u r e | F l u u T | F l u u r | F l u u u | F l u u e | F l u u F | F l u u a | F l u u l | F l u u s | F l u u e | F l u e T | F l u e r | F l u e u | F l u e e | F l u e F | F l u e a | F l u e l | F l u e s | F l u e e | F l u F T | F l u F r | F l u F u | F l u F e | F l u F F | F l u F a | F l u F l | F l u F s | F l u F e | F l u a T | F l u a r | F l u a u | F l u a e | F l u a F | F l u a a | F l u a l | F l u a s | F l u a e | F l u l T | F l u l r | F l u l u | F l u l e | F l u l F | F l u l a | F l u l l | F l u l s | F l u l e | F l u s T | F l u s r | F l u s u | F l u s e | F l u s F | F l u s a | F l u s l | F l u s s | F l u s e | F l u e T | F l u e r | F l u e u | F l u e e | F l u e F | F l u e a | F l u e l | F l u e s | F l u e e | F l e T T | F l e T r | F l e T u | F l e T e | F l e T F | F l e T a | F l e T l | F l e T s | F l e T e | F l e r T | F l e r r | F l e r u | F l e r e | F l e r F | F l e r a | F l e r l | F l e r s | F l e r e | F l e u T | F l e u r | F l e u u | F l e u e | F l e u F | F l e u a | F l e u l | F l e u s | F l e u e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l e F T | F l e F r | F l e F u | F l e F e | F l e F F | F l e F a | F l e F l | F l e F s | F l e F e | F l e a T | F l e a r | F l e a u | F l e a e | F l e a F | F l e a a | F l e a l | F l e a s | F l e a e | F l e l T | F l e l r | F l e l u | F l e l e | F l e l F | F l e l a | F l e l l | F l e l s | F l e l e | F l e s T | F l e s r | F l e s u | F l e s e | F l e s F | F l e s a | F l e s l | F l e s s | F l e s e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l F T T | F l F T r | F l F T u | F l F T e | F l F T F | F l F T a | F l F T l | F l F T s | F l F T e | F l F r T | F l F r r | F l F r u | F l F r e | F l F r F | F l F r a | F l F r l | F l F r s | F l F r e | F l F u T | F l F u r | F l F u u | F l F u e | F l F u F | F l F u a | F l F u l | F l F u s | F l F u e | F l F e T | F l F e r | F l F e u | F l F e e | F l F e F | F l F e a | F l F e l | F l F e s | F l F e e | F l F F T | F l F F r | F l F F u | F l F F e | F l F F F | F l F F a | F l F F l | F l F F s | F l F F e | F l F a T | F l F a r | F l F a u | F l F a e | F l F a F | F l F a a | F l F a l | F l F a s | F l F a e | F l F l T | F l F l r | F l F l u | F l F l e | F l F l F | F l F l a | F l F l l | F l F l s | F l F l e | F l F s T | F l F s r | F l F s u | F l F s e | F l F s F | F l F s a | F l F s l | F l F s s | F l F s e | F l F e T | F l F e r | F l F e u | F l F e e | F l F e F | F l F e a | F l F e l | F l F e s | F l F e e | F l a T T | F l a T r | F l a T u | F l a T e | F l a T F | F l a T a | F l a T l | F l a T s | F l a T e | F l a r T | F l a r r | F l a r u | F l a r e | F l a r F | F l a r a | F l a r l | F l a r s | F l a r e | F l a u T | F l a u r | F l a u u | F l a u e | F l a u F | F l a u a | F l a u l | F l a u s | F l a u e | F l a e T | F l a e r | F l a e u | F l a e e | F l a e F | F l a e a | F l a e l | F l a e s | F l a e e | F l a F T | F l a F r | F l a F u | F l a F e | F l a F F | F l a F a | F l a F l | F l a F s | F l a F e | F l a a T | F l a a r | F l a a u | F l a a e | F l a a F | F l a a a | F l a a l | F l a a s | F l a a e | F l a l T | F l a l r | F l a l u | F l a l e | F l a l F | F l a l a | F l a l l | F l a l s | F l a l e | F l a s T | F l a s r | F l a s u | F l a s e | F l a s F | F l a s a | F l a s l | F l a s s | F l a s e | F l a e T | F l a e r | F l a e u | F l a e e | F l a e F | F l a e a | F l a e l | F l a e s | F l a e e | F l l T T | F l l T r | F l l T u | F l l T e | F l l T F | F l l T a | F l l T l | F l l T s | F l l T e | F l l r T | F l l r r | F l l r u | F l l r e | F l l r F | F l l r a | F l l r l | F l l r s | F l l r e | F l l u T | F l l u r | F l l u u | F l l u e | F l l u F | F l l u a | F l l u l | F l l u s | F l l u e | F l l e T | F l l e r | F l l e u | F l l e e | F l l e F | F l l e a | F l l e l | F l l e s | F l l e e | F l l F T | F l l F r | F l l F u | F l l F e | F l l F F | F l l F a | F l l F l | F l l F s | F l l F e | F l l a T | F l l a r | F l l a u | F l l a e | F l l a F | F l l a a | F l l a l | F l l a s | F l l a e | F l l l T | F l l l r | F l l l u | F l l l e | F l l l F | F l l l a | F l l l l | F l l l s | F l l l e | F l l s T | F l l s r | F l l s u | F l l s e | F l l s F | F l l s a | F l l s l | F l l s s | F l l s e | F l l e T | F l l e r | F l l e u | F l l e e | F l l e F | F l l e a | F l l e l | F l l e s | F l l e e | F l s T T | F l s T r | F l s T u | F l s T e | F l s T F | F l s T a | F l s T l | F l s T s | F l s T e | F l s r T | F l s r r | F l s r u | F l s r e | F l s r F | F l s r a | F l s r l | F l s r s | F l s r e | F l s u T | F l s u r | F l s u u | F l s u e | F l s u F | F l s u a | F l s u l | F l s u s | F l s u e | F l s e T | F l s e r | F l s e u | F l s e e | F l s e F | F l s e a | F l s e l | F l s e s | F l s e e | F l s F T | F l s F r | F l s F u | F l s F e | F l s F F | F l s F a | F l s F l | F l s F s | F l s F e | F l s a T | F l s a r | F l s a u | F l s a e | F l s a F | F l s a a | F l s a l | F l s a s | F l s a e | F l s l T | F l s l r | F l s l u | F l s l e | F l s l F | F l s l a | F l s l l | F l s l s | F l s l e | F l s s T | F l s s r | F l s s u | F l s s e | F l s s F | F l s s a | F l s s l | F l s s s | F l s s e | F l s e T | F l s e r | F l s e u | F l s e e | F l s e F | F l s e a | F l s e l | F l s e s | F l s e e | F l e T T | F l e T r | F l e T u | F l e T e | F l e T F | F l e T a | F l e T l | F l e T s | F l e T e | F l e r T | F l e r r | F l e r u | F l e r e | F l e r F | F l e r a | F l e r l | F l e r s | F l e r e | F l e u T | F l e u r | F l e u u | F l e u e | F l e u F | F l e u a | F l e u l | F l e u s | F l e u e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F l e F T | F l e F r | F l e F u | F l e F e | F l e F F | F l e F a | F l e F l | F l e F s | F l e F e | F l e a T | F l e a r | F l e a u | F l e a e | F l e a F | F l e a a | F l e a l | F l e a s | F l e a e | F l e l T | F l e l r | F l e l u | F l e l e | F l e l F | F l e l a | F l e l l | F l e l s | F l e l e | F l e s T | F l e s r | F l e s u | F l e s e | F l e s F | F l e s a | F l e s l | F l e s s | F l e s e | F l e e T | F l e e r | F l e e u | F l e e e | F l e e F | F l e e a | F l e e l | F l e e s | F l e e e | F s T T T | F s T T r | F s T T u | F s T T e | F s T T F | F s T T a | F s T T l | F s T T s | F s T T e | F s T r T | F s T r r | F s T r u | F s T r e | F s T r F | F s T r a | F s T r l | F s T r s | F s T r e | F s T u T | F s T u r | F s T u u | F s T u e | F s T u F | F s T u a | F s T u l | F s T u s | F s T u e | F s T e T | F s T e r | F s T e u | F s T e e | F s T e F | F s T e a | F s T e l | F s T e s | F s T e e | F s T F T | F s T F r | F s T F u | F s T F e | F s T F F | F s T F a | F s T F l | F s T F s | F s T F e | F s T a T | F s T a r | F s T a u | F s T a e | F s T a F | F s T a a | F s T a l | F s T a s | F s T a e | F s T l T | F s T l r | F s T l u | F s T l e | F s T l F | F s T l a | F s T l l | F s T l s | F s T l e | F s T s T | F s T s r | F s T s u | F s T s e | F s T s F | F s T s a | F s T s l | F s T s s | F s T s e | F s T e T | F s T e r | F s T e u | F s T e e | F s T e F | F s T e a | F s T e l | F s T e s | F s T e e | F s r T T | F s r T r | F s r T u | F s r T e | F s r T F | F s r T a | F s r T l | F s r T s | F s r T e | F s r r T | F s r r r | F s r r u | F s r r e | F s r r F | F s r r a | F s r r l | F s r r s | F s r r e | F s r u T | F s r u r | F s r u u | F s r u e | F s r u F | F s r u a | F s r u l | F s r u s | F s r u e | F s r e T | F s r e r | F s r e u | F s r e e | F s r e F | F s r e a | F s r e l | F s r e s | F s r e e | F s r F T | F s r F r | F s r F u | F s r F e | F s r F F | F s r F a | F s r F l | F s r F s | F s r F e | F s r a T | F s r a r | F s r a u | F s r a e | F s r a F | F s r a a | F s r a l | F s r a s | F s r a e | F s r l T | F s r l r | F s r l u | F s r l e | F s r l F | F s r l a | F s r l l | F s r l s | F s r l e | F s r s T | F s r s r | F s r s u | F s r s e | F s r s F | F s r s a | F s r s l | F s r s s | F s r s e | F s r e T | F s r e r | F s r e u | F s r e e | F s r e F | F s r e a | F s r e l | F s r e s | F s r e e | F s u T T | F s u T r | F s u T u | F s u T e | F s u T F | F s u T a | F s u T l | F s u T s | F s u T e | F s u r T | F s u r r | F s u r u | F s u r e | F s u r F | F s u r a | F s u r l | F s u r s | F s u r e | F s u u T | F s u u r | F s u u u | F s u u e | F s u u F | F s u u a | F s u u l | F s u u s | F s u u e | F s u e T | F s u e r | F s u e u | F s u e e | F s u e F | F s u e a | F s u e l | F s u e s | F s u e e | F s u F T | F s u F r | F s u F u | F s u F e | F s u F F | F s u F a | F s u F l | F s u F s | F s u F e | F s u a T | F s u a r | F s u a u | F s u a e | F s u a F | F s u a a | F s u a l | F s u a s | F s u a e | F s u l T | F s u l r | F s u l u | F s u l e | F s u l F | F s u l a | F s u l l | F s u l s | F s u l e | F s u s T | F s u s r | F s u s u | F s u s e | F s u s F | F s u s a | F s u s l | F s u s s | F s u s e | F s u e T | F s u e r | F s u e u | F s u e e | F s u e F | F s u e a | F s u e l | F s u e s | F s u e e | F s e T T | F s e T r | F s e T u | F s e T e | F s e T F | F s e T a | F s e T l | F s e T s | F s e T e | F s e r T | F s e r r | F s e r u | F s e r e | F s e r F | F s e r a | F s e r l | F s e r s | F s e r e | F s e u T | F s e u r | F s e u u | F s e u e | F s e u F | F s e u a | F s e u l | F s e u s | F s e u e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s e F T | F s e F r | F s e F u | F s e F e | F s e F F | F s e F a | F s e F l | F s e F s | F s e F e | F s e a T | F s e a r | F s e a u | F s e a e | F s e a F | F s e a a | F s e a l | F s e a s | F s e a e | F s e l T | F s e l r | F s e l u | F s e l e | F s e l F | F s e l a | F s e l l | F s e l s | F s e l e | F s e s T | F s e s r | F s e s u | F s e s e | F s e s F | F s e s a | F s e s l | F s e s s | F s e s e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s F T T | F s F T r | F s F T u | F s F T e | F s F T F | F s F T a | F s F T l | F s F T s | F s F T e | F s F r T | F s F r r | F s F r u | F s F r e | F s F r F | F s F r a | F s F r l | F s F r s | F s F r e | F s F u T | F s F u r | F s F u u | F s F u e | F s F u F | F s F u a | F s F u l | F s F u s | F s F u e | F s F e T | F s F e r | F s F e u | F s F e e | F s F e F | F s F e a | F s F e l | F s F e s | F s F e e | F s F F T | F s F F r | F s F F u | F s F F e | F s F F F | F s F F a | F s F F l | F s F F s | F s F F e | F s F a T | F s F a r | F s F a u | F s F a e | F s F a F | F s F a a | F s F a l | F s F a s | F s F a e | F s F l T | F s F l r | F s F l u | F s F l e | F s F l F | F s F l a | F s F l l | F s F l s | F s F l e | F s F s T | F s F s r | F s F s u | F s F s e | F s F s F | F s F s a | F s F s l | F s F s s | F s F s e | F s F e T | F s F e r | F s F e u | F s F e e | F s F e F | F s F e a | F s F e l | F s F e s | F s F e e | F s a T T | F s a T r | F s a T u | F s a T e | F s a T F | F s a T a | F s a T l | F s a T s | F s a T e | F s a r T | F s a r r | F s a r u | F s a r e | F s a r F | F s a r a | F s a r l | F s a r s | F s a r e | F s a u T | F s a u r | F s a u u | F s a u e | F s a u F | F s a u a | F s a u l | F s a u s | F s a u e | F s a e T | F s a e r | F s a e u | F s a e e | F s a e F | F s a e a | F s a e l | F s a e s | F s a e e | F s a F T | F s a F r | F s a F u | F s a F e | F s a F F | F s a F a | F s a F l | F s a F s | F s a F e | F s a a T | F s a a r | F s a a u | F s a a e | F s a a F | F s a a a | F s a a l | F s a a s | F s a a e | F s a l T | F s a l r | F s a l u | F s a l e | F s a l F | F s a l a | F s a l l | F s a l s | F s a l e | F s a s T | F s a s r | F s a s u | F s a s e | F s a s F | F s a s a | F s a s l | F s a s s | F s a s e | F s a e T | F s a e r | F s a e u | F s a e e | F s a e F | F s a e a | F s a e l | F s a e s | F s a e e | F s l T T | F s l T r | F s l T u | F s l T e | F s l T F | F s l T a | F s l T l | F s l T s | F s l T e | F s l r T | F s l r r | F s l r u | F s l r e | F s l r F | F s l r a | F s l r l | F s l r s | F s l r e | F s l u T | F s l u r | F s l u u | F s l u e | F s l u F | F s l u a | F s l u l | F s l u s | F s l u e | F s l e T | F s l e r | F s l e u | F s l e e | F s l e F | F s l e a | F s l e l | F s l e s | F s l e e | F s l F T | F s l F r | F s l F u | F s l F e | F s l F F | F s l F a | F s l F l | F s l F s | F s l F e | F s l a T | F s l a r | F s l a u | F s l a e | F s l a F | F s l a a | F s l a l | F s l a s | F s l a e | F s l l T | F s l l r | F s l l u | F s l l e | F s l l F | F s l l a | F s l l l | F s l l s | F s l l e | F s l s T | F s l s r | F s l s u | F s l s e | F s l s F | F s l s a | F s l s l | F s l s s | F s l s e | F s l e T | F s l e r | F s l e u | F s l e e | F s l e F | F s l e a | F s l e l | F s l e s | F s l e e | F s s T T | F s s T r | F s s T u | F s s T e | F s s T F | F s s T a | F s s T l | F s s T s | F s s T e | F s s r T | F s s r r | F s s r u | F s s r e | F s s r F | F s s r a | F s s r l | F s s r s | F s s r e | F s s u T | F s s u r | F s s u u | F s s u e | F s s u F | F s s u a | F s s u l | F s s u s | F s s u e | F s s e T | F s s e r | F s s e u | F s s e e | F s s e F | F s s e a | F s s e l | F s s e s | F s s e e | F s s F T | F s s F r | F s s F u | F s s F e | F s s F F | F s s F a | F s s F l | F s s F s | F s s F e | F s s a T | F s s a r | F s s a u | F s s a e | F s s a F | F s s a a | F s s a l | F s s a s | F s s a e | F s s l T | F s s l r | F s s l u | F s s l e | F s s l F | F s s l a | F s s l l | F s s l s | F s s l e | F s s s T | F s s s r | F s s s u | F s s s e | F s s s F | F s s s a | F s s s l | F s s s s | F s s s e | F s s e T | F s s e r | F s s e u | F s s e e | F s s e F | F s s e a | F s s e l | F s s e s | F s s e e | F s e T T | F s e T r | F s e T u | F s e T e | F s e T F | F s e T a | F s e T l | F s e T s | F s e T e | F s e r T | F s e r r | F s e r u | F s e r e | F s e r F | F s e r a | F s e r l | F s e r s | F s e r e | F s e u T | F s e u r | F s e u u | F s e u e | F s e u F | F s e u a | F s e u l | F s e u s | F s e u e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F s e F T | F s e F r | F s e F u | F s e F e | F s e F F | F s e F a | F s e F l | F s e F s | F s e F e | F s e a T | F s e a r | F s e a u | F s e a e | F s e a F | F s e a a | F s e a l | F s e a s | F s e a e | F s e l T | F s e l r | F s e l u | F s e l e | F s e l F | F s e l a | F s e l l | F s e l s | F s e l e | F s e s T | F s e s r | F s e s u | F s e s e | F s e s F | F s e s a | F s e s l | F s e s s | F s e s e | F s e e T | F s e e r | F s e e u | F s e e e | F s e e F | F s e e a | F s e e l | F s e e s | F s e e e | F e T T T | F e T T r | F e T T u | F e T T e | F e T T F | F e T T a | F e T T l | F e T T s | F e T T e | F e T r T | F e T r r | F e T r u | F e T r e | F e T r F | F e T r a | F e T r l | F e T r s | F e T r e | F e T u T | F e T u r | F e T u u | F e T u e | F e T u F | F e T u a | F e T u l | F e T u s | F e T u e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e T F T | F e T F r | F e T F u | F e T F e | F e T F F | F e T F a | F e T F l | F e T F s | F e T F e | F e T a T | F e T a r | F e T a u | F e T a e | F e T a F | F e T a a | F e T a l | F e T a s | F e T a e | F e T l T | F e T l r | F e T l u | F e T l e | F e T l F | F e T l a | F e T l l | F e T l s | F e T l e | F e T s T | F e T s r | F e T s u | F e T s e | F e T s F | F e T s a | F e T s l | F e T s s | F e T s e | F e T e T | F e T e r | F e T e u | F e T e e | F e T e F | F e T e a | F e T e l | F e T e s | F e T e e | F e r T T | F e r T r | F e r T u | F e r T e | F e r T F | F e r T a | F e r T l | F e r T s | F e r T e | F e r r T | F e r r r | F e r r u | F e r r e | F e r r F | F e r r a | F e r r l | F e r r s | F e r r e | F e r u T | F e r u r | F e r u u | F e r u e | F e r u F | F e r u a | F e r u l | F e r u s | F e r u e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e r F T | F e r F r | F e r F u | F e r F e | F e r F F | F e r F a | F e r F l | F e r F s | F e r F e | F e r a T | F e r a r | F e r a u | F e r a e | F e r a F | F e r a a | F e r a l | F e r a s | F e r a e | F e r l T | F e r l r | F e r l u | F e r l e | F e r l F | F e r l a | F e r l l | F e r l s | F e r l e | F e r s T | F e r s r | F e r s u | F e r s e | F e r s F | F e r s a | F e r s l | F e r s s | F e r s e | F e r e T | F e r e r | F e r e u | F e r e e | F e r e F | F e r e a | F e r e l | F e r e s | F e r e e | F e u T T | F e u T r | F e u T u | F e u T e | F e u T F | F e u T a | F e u T l | F e u T s | F e u T e | F e u r T | F e u r r | F e u r u | F e u r e | F e u r F | F e u r a | F e u r l | F e u r s | F e u r e | F e u u T | F e u u r | F e u u u | F e u u e | F e u u F | F e u u a | F e u u l | F e u u s | F e u u e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e u F T | F e u F r | F e u F u | F e u F e | F e u F F | F e u F a | F e u F l | F e u F s | F e u F e | F e u a T | F e u a r | F e u a u | F e u a e | F e u a F | F e u a a | F e u a l | F e u a s | F e u a e | F e u l T | F e u l r | F e u l u | F e u l e | F e u l F | F e u l a | F e u l l | F e u l s | F e u l e | F e u s T | F e u s r | F e u s u | F e u s e | F e u s F | F e u s a | F e u s l | F e u s s | F e u s e | F e u e T | F e u e r | F e u e u | F e u e e | F e u e F | F e u e a | F e u e l | F e u e s | F e u e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e F T T | F e F T r | F e F T u | F e F T e | F e F T F | F e F T a | F e F T l | F e F T s | F e F T e | F e F r T | F e F r r | F e F r u | F e F r e | F e F r F | F e F r a | F e F r l | F e F r s | F e F r e | F e F u T | F e F u r | F e F u u | F e F u e | F e F u F | F e F u a | F e F u l | F e F u s | F e F u e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e F F T | F e F F r | F e F F u | F e F F e | F e F F F | F e F F a | F e F F l | F e F F s | F e F F e | F e F a T | F e F a r | F e F a u | F e F a e | F e F a F | F e F a a | F e F a l | F e F a s | F e F a e | F e F l T | F e F l r | F e F l u | F e F l e | F e F l F | F e F l a | F e F l l | F e F l s | F e F l e | F e F s T | F e F s r | F e F s u | F e F s e | F e F s F | F e F s a | F e F s l | F e F s s | F e F s e | F e F e T | F e F e r | F e F e u | F e F e e | F e F e F | F e F e a | F e F e l | F e F e s | F e F e e | F e a T T | F e a T r | F e a T u | F e a T e | F e a T F | F e a T a | F e a T l | F e a T s | F e a T e | F e a r T | F e a r r | F e a r u | F e a r e | F e a r F | F e a r a | F e a r l | F e a r s | F e a r e | F e a u T | F e a u r | F e a u u | F e a u e | F e a u F | F e a u a | F e a u l | F e a u s | F e a u e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e a F T | F e a F r | F e a F u | F e a F e | F e a F F | F e a F a | F e a F l | F e a F s | F e a F e | F e a a T | F e a a r | F e a a u | F e a a e | F e a a F | F e a a a | F e a a l | F e a a s | F e a a e | F e a l T | F e a l r | F e a l u | F e a l e | F e a l F | F e a l a | F e a l l | F e a l s | F e a l e | F e a s T | F e a s r | F e a s u | F e a s e | F e a s F | F e a s a | F e a s l | F e a s s | F e a s e | F e a e T | F e a e r | F e a e u | F e a e e | F e a e F | F e a e a | F e a e l | F e a e s | F e a e e | F e l T T | F e l T r | F e l T u | F e l T e | F e l T F | F e l T a | F e l T l | F e l T s | F e l T e | F e l r T | F e l r r | F e l r u | F e l r e | F e l r F | F e l r a | F e l r l | F e l r s | F e l r e | F e l u T | F e l u r | F e l u u | F e l u e | F e l u F | F e l u a | F e l u l | F e l u s | F e l u e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e l F T | F e l F r | F e l F u | F e l F e | F e l F F | F e l F a | F e l F l | F e l F s | F e l F e | F e l a T | F e l a r | F e l a u | F e l a e | F e l a F | F e l a a | F e l a l | F e l a s | F e l a e | F e l l T | F e l l r | F e l l u | F e l l e | F e l l F | F e l l a | F e l l l | F e l l s | F e l l e | F e l s T | F e l s r | F e l s u | F e l s e | F e l s F | F e l s a | F e l s l | F e l s s | F e l s e | F e l e T | F e l e r | F e l e u | F e l e e | F e l e F | F e l e a | F e l e l | F e l e s | F e l e e | F e s T T | F e s T r | F e s T u | F e s T e | F e s T F | F e s T a | F e s T l | F e s T s | F e s T e | F e s r T | F e s r r | F e s r u | F e s r e | F e s r F | F e s r a | F e s r l | F e s r s | F e s r e | F e s u T | F e s u r | F e s u u | F e s u e | F e s u F | F e s u a | F e s u l | F e s u s | F e s u e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e s F T | F e s F r | F e s F u | F e s F e | F e s F F | F e s F a | F e s F l | F e s F s | F e s F e | F e s a T | F e s a r | F e s a u | F e s a e | F e s a F | F e s a a | F e s a l | F e s a s | F e s a e | F e s l T | F e s l r | F e s l u | F e s l e | F e s l F | F e s l a | F e s l l | F e s l s | F e s l e | F e s s T | F e s s r | F e s s u | F e s s e | F e s s F | F e s s a | F e s s l | F e s s s | F e s s e | F e s e T | F e s e r | F e s e u | F e s e e | F e s e F | F e s e a | F e s e l | F e s e s | F e s e e | F e e T T | F e e T r | F e e T u | F e e T e | F e e T F | F e e T a | F e e T l | F e e T s | F e e T e | F e e r T | F e e r r | F e e r u | F e e r e | F e e r F | F e e r a | F e e r l | F e e r s | F e e r e | F e e u T | F e e u r | F e e u u | F e e u e | F e e u F | F e e u a | F e e u l | F e e u s | F e e u e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F e e F T | F e e F r | F e e F u | F e e F e | F e e F F | F e e F a | F e e F l | F e e F s | F e e F e | F e e a T | F e e a r | F e e a u | F e e a e | F e e a F | F e e a a | F e e a l | F e e a s | F e e a e | F e e l T | F e e l r | F e e l u | F e e l e | F e e l F | F e e l a | F e e l l | F e e l s | F e e l e | F e e s T | F e e s r | F e e s u | F e e s e | F e e s F | F e e s a | F e e s l | F e e s s | F e e s e | F e e e T | F e e e r | F e e e u | F e e e e | F e e e F | F e e e a | F e e e l | F e e e s | F e e e e | F .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/12/14/Algorithm_Hacks.html",
            "relUrl": "/2022/12/14/Algorithm_Hacks.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Binary Calculator",
            "content": "&lt;html&gt; &lt;head&gt; &lt;title&gt;Binary Calculator&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Binary Calculator&lt;/h1&gt; &lt;form&gt; &lt;input type=&quot;text&quot; id=&quot;first-number&quot; placeholder=&quot;First Number&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;second-number&quot; placeholder=&quot;Second Number&quot;&gt; &lt;button type=&quot;button&quot; id=&quot;add-button&quot;&gt;+&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;subtract-button&quot;&gt;-&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;multiply-button&quot;&gt;*&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;divide-button&quot;&gt;/&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;modulo-button&quot;&gt;%&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;clear-button&quot;&gt;Clear&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;/form&gt; &lt;script&gt; function binaryToDecimal(binary) { var decimal = 0; var power = 0; for (var i = binary.length - 1; i &gt;= 0; i--) { decimal += binary[i] * Math.pow(2, power); power++; } return decimal; } function decimalToBinary(decimal) { var binary = &quot;&quot;; while (decimal &gt; 0) { binary = decimal % 2 + binary; decimal = Math.floor(decimal / 2); } return binary; } function add(a, b) { return a + b; } function subtract(a, b) { return a - b; } function multiply(a, b) { return a * b; } function divide(a, b) { return a / b; } function modulo(a, b) { return a % b; } function calculate(a, b, operation) { var decimalA = binaryToDecimal(a); var decimalB = binaryToDecimal(b); var decimalResult = operation(decimalA, decimalB); var binaryResult = decimalToBinary(decimalResult); return binaryResult; } var firstNumber = document.getElementById(&quot;first-number&quot;); var secondNumber = document.getElementById(&quot;second-number&quot;); var addButton = document.getElementById(&quot;add-button&quot;); var subtractButton = document.getElementById(&quot;subtract-button&quot;); var moduloButton = document.getElementById(&quot;modulo-button&quot;); var clearButton = document.getElementById(&quot;clear-button&quot;); var result = document.getElementById(&quot;result&quot;); addButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, add); }); subtractButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, subtract); }); multiplyButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, multiply); }); divideButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, divide); }); moduloButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, modulo); }); clearButton.addEventListener(&quot;click&quot;, function() { firstNumber.value = &quot;&quot;; secondNumber.value = &quot;&quot;; result.innerHTML = &quot;&quot;; }); &lt;/script&gt; &lt;/body&gt; &lt;/html var multiplyButton = document.getElementById(&quot;multiply-button&quot;); var divideButton = document.getElementById(&quot;divide-button&quot;); var moduloButton = document.getElementById(&quot;modulo-button&quot;); var clearButton = document.getElementById(&quot;clear-button&quot;); var result = document.getElementById(&quot;result&quot;); addButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, add); }); subtractButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, subtract); }); multiplyButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, multiply); }); divideButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, divide); }); moduloButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, modulo); }); clearButton.addEventListener(&quot;click&quot;, function() { firstNumber.value = &quot;&quot;; secondNumber.value = &quot;&quot;; result.innerHTML = &quot;&quot;; }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . File &lt;tokenize&gt;:112 &lt;/script&gt; ^ IndentationError: unindent does not match any outer indentation level .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/binary/calculator/2022/12/14/.binarycalc.html",
            "relUrl": "/binary/calculator/2022/12/14/.binarycalc.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Hacks Section 16",
            "content": "Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . To test the safety of a car, a simulation can be ran to test out different outcomes depending on the force of the crash. A simulation of this would help to reduce the costs and effects of physically performing crash tests for a car. . Hack #2 . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . Welcome to the Simulations Quiz! True or False: Simulations will always have the same result. A: True, B: False You said: B Correct! True or False: A simulation has results that are more accurate than an experiment A: True, B: False You said: B Correct! True or False: A simulation can model real world events that are not practical for experiments A: True, B: False You said: A Correct! Which one of these is FALSE regarding simulations A: Reduces Costs, B: Is safer than real life experiments, C: More Efficient, D: More accurate than real life experiments You said: D Correct! Which of the following scenarios would be the LEAST beneficial to have as a simulation A: A retail company wants to identify the item which sold the most on their website, B: A restaurant wants to determine if the use of robots will increase efficiency, C: An insurance company wants to study the impact of rain on car accidents, D: A sports car company wants to study design changes to their new bike design You said: A Correct! Which of the following is better to do as a simulation than as a calculation A: Keeping score at a basketball game, B: Keeping track of how many games a person has won, C: Determining the average grade for a group of tests, D: Studying the impact of carbon emissions on the environment You said: D Correct! You scored: 6 /6 . Hack #3 . Describe the rolling dice simulation (answer guiding questions) | . 1) What makes it a simulation? The dice simulation is a proper simulation because it imitates the process of rolling a dice in a randomized manner from the numbers 1 through 6. . 2) What are it’s advantages and disadvantages? The simulation allows the dice roll to be quickly and easily carried out. The disadvantage of the simulation is that it is purely mathematical, it does not account for any sorts of physical forces (ie. dents, cracks, etc.) that may affect the dice roll in a real-life scenario. . 3) In your opinion, would an experiment be better in this situation? In my opinion, I believe that a simulation would work better than an experiment - as it disregards human errors such as various forms of rolling, or physical alterations to the dice. . Hack #4 . Add a feature onto the rolling dice simulation ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) . 14 sided dice! | . import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 14) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-14] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;You rolled:&quot;, roll_results) . You rolled: [11, 6] . Extra Work . Going over John Conway&#39;s Game of Life . John Conway&#39;s Game of Life is a cellular automaton game, meaning it consists of a grid of cells that change state based on a set of rules and the states of their neighbors. The game was developed by John Conway in 1970 and has since become a popular subject in mathematics and computer science. . The game consists of a 2-dimensional grid of cells, each of which can have one of two states: &quot;alive&quot; or &quot;dead&quot;. A cell is considered alive if it has two or three neighbors that are alive, and is considered dead if it has fewer than two neighbors or more than three neighbors. The cells then evolve over time based on these rules. . At each step of the game, any live cell with fewer than two or more than three live neighbors dies, as if by underpopulation or overpopulation. Any deceased cell that has three living neighbors shall turn into a live cell - simulating reproduction. All other cells remain unchanged. . The game can be implemented in many ways, but is often seen as a &quot;zero-player&quot; game, meaning that once the initial setup is complete, the game proceeds by itself. As a result, it has been used to study the behavior of complex systems and to explore emergent behavior. . import random def gamble(your_spin): result = [] for _ in range (your_spin): spin = random.randint(1, 7) your_spin.append(spin) return result spin_num = 3 result = gamble(spin_num) print(&quot;Your roll: &quot;, result) # Not finished . AttributeError Traceback (most recent call last) c: Users etran .vscode fastpages_EthanT _notebooks 2022-12-13-Unit-3-Section-16-Hacks.ipynb Cell 8 in &lt;cell line: 11&gt;() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/2022-12-13-Unit-3-Section-16-Hacks.ipynb#X13sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; return result &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/2022-12-13-Unit-3-Section-16-Hacks.ipynb#X13sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; spin_num = 3 &gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/2022-12-13-Unit-3-Section-16-Hacks.ipynb#X13sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; result = gamble(spin_num) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/2022-12-13-Unit-3-Section-16-Hacks.ipynb#X13sZmlsZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; print(&#34;Your roll: &#34;, result) c: Users etran .vscode fastpages_EthanT _notebooks 2022-12-13-Unit-3-Section-16-Hacks.ipynb Cell 8 in gamble(your_spin) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/2022-12-13-Unit-3-Section-16-Hacks.ipynb#X13sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; for _ in range (your_spin): &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/2022-12-13-Unit-3-Section-16-Hacks.ipynb#X13sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; spin = random.randint(1, 7) -&gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/2022-12-13-Unit-3-Section-16-Hacks.ipynb#X13sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; your_spin.append(spin) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/.vscode/fastpages_EthanT/_notebooks/2022-12-13-Unit-3-Section-16-Hacks.ipynb#X13sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; return result AttributeError: &#39;int&#39; object has no attribute &#39;append&#39; .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/12/13/Unit-3-Section-16-Hacks.html",
            "relUrl": "/2022/12/13/Unit-3-Section-16-Hacks.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "CompSci / Technical Business Panel Notes",
            "content": "Kathyleen Beveridge . 1) Background: . MBA, USC | BS in Finance, Santa Clara University | Switched from finance to high tech in 2005 | Sr. Director of Commercial and Marketing Operations (Thermo Fisher Scientific) | Director of Commercial Excellence (Thermo Fisher Scientific) | Used databases and data science for predictions on when and where to sell specific products | Mission Statements | HP Inc: Create technology that makes life better for everyone, everywhere | Qualcomm: Investing tech that the world loves | Thermo Fisher Scientific: Enable our customers to make the world healthier, cleaner, and safer | Companies that create products, thus, their mission statements are based upon satisfying and meeting the needs of their customers | . 2) Conclusion: . Worked for companies that had a macro impact on the lives of their users/customers | “No matter what you choose to do…[you] can make an impact on the world.” | Agile Methodology: | Short sprints to plan out work in short increments/ in a matter of a few months. | . Kris Porter . 1) Background: . UCLA, Electrical engineering | Master’s in electrical engineering, Cal State LA | Software Engineer - SRE | Infrastructure Engineer | Research | Center for Embedded Networked Sensors | Networked Info Mechanical Systems NIMS | Introduced to Linux Operating System, Software Development Life Cycle | . 2) Career: . Worked with virtual servers, data collection, and automation | Systems Engineer at GPM (startup) | Infrastructure at NBC Universal, Streaming media | DevOps at Qualcomm - Machine learning and deep learning, used Python libraries and data to determine when to archive and delete repositories on GitLab | Twitter - APIs and data centers, migrating HomeTimeline to GraphQL | Twitter University (formal training on the company’s systems, tools, management, etc.) | Currently at Mystem Labs | Agile Methodology: | Group of 150 engineers that interacted and planned together through the use of meetings - developed a road map of projects. | . Conclusion Question: . 1) What are some of the most important skills for the tech industry? . Mr. Porter . “Learning how to learn” - ie. programming languages, infrastructures, etc. Stay resilient when going into/finding work, stay confident | . Mrs. Beveridge . Continuous learning | Be adaptive | Have the ability to listen to requirements and translate your work into how technology can serve those needs | Be prepared for interviews | . Key Takeaways . Overall, I really enjoyed the CompSci / Technical Business panel, as it was quite informative. Hearing from the perspectives of Mrs. Beveridge and Mr. Porter helped to open my eyes for a career in tech. I learned about the many types of jobs within the field of computer science, as well as the importance of working in teams; holding meetings, such as the ones we have with our Scrum Teams can help prepare us for our real-world jobs. From Mrs. Beveridge&#39;s presentation, I found it interesting that though our work may seem small in a field of many, in her own words, “No matter what you choose to do…[you] can make an impact on the world.” Mr. Porter opened up about his career working in infrastructure and deep learning at companies such as NBC Universal and Qualcomm - it was quite interesting to learn about many of his experiences. From his slides, I learned about continuous learning and that to help yourself succeed in the field of computer science, you must always be &quot;learning how to learn,&quot; whether it be a new system, tool, etc. In conclusion, this panel was very interesting and I believe that I gained a lot of resourceful knowledge that I can apply and use in the classroom and beyond. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/12/13/CS-Tech-Buisness-Notes.html",
            "relUrl": "/2022/12/13/CS-Tech-Buisness-Notes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Title",
            "content": "Undecidability . The algorithm cannot be tracked | Output is the number of iterations needed to get to &quot;i&quot; | Hailstone numbers | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/12/11/Lesson-Unit-3-Section-14-15.html",
            "relUrl": "/2022/12/11/Lesson-Unit-3-Section-14-15.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Lesson 3.12 & 3.13",
            "content": "Topic 3.12 (3.A) Calling &amp; Understanding Procedures - Kaiden &amp; Amay . Overview: Learning Objectives . Basics of Procedures | Calling Procedures | Determine Results of Procedures | . What is a procedure? . Essential Knowledge: . A procedure is a named set of instructions that can take in parameters and return values. May be called &quot;method&quot; or &quot;function&quot; in different programming languages. | . | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | Procedures can be classified as sequencing, selection, and iteration. How? | . Example: . What is the procedure&#39;s name? | What are the parameters? | What did the procedure return? | . x = 5 y = 3 def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . The product of 5 times 3 is 15 . Calling Procedures . To call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure | Procedures do not require parameters, but the parentheses must be there | . Ex: . procedureName(parameter1, parameter2, ...) | How would you call this procedure? | . num = 5 def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . Quiz (Part of Hacks) . Complete this quiz: . questionNum = 3 correct = 0 questions = [ &quot;What is are correct names for a procedure? n A) Method n B) Function n C) Both&quot;, &quot;What is a procedure? n A) Sequencing n B) Selection n C) Iteration n D) All&quot;, &quot;Use this for following question: n def inchesToFeet(lengthInches): n t lengthFeet = lengthInches / 12 n t return lengthFeet n n What is the procedure name, the parameter, and what the procedure returns? n A) feetToInches, lengthInches, lengthMeters n B) inchesToFeet, lengthInches, lengthFeet n C) inchesToFeet, lengthFeet, lengthInches n D) lengthInches, inchesToFeet, lengthFeet&quot;] answers = [&quot;c&quot;, &quot;d&quot;, &quot;b&quot;] def qna(question, answer): print(&quot;Question:&quot;, question) response = input() print(&quot;Answer:&quot;, response) if response.lower() == answer: print(&quot;Correct :) n&quot;) global correct correct += 1 else: print(&quot;Incorrect :( n&quot;) for x in range(questionNum): qna(questions[x], answers[x]) print(&quot;Score:&quot;, correct, &quot;/ 3&quot;) . Determining the Result of a Procedure . To determine the result of a procedure or any code, you must follow the code line by line and see what each one does . | Using syntax, you can determine the result by . function parameters | return value and statements | . | . To use return values, you have to write the syntax return followed by the expression you would like to return var | . A return statement exits a function and instructs python to continue executing the program and to return a certain value . | Value can be string, a tuple, or any other type that is being sent back to the main program . | . Ex: . def divide(num1,num2): x = num1/num2 return x . what is x being assigned to inside the function? . | As a reminder, to use function parameters, you would have to write the syntax name of the function followed by the parameters needed in parentheses . | Function parameters are the parameters that are used when calling the function in order to get a result. . | . What are the function parameters in this procedure? . What values are being passed to the function? . def function(first_name, last_name): print(first_name + &quot; &quot; + last_name) function(&quot;Peter&quot;,&quot;Parker&quot;) function(&quot;Safin&quot;, &quot;Singh&quot;) . Peter Parker Safin Singh . In the cell above, the function is being called twice, which shows the importance of function in order to accomplish the same thing with different parameters. . What is wrong with the function? . Can you translate the binary numbers into decimal notation? . def find_cube(num): result = bin(num * num * num) cube = find_cube(3) cube2 = find_cube(4) print(&#39;Cube:&#39;,cube) print(&#39;Cube:&#39;,cube2 ) . Cube: None Cube: None . Once again, I called the function twice, which is useful, because it allows the coder to do the same thing multiple times with different arguments. . Topic 3.13 (3.B) Managing Complexity - Safin . Overview: Learning Objectives . increasing code modularity using procedures abstracting large problems into smaller ones | extract shared features to reduce code duplication | . | using parameters to reuse procedures | improving code readability with procedures | manipulating procedure logic and preserving outputEssentially, we&#39;ll learn how and when it is appropriate to construct a function (procedural abstraction) and what its benefits are . | . Vocabulary: . Modularity - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program | Abstraction - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . Parameters . As we saw above, parameters can be used to make functions work with multiple different inputs. Let&#39;s review the following code . # these parameters are the inputs to the function, and they are used # inside the function to perform some operation def add(x, y): # inside the function, we can use the x and y parameters just like # we would use any other variable result = x + y return result # to call the function and pass in values for the x and y parameters, # we simply provide the values as arguments in the function call result = add(2, 3) print(result) # should output 5 # we can also use variables as arguments in the function call x = 5 y = 10 result = add(x, y) print(result) # should output 15 # we can even use the result of one function call as an argument # in another function call result = add(add(2, 3), add(4, 5)) print(result) # should output 14 . 5 15 14 . In the above example, parameters were used to create a function that could be called multiple times without code duplication. . Modularity . In the following example, we will use specialized functions and explain their benefits: . import math def hypotenuse(leg1, leg2): # notice we&#39;re using this &lt;var&gt; * &lt;var&gt; syntax multiple times? # this has multiple drawbacks: # - it&#39;s repetitive and makes the code longer # - if we wanted to change the operator being # applied to `leg1` and `leg2`, we&#39;d have to do it twice! leg1_squared = leg1 * leg1 leg2_squared = leg2 * leg2 return math.sqrt(leg1_squared + leg2_squared) ## VERSUS ## # this works, but let&#39;s try to write the &quot;squared&quot; variable assignment statements more concisely... def square(a): return a * a def hypotenuse_abstracted(leg1, leg2): # not only is this shorter, but we can now: # - better understand the code at a glance--we know exactly # what `square` should do # - change the operator in a single place (`square`) rather than # multiple times within this hypotenuse function leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) ## EXTRA CHALLENGE ## # is it possible to write the `hypotenuse` function in a single line? def hypotenuse_abstracted2(leg1, leg2): # ... pass assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5 . Abstracting Shared Features . Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create... . count_words_starting_with_a_in_string(sentence) | count_words_starting_with_d_in_string(sentence) | . In order to count words starting with a certain character, we&#39;ll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here. . # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_a_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words count = count_words_starting_with_letter(words, &quot;a&quot;) return count # see above def count_words_starting_with_d_in_string(s): words = split_string(s) count = count_words_starting_with_letter(words, &quot;d&quot;) return count # example usage: s = &quot; This is a test string! Don&#39;t you think this is cool? &quot; a_count = count_words_starting_with_a_in_string(s) d_count = count_words_starting_with_d_in_string(s) print(&quot;Words starting with a:&quot;, a_count) print(&quot;Words starting with d:&quot;, d_count) . Words starting with a: 1 Words starting with d: 1 Words starting with a: 1 . In the above example, we have: . defined several functions that perform different tasks related to processing a string | abstracted away shared behavior for both functions that count the number of words starting with a specific character in a string | . Topic 3.13 (3.C) Developing Procedures - David &amp; Alex . Overview: Learning Objectives . parameters being used to manage complexity parameters storing variables | parameters storing arguments | . | calling functions with procedure names choosing procedure names | calling procedures in python and javascript | . | . Vocabulary: . Procedure - a module of code that is created to complete a certain task, this is basically a function | Procedure Name - the name that is given to a function/procedure | Parameters - a variable that is used in a function to allow for data to be imported into a function | Arguments - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters | . Functions - Basic Structure . Functions can be created in many different languages. Below are some examples in Collegeboard&#39;s format, Python, and Javascript. . Collegeboard . Above, the function is defined as PROCEDURE, which tells the coder that this is a function. The function is then named with procName, which is simply how the function is identified. parameter1, parameter2,... are variables that can be predefined elsewhere and repeatedly used in the same function. This will be gone over later in the lesson so don&#39;t worry if you don&#39;t get it. block of statements are just things that you would place inside a function to complete a certain task, such as print() in Python. . Python . def function(a,b): # function is defined print(a+b) # prints output of variables function(1,2) # one instance that it can be used function(2,3) # another instance . 3 5 . Python is similar to the Collegeboard example, where def defines the function, function, and then is followed by parameters a,b, which can later be interchanged with any numbers as shown with function(1,2). The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed. . Javascript . function Function(a,b) { return a + b; } Function(1,2) Function(2,3) . 3 5 . Javascript in this case is almost the exact same as Python, the only differences being that function is called with function and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example. . Example . function div(a,b) { return (a+b)/2 } div(3,7) . What is the procedure name? | What are the parameters? | What operation is being done? | what would the output of this code be? | . Parameters . In functions, there are sometimes parameters that the functions have in which you can call to the function giving arguements that will provide input to the function For example: | . def function(num1, num2): if num1 &gt; num2: print(&quot;num1 is greater than num2&quot;) elif num1 &lt;num2: print(&quot;num1 is less than num 2&quot;) num1= 6 num2 = 8 function(num1,num2) . num1 is less than num 2 . In this function, it takes in two parameters num1 and num2 | Whithin this function it uses conditionals to determine if num 1 is larger or smaller than num2 | When calling to this function we must put in two arguements, num1 and num2 respectively | We put in 6 for num1 and 8 for num2 and the algorithm runs and gives us an outcome | . This basic function in python can be recreated in Javasript . function compare(a,b) { if(a&gt;b) { console.log(&quot;a is greater than b&quot;) } else if (a&lt;b) { console.log(&quot;a is less than b&quot;) } } // How do you call to this function? . what are the parameters? | What is the output? | what are the arguements? | . Calling functions . When calling functions, you have to ask yourself some questions Does the function have any parameters? | does the parameter have output? | . | Depending on these answers, the way you will call to a function will be different | . Example where it does does have parameters and gives output . def InchestoFeet(inches): Feet = 0 Feet = inches / 12 return Feet result = InchestoFeet(24) print(result) . 2 . If you look closely, there is a return at the end of the function, this returns a value when you call the function | This is why we have to set a variable, in this case result equal to the output of the function. | Also one thing to notice is that this function also takes in a parameter called inches | . Here&#39;s an example of calling functions in HTML with Javascript: . HI . . &lt;!-- function is called here --&gt; &lt;button id=&quot;enter&quot; onclick=&quot;print(a,b)&quot;&gt;HI&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;!-- javascript --&gt; &lt;script&gt; function print(a,b) { document.getElementById(&quot;result&quot;).innerHTML = a + b // math } // variables are defined var a = 1 var b = 2 &lt;/script&gt; . Hacks . Topic 3.12 (3.A): . Define procedure and parameter in your own words | Paste a screenshot of completion of the quiz | Define Return Values and Output Parameters in your own words | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) | Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | Topic 3.13 (3.C): . Define procedure names and arguments in your own words. | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | Rubric . Each hack is worth 0.3 points . To get 0.3 points for each hack you must: Complete each hack correctly and completely | Submit by 11:59PM on Friday, December 9 | . | The last 0.1 points are if you do a good job on the binary calculator. | Anything missing or submitted late will have points deducted. | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/12/04/lesson3.12_3.13.html",
            "relUrl": "/2022/12/04/lesson3.12_3.13.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 3.9 & 3.11",
            "content": "Unit 3.9 . 3.9.1 Algorithms (Claire) . A little review on Algorithms: . what are the three components of an algorithm? . sel__ | seq__ | it___ | . Today we will be looking at algorithms from another standpoint. . Main Idea 1: Algorithms can be written in different ways and still do the same thing . However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | . Examples . The goal with the two algorithms below is to show &quot;Wow! Good job!&quot; when you get an A and show &quot;Nice!&quot; when you get a B or C (pass), if you don&#39;t pass (lower than 70) it will show &quot;Do Better&quot; . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . Yay! it worked! Lets look at the next one. Do you notice any differences? Do you think this algorithm will still achieve the same goal? If not, what is the flaw? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . So, why is this important? Why are we even doing this? . When 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. . just know that codes that look similar don&#39;t always produce the same things :) | . Real-life situation (Storytime) . Tommy and Billy are working on solving the same issue with an algorithm Tommy creates a functioning code and yells &quot;I did it!&quot; He looks over at his friend Billy which is having a bit of trouble and he offers help However, Billy&#39;s code looks basically the same! which confuses them Then they remeber that they were taught that algorithms that look similar don&#39;t always have the same results and they collaborate to do further investigation:) . Now, without running, investigate the algorithm below. This one looks different. Do you thing it will still achieve the same goal as above? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . Why is this important? . When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . How to write Nested Conditionals as Boolean expressions . the following 2 pieces of code is supposed to print &quot;don&#39;t go to school&quot; unless: . it is a weekday | . isHoliday = False isWeekday = True #if holiday, dont go to school if isHoliday == True: print(&quot;don&#39;t go to school!&quot;) # otherwise, if it is a weekday, go to school else: if isWeekday == True: print(&quot;go to school!&quot;) # but if it is neither a weekday or holiday, don&#39;t go to school else: print(&quot;don&#39;t go to school&quot;) . isHoliday = False isWeekday = True # setting variables here (same as above to make comparison easier) driveSchool = not(isHoliday) and isWeekday if driveSchool == False: print(&quot;don&#39;t go to school!&quot;) if driveSchool == True: print(&quot;go to school!&quot;) # now we can make a regular conditional/ if statement without having a nested conditional . Hacks . why is it important to know that algorithms that look different can do the same thing and that algorithms that look the same might have different results?(0.15) | for the converted conditional to boolean conversion(0.10) | total: 0.25 | . 3.9.2 Developing Algorithms (Annika) . Developing Algorithms . When creating an algorithm, its good to outline its process before coding This ensures that it is sequenced correctly | . | You should represent the algorithm using a flowchart or natural language Visualization can help you better see the flow of the whole algorithm | This may allow for the coding process to be more efficient and effective | . | . Review of Selection and Iteration . Algorithms with iteration repeat a function until a goal is reached To more easily represent an algorithm without showing all the repeated steps, we can use iteration | . | Algorithms with selection only go through certain functions if certain things are true or false | . Example 1 . Start | The number of pretzels in the pack is 6 | Eat one pretzels, number of pretzels in pack goes down by 1 | How many pretzels are left? | Repeat step 3 until number of pretzels is 0 | Display that pack is empty | Finish | pretzel = 6 while (pretzel &gt; 0): pretzel -= 1 print(pretzel) if pretzel == 0: print(&quot;All done!&quot;) . Example 2 . The parking rate for a garage is as follows: Less than one hour: Free 1-2 hours: $5 &lt;br&gt; 2-3 hours: $8 3-4 hours: $10 &lt;br&gt; 4+ hours: $12 . . Start | Input number of hours parked | If hours is less than 1, cost is free | If hours is between 1 and 2, cost is $5 | If hours is between 2 and 3, cost is $8 | If hours is between 3 and 4, cost is $10 | If hours is more than 4, cost is $12 | Display cost and goodbye | Finish | print(&quot;The parking rate is as follows: n Less than one hour: Free n 1-2 hours: $5 n 2-3 hours: $8 n 3-4 hours: $10 n 4+ hours: $12&quot;) time = float(input(&quot;How many hours have you parked at this garage?&quot;)) print(&quot;How many hours have you parked at this garage?&quot;) print(time, &quot;hours costs:&quot;) if time &lt; 1 : print(&quot;Free&quot;) elif time &gt;= 1 and time &lt; 2 : print(&quot;$5&quot;) elif time &gt;= 2 and time &lt; 3 : print(&quot;$8&quot;) elif time &gt;= 3 and time &lt; 4 : print(&quot;$10&quot;) else: print(&quot;$12&quot;) print(&quot;Have a good day!&quot;) . Hacks . Develop your own complex algorithm using a flowchart and natural language, then code it! . Requirements: . Includes both a flowchart AND natural language | Working code of the same algorithm | Incorporates selection AND/OR iteration | Make it creative! | . Tips: . This site is good for making flowcharts! | Natural language should just be a list | Think about the whole process, not just the end result | . 3.9.3 Using preexisting algorithms (Grace) . Main Idea . Knowing existing algorithms can help construct new ones | simple existing algorithms can include determining min or max of two or more numbers | computing the sum or average | identifying if an integer is even or odd | . | Using existing correct algorithms can help as building blocks to reduce development time, testing, and identification of errors | . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from following the Collatz Conjecture. . Example: 6 -&gt; 3 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 . What does this function do? . if (n MOD 2 = 0) { display(&quot;n is even&quot;) } else { display(&quot;n is odd&quot;) } . By modifying the preexisting code, we can write create new code that follows th Collatz Conjecture. . DISPLAY (&quot;Choose a value for n&quot;) n &lt;- INPUT () REPEAT UNTIL (n = 1) { IF (n MOD 2 = 0 ) { n &lt;- n/2 } ELSE { n &lt;- n * 3 + 1 } . Hacks . Fix the number guessing game . Make a flow chart for the algorithm number guessing game | Make a function that gets the user guess | Modify the existing search function to give more encouraging feedback | import random #sets variables for the game num_guesses = 0 user_guess = 0 upper_bound = 100 lower_bound = 0 #generates a random number number = random.randint(1,100) # print(number) #for testing purposes print(f&quot;I&#39;m thinking of a number between 1 and 100.&quot;) #Write a function that gets a guess from the user using input() def guess(): #add something here return #add something here #Change the print statements to give feedback on whether the player guessed too high or too low def search(number, guess): global lower_bound, upper_bound if guess &lt; number: print(&quot;You are bad at guessing&quot;) #change this lower_bound = guess elif guess &gt; number: print(&quot;You suck :(&quot;) #change this upper_bound = guess return lower_bound, upper_bound while user_guess != number: user_guess = guess() num_guesses += 1 print(f&quot;You guessed {user_guess}.&quot;) lower_bound, upper_bound = search(number, user_guess) print(f&quot;Guess a number between {lower_bound} and {upper_bound}.&quot;) print(f&quot;You guessed the number in {num_guesses} guesses!&quot;) . Unit 3.11 Binary Search (Claire) . Binary Search: . repeatedly dividing a search interval in half . Binary Search Steps: . first put the numbers in order ascending | descending | . | find the middle number first this is found by taking the highest index number plus the lowest index number and divide by 2 | the numbers on the right will be greater and the numbers on the left will be smaller | this can be represented with a binary tree middle number with the smaller number branched off on the left and bigger numbers branched off on the right | . | . | these lists are not always numbers lists can be made with strings | ex. [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;peach&quot;, &quot;watermelon&quot;] | alphabetical order a-z | z-a | . | . | . Practice: . What is the middle number in a Binary Search given the following set of numbers in order: 1, 5, 19, 44, 89 | What is the middle number in a Binary Search given the following set of numbers that are not in order: 3, 87, 12, 66, 22 | Hacks: . calculate the middle index and create a binary tree for each of these lists 12, 14, 43, 57, 79, 80, 99 | 92, 43, 74, 66, 30, 12, 1 | 7, 13, 96, 111, 33, 84, 60 | . | Using one of the sets of numbers from the question above, what would be the second number looked at in a binary search if the number is more than the middle number? | Which of the following lists can NOT a binary search be used in order to find a targeted value? . a. [&quot;amy&quot;, &quot;beverly&quot;, &quot;christian&quot;, &quot;devin&quot;] . b. [-1, 2, 6, 9, 19] . c. [3, 2, 8, 12, 99] . d. [&quot;xylophone&quot;, &quot;snowman&quot;, &quot;snake&quot;, &quot;doorbell&quot;, &quot;author&quot;] . | Rubric: . All 4 hacks are graded the same way . 0.25/0.25 - shows full understanding of the lesson, completes all hacks assigned with explanation to go above and beyond, any extra hacks to show more understanding . 0.23/0.25 - shows understanding of algorithms/binary search and completes all hacks . 0.20/0.25 - does not understand algorithm/binary search and has not completed hacks .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/trimester%202%20student%20teaching/2022/12/02/unit3-9-11.html",
            "relUrl": "/trimester%202%20student%20teaching/2022/12/02/unit3-9-11.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Simulations- Unit 3 Section 16 Lesson",
            "content": "3.16 Intro to Simulations - Alexa . What is a simulation? A simulation is an imitation of a situation or process | Aka a virtual experiment | . | . Guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Examples of Simulations: . Simulations are used all the time over many different industries . testing safety of a car | games | testing the efficiency of a parking lot | testing a new train route | . Simulation vs. Experiment . Experiment definition: procedure undertaken to make a discovery, test a hypothesis, or demonstrate a known fact | . So, why use a simulation? . Advantages: Can be safer | More cost-effective | More efficient | More data in less time | . | Disadvantages: Not as accurate as experiments | outside factors not included (ex: in rolling dice simulation gravity and air resistance) | . | When do you not use a simulation? when a situation already has set results/data (won&#39;t change) | examples: a score in a game, most purchased food, average yearly wage | . | . leads into real life game example: . . . A Real Life Example: Four Corners - Lydia &amp; Ava . an example of a simulation and experiment = the game of 4 corners | games are simulations! | We are going to play a round of 4 corners here in class. This game is a real life version of our simulation. | Mr. Mortensen will be the person in the middle choosing corners. | Everyone will choose a corner, and if your corner is chosen, you are out! | . | . The rules of the game: . a person stands in the center of a room and the 4 coners are labeled 1-4 | Every player chooses a corner while the person in the middle closes their eyes | person in the middle chooses/calls out a number when instructed | every player in the chosen corner is now out | contine until there is a winner! | Let&#39;s play! . Below is the simulation of the four corners game! . import random status = &quot;in&quot; while status != &quot;out&quot;: chooseCorner = input(&quot;What corner do you choose?&quot;) corner = random.randint(1,4) if int(chooseCorner) == corner: status = &quot;out&quot; print(&quot;You chose corner number &quot; + chooseCorner + &quot; and you&#39;re OUT&quot;) else: print(&quot;You chose corner number &quot; + chooseCorner + &quot; and are still in!&quot;) . You chose corner number 2 and are still in! You chose corner number 3 and are still in! You chose corner number 4 and you&#39;re OUT . Comparing Experiment to Simulation Code: . Mr. Mortensen (person in the middle) = random.randint | if statement = if player is out | else = safe/continue | while loop = repeats process until there is a winner of the game | . DEBRIEF QUESTIONS: . Why is it better to code simulations than experiement in real life? | What makes this game a simulation? | What are its advantages and disadvantages? | Would an experiment be better in this situation? (raise hands for each team) | . . Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . To test the safety of a car, a simulation can be ran to test out different outcomes depending on the force of the crash. A simulation of this would help to reduce the costs and effects of physically performing crash tests for a car. . Hack #2 (collegeboard based questions) . Simulations Quiz (either screenshot or paste quiz in your notebook): | . questions_number = 6 answers_correct = 0 questions = [ &quot;True or False: Simulations will always have the same result. n A: True, n B: False&quot;, &quot;True or False: A simulation has results that are more accurate than an experiment n A: True, n B: False&quot;, &quot;True or False: A simulation can model real world events that are not practical for experiments n A: True, n B: False&quot;, &quot;Which one of these is FALSE regarding simulations n A: Reduces Costs, n B: Is safer than real life experiments, n C: More Efficient, n D: More accurate than real life experiments&quot;, &quot;Which of the following scenarios would be the LEAST beneficial to have as a simulation n A: A retail company wants to identify the item which sold the most on their website, n B: A restaurant wants to determine if the use of robots will increase efficiency, n C: An insurance company wants to study the impact of rain on car accidents, n D: A sports car company wants to study design changes to their new bike design &quot;, &quot;Which of the following is better to do as a simulation than as a calculation n A: Keeping score at a basketball game, n B: Keeping track of how many games a person has won, n C: Determining the average grade for a group of tests, n D: Studying the impact of carbon emissions on the environment&quot; ] question_answers = [ &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;A&quot;, &quot;D&quot; ] print(&quot;Welcome to the Simulations Quiz!&quot;) def ask_question (question, answer): print(&quot; n&quot;, question) user_answer = input(question) print(&quot;You said: &quot;, user_answer) if user_answer == answer: print(&quot;Correct!&quot;) global answers_correct answers_correct = answers_correct + 1 else: print(&quot;You are incorrect&quot;) for num in range(questions_number): ask_question(questions[num], question_answers[num]) print(&quot;You scored: &quot;, answers_correct, &quot;/6&quot;) . Welcome to the Simulations Quiz! True or False: Simulations will always have the same result. A: True, B: False You said: B Correct! True or False: A simulation has results that are more accurate than an experiment A: True, B: False You said: B Correct! True or False: A simulation can model real world events that are not practical for experiments A: True, B: False You said: A Correct! Which one of these is FALSE regarding simulations A: Reduces Costs, B: Is safer than real life experiments, C: More Efficient, D: More accurate than real life experiments You said: D Correct! Which of the following scenarios would be the LEAST beneficial to have as a simulation A: A retail company wants to identify the item which sold the most on their website, B: A restaurant wants to determine if the use of robots will increase efficiency, C: An insurance company wants to study the impact of rain on car accidents, D: A sports car company wants to study design changes to their new bike design You said: A Correct! Which of the following is better to do as a simulation than as a calculation A: Keeping score at a basketball game, B: Keeping track of how many games a person has won, C: Determining the average grade for a group of tests, D: Studying the impact of carbon emissions on the environment You said: D Correct! You scored: 6 /6 . . . Rolling a Dice Example - Sri . Below is a simulation of rolling dice! Examine the code and think about how this simulation works and its purpose! . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 6.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 6) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-6] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . you rolled: [5, 1, 2] . . . Game of Life - Lydia &amp; Ava . Below is a simulation of the Game of Life, originally written by John Horton Conway. Mr. Mortensen has this game on the APCSP site and we think that it is a great example of an interactive simulation. . What it is . This game is an unpredictable cellular automaton | automaton = simulates and imitates human life, hence why this is called the game of life | After creating the initial configuration, the game evolves without pattern | . How it works . Cells in this game are alive or dead, similar to binary where they are on or off | The user created an initial configuration of cells on the grid, and presses play (tap the squares on the grid) | a cells&#39;s status (alive or dead, on or off) depends on the surrounding 8 cells status (surrounding 8 boxes). Here are the rules: The birth rule= a dead cell (blue box) that is surrounded by at least 3 alive cells (yellow boxes), will become alive | The death rule= an alive cell (yellow) with no or only one surviving cell around it dies (becomes blue) | Cell survival= an alive cell (yellow) with 2 or 3 alive neighboring cells will stay alive | . | . Try it Out! . Use the grid below to create cell figurations, press play, and watch your cells die, live, and move around! . . Remix of Game of Life . start step . . Hack #3 . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . . . Hacks Overview . Use these guiding questions for a simulation: . - What makes it a simulation? - What are it’s advantages and disadvantages? - In your opinion, would an experiment be better in this situation? . Hack #1 (0.3) . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . Hack #2 (0.1) . Simulations Quiz (either screenshot or paste quiz in your notebook) | . Hack #3 (0.2) . Describe the rolling dice simulation (answer guiding questions) | . Hack #4 (0.3) . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . Extra Credit (0.1) . For the extra 0.1: try coding a simple simulation and describe it (guiding question) | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/studentlesson/simulations",
            "relUrl": "/studentlesson/simulations",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Hacks Sections 3-4",
            "content": "Notes . Algorithms . An algorithm is a set of instructions that complete a given task | There are three key parts to an algorithm: sequencing, selection, and iteration | Sequence: The order in which a statement is carried out | Selection: The ability to allow an algorithm to carry out a conditional based condition | Iteration: A loop that executes code until a given condition is met | . Strings . Each coding language has its own relative methods, procedures, and functions | String is an ordered sequences of characters | . Unit 3.3.1 Hacks . Parts of an Algorithm . Sequencing: 1, 2, 3, 4, 5 . Selection: 3 . Iteration: 4 . Code Evaluation . The result is 3.0 | . num1 = 5 num2 = num1 * 3 num3 = num2 / num1 * (9 % 2) * 4 result = (num3 % num1 + num2) % num3 * 3 / 5 print(result) . 3.0 . Crossword Puzzle Answers 1) Iteration 2) Selection 3) Sequence . Unit 3.4 Hack . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/hacks/turkey/post%20tree/notes/2022/11/29/Section_3_4_Hacks.html",
            "relUrl": "/hacks/turkey/post%20tree/notes/2022/11/29/Section_3_4_Hacks.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Hacks Sections 1-2",
            "content": "Notes . Essential Knowledge Problems from College Board 1) A variable is an abstraction inside a program that holds a value, where each variable has associated data storage that represents a single value at a time (However, if the value is a collection type such as a list, then the value can contain multiple values). 2) Variables typically have meaningful names that helps with the overall organization of the code and understanding of what is being represented by the variables 3) Some programming languages provide a variety of methods to represent data, which are referenced using variables 9Booleans, numbers, lists, and strings) 4) One form of a value is better suited for representation than another. . Types of Data . Integers (numbers) | String (text/letters) | Boolean (True/False statements) | . Unit 3.1.1 Hacks . -Prompt: Create code that… 1) Uses variables 2) Shows your understanding of different variable data types by using at least 2 different types in your code 3) Uses meaningful names to prevent confusion&quot; . str=&quot;Hello World&quot; integerOne=7 integerTwo=5 print(str) print(integerOne + integerTwo) . Hello World 12 . Unit 3.1.2 Hacks . Prompt: In your own words, briefly explain by writing down what an assignment operator is. . An assignment operator is a type of operator used to assign a value to a variable. It takes the form of &quot;=&quot;, where the value on the right side of the operator is assigned to the variable on the left side. For example, a = 5 assigns the value of 5 to the variable a. | . - In Collegeboard pseudocode, what symbol is used to assign values to variables?** . An arrow (&lt;–) is used to assign values to variables. | . A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? . If the variable x was changed to 22, then, print(x) would display 22. | . Unit 3.2.1 Hacks . 1) What is a list? A list is a sequence of elements in which each element is represented by variable. . 2) What is an element? A basic unit of data in a programming language. . 3) What is an easy way to reference the elements in a list or string? An easy way to reference the elements in a list or string is to use indexes. . 4) What is an example of a string? An example of a string is a sequence of characters such as &quot;Apples&quot;. . Unit 3.2.1 Hacks . Create an index of your favorite foods Tips: Index starts at 1, Strings are ordered sequences of characters . Extra work: Try to create an index that lists your favorite food and print the element at index 3. More work: Create a list of your favorite foods and create an index to access them. . marks = [“food1”] . yumyum = [&quot;potatoes&quot;, &quot;rice&quot;, &quot;pasta&quot;, &quot;fried chicken&quot;] print(yumyum[1]) print(yumyum[3]) . rice fried chicken . Unit 3.2.2 Hacks . The following code is incomplete. Its intended purpose is to increase three numbers, all of which ask for user input, by an amount specified the user. The input code is abstracted, but the actual logic isn’t connected to the abstraction. . num1=input(&quot;Input a number. &quot;) num2=input(&quot;Input a number. &quot;) num3=input(&quot;Input a number. &quot;) add=input(&quot;How much would you like to add? &quot;) # Add code in the space below numlist = [int(num1), int(num2), int(num3)] print(&quot;User submitted numbers&quot;, numlist) print(&quot;Plus &quot; + add) # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in range (len(numlist)): numlist[i-1] += int(add) print(&quot;Result: &quot;, numlist) . User submitted numbers [5, 2, 77] Plus 25 Result: [30, 27, 102] . Unit 3.2.3 Hacks . On a single markdown file: . Insert a screenshot of your score on the python quiz | Insert a screenshot of your simplification of the food list | Why are using lists better for a program, rather than writing out each line of code? Lists help to organize code and reduce repetitiveness in a program. . | Make your own list the “long and slow way” then manage the complexity of the list . | . Python Quiz Result . . vegetable1 = &quot;Carrots&quot; vegetable2 = &quot;Broccoli&quot; vegetable3 = &quot;Cabbage&quot; vegetable4 = &quot;Radishes&quot; print(vegetable1, vegetable2, vegetable3, vegetable4) . Carrots Broccoli Cabbage Radishes . fruits = [&quot;Apples&quot;, &quot;Bananas&quot;, &quot;Watermelon&quot;, &quot;Oranges&quot;] print(fruits) . [&#39;Apples&#39;, &#39;Bananas&#39;, &#39;Watermelon&#39;, &#39;Oranges&#39;] .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/hacks/turkey/post%20tree/notes/2022/11/28/Section_1_2_Hacks.html",
            "relUrl": "/hacks/turkey/post%20tree/notes/2022/11/28/Section_1_2_Hacks.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 3.17-3.18 Group Lesson Period 4",
            "content": "Hailstone numbers . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . Sequence: 4 2 1 . Number of iterations . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Please enter a number: Number of iterations: 8 . Vocab . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples:Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No.&gt; ### Iteration The action or a process of iterating or repeating:such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. . Additional information . A problem posed by L. Collatz in 1937, also called the 3x+1 mapping, 3n+1 problem, Hasse&#39;s algorithm, Kakutani&#39;s problem, Syracuse algorithm, Syracuse problem, Thwaites conjecture, and Ulam&#39;s problem (Lagarias 1985). Thwaites (1996) has offered a £1000 reward for resolving the conjecture. Let a_0 be an integer. Then one form of Collatz problem asks if iterating . always returns to 1 for positive a_0. (If negative numbers are included, there are four known cycles (excluding the trivial 0 cycle): (4, 2, 1), (-2, -1), (-5, -14, -7, -20, -10), and (-17, -50, -25, -74, -37, -110, -55, -164, -82, -41, -122, -61, -182, -91, -272, -136, -68, -34).) . The members of the sequence produced by the Collatz are sometimes known as hailstone numbers. Conway proved that the original Collatz problem has no nontrivial cycles of length &lt;400. Lagarias (1985) showed that there are no nontrivial cycles with length &lt;275000. Conway (1972) also proved that Collatz-type problems can be formally undecidable. Kurtz and Simon (2007) proved that a natural generalization of the Collatz problem is undecidable; unfortunately, this proof cannot be applied to the original Collatz problem. . The Collatz algorithm has been tested and found to always reach 1 for all numbers &lt;=19·2^(58) approx 5.48×10^(18) (Oliveira e Silva 2008), improving the earlier results of 10^(15) (Vardi 1991, p. 129) and 5.6×10^(13) (Leavens and Vermeulen 1992). Because of the difficulty in solving this problem, Erdős commented that &quot;mathematics is not yet ready for such problems&quot; (Lagarias 1985). . The numbers of steps required for the algorithm to reach 1 for a_0=1, 2, ... are 0, 1, 7, 2, 5, 8, 16, 3, 19, 6, 14, 9, 9, 17, 17, 4, 12, 20, 20, 7, ... (OEIS A006577; illustrated above). Of these, the numbers of tripling steps are 0, 0, 2, 0, 1, 2, 5, 0, 6, ... (OEIS A006667), and the number of halving steps are 0, 1, 5, 2, 4, 6, 11, 3, 13, ... (OEIS A006666). The smallest starting values of a_0 that yields a Collatz sequence containing n=1, 2, ... are 1, 2, 3, 3, 3, 6, 7, 3, 9, 3, 7, 12, 7, 9, 15, 3, 7, 18, 19, ... (OEIS A070167). . The Collatz problem can be implemented as an 8-register machine (Wolfram 2002, p. 100), quasi-cellular automaton (Cloney et al. 1987, Bruschi 2005), or 6-color one-dimensional quasi-cellular automaton with local rules but which wraps first and last digits around (Zeleny). In general, the difficulty in constructing true local-rule cellular automata arises from the necessity of a carry operation when multiplying by 3 which, in the worst case, can extend the entire length of the base-b representation of digits (and thus require propagating information at faster than the CA&#39;s speed of light). . More information . Hacks/Assignment . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. The more efficient the code, the higher your grade will be. (Algorithm Efficency) (.25) . Unit 3, Section 17: Algorithm Efficiency - Kush &amp; Yasha . What is Algorithm Efficiency? . Yasha - Algorithmic efficiency is an aspect of algorithmic programming that measures the number of steps needed to solve a problem. For instance, If I wanted to create a sorting algorithm that sorts numbers the numbers [2,4,5,1,3]from least to greatest, rather than having an algorithm that compares itself to the next number and swaps accordingly it would be more efficient if you had a program that scans through all the numbers and checks whether a number is smaller or bigger than the rest than and sorts accordingly. Both of the algorithms had the same objective, but one runs more efficiently than the other. . Here is an example of an inefficient algorithm: . def inefficientWay(numbers): # Then it loops over the numbers for i in range(len(numbers)): # Now it finds the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # Then it swaps the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(inefficientWay([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - This algorithm is inefficent because it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. This is an inefficient way to sort a list. . Kush - Here is an efficent way to sort a list: . def efficient_sort(numbers): # loop over the numbers for i in range(len(numbers)): # find the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # swap the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(efficient_sort([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - The difference in this algorithm is that it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. . How can you use algorithms to better your life: Mini activity . Yasha - Just for a second, think about all the tasks in your life that would work so much better automated. The sky&#39;s the limit. For an activity, write down or take a mental note of a task that you encounter in your day to day life, and think of ways where you can automate that task. An example of this would be me creating an algorithm for my morning routine. . tasks = [&quot;wake up&quot;, &quot;eat breakfast&quot;, &quot;brush teeth&quot;, &quot;go to school&quot;] def complete_tasks(tasks): for task in tasks: # code to complete each task goes here if task == &quot;wake up&quot;: print(&quot;Waking up now!&quot;) elif task == &quot;eat breakfast&quot;: print(&quot;Eating breakfast now!&quot;) elif task == &quot;go to school&quot;: print(&quot;Going to school now!&quot;) # and so on for each task in the list # call the function to complete the tasks complete_tasks(tasks) . Waking up now! Eating breakfast now! Going to school now! . Taking a heuristic approach to problems P1 . Kush - Sometimes when a problem has too many possibilities, a heuristic approach would be taken. let&#39;s use planes as an example. Imagine you were a musician on tour. You have shows in New Zealand, United States, Canada, and Russia. Well, what would be the shortest flight route so you can arrive at those destinations as fast as possible? You start in the United States. . Taking a heuristic approach to problems P2 . Kush - Well, since there are multiple possibilities, I chose to pick the countries closest to each other. The reason I chose this algorithm in particular is that it made the most sense. I had to start at United States, but then I went on to Canada, Russia, New Zealand, and then back to the United States. . Visual Representation . Hacks/assignment . Write 2 algorithms: One is efficent and one is innefficent, then explain why one is efficent while the other isn&#39;t. (.25) | Explain why one algorithm is more efficient than another using mathematical and/or formal reasoning. (.25) | use variables, if statements, and loops to program your algorithm and upload to jupyter notebooks/ fastpages. (.25) | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/11/28/Quinn&Group.html",
            "relUrl": "/2022/11/28/Quinn&Group.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Title",
            "content": "echo hi . hi .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/11/18/bash.html",
            "relUrl": "/2022/11/18/bash.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Title",
            "content": "&lt;html&gt; &lt;head&gt; &lt;title&gt;Binary Calculator&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Binary Calculator&lt;/h1&gt; &lt;form&gt; &lt;input type=&quot;text&quot; id=&quot;first-number&quot; placeholder=&quot;First Number&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;second-number&quot; placeholder=&quot;Second Number&quot;&gt; &lt;button type=&quot;button&quot; id=&quot;add-button&quot;&gt;+&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;subtract-button&quot;&gt;-&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;multiply-button&quot;&gt;*&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;divide-button&quot;&gt;/&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;modulo-button&quot;&gt;%&lt;/button&gt; &lt;button type=&quot;button&quot; id=&quot;clear-button&quot;&gt;Clear&lt;/button&gt; &lt;p id=&quot;result&quot;&gt;&lt;/p&gt; &lt;/form&gt; &lt;script&gt; function binaryToDecimal(binary) { var decimal = 0; var power = 0; for (var i = binary.length - 1; i &gt;= 0; i--) { decimal += binary[i] * Math.pow(2, power); power++; } return decimal; } function decimalToBinary(decimal) { var binary = &quot;&quot;; while (decimal &gt; 0) { binary = decimal % 2 + binary; decimal = Math.floor(decimal / 2); } return binary; } function add(a, b) { return a + b; } function subtract(a, b) { return a - b; } function multiply(a, b) { return a * b; } function divide(a, b) { return a / b; } function modulo(a, b) { return a % b; } function calculate(a, b, operation) { var decimalA = binaryToDecimal(a); var decimalB = binaryToDecimal(b); var decimalResult = operation(decimalA, decimalB); var binaryResult = decimalToBinary(decimalResult); return binaryResult; } var firstNumber = document.getElementById(&quot;first-number&quot;); var secondNumber = document.getElementById(&quot;second-number&quot;); var addButton = document.getElementById(&quot;add-button&quot;); var subtractButton = document.getElementById(&quot;subtract-button&quot;); var moduloButton = document.getElementById(&quot;modulo-button&quot;); var clearButton = document.getElementById(&quot;clear-button&quot;); var result = document.getElementById(&quot;result&quot;); addButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, add); }); subtractButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, subtract); }); multiplyButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, multiply); }); divideButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, divide); }); moduloButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, modulo); }); clearButton.addEventListener(&quot;click&quot;, function() { firstNumber.value = &quot;&quot;; secondNumber.value = &quot;&quot;; result.innerHTML = &quot;&quot;; }); &lt;/script&gt; &lt;/body&gt; &lt;/html var multiplyButton = document.getElementById(&quot;multiply-button&quot;); var divideButton = document.getElementById(&quot;divide-button&quot;); var moduloButton = document.getElementById(&quot;modulo-button&quot;); var clearButton = document.getElementById(&quot;clear-button&quot;); var result = document.getElementById(&quot;result&quot;); addButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, add); }); subtractButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, subtract); }); multiplyButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, multiply); }); divideButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, divide); }); moduloButton.addEventListener(&quot;click&quot;, function() { result.innerHTML = calculate(firstNumber.value, secondNumber.value, modulo); }); clearButton.addEventListener(&quot;click&quot;, function() { firstNumber.value = &quot;&quot;; secondNumber.value = &quot;&quot;; result.innerHTML = &quot;&quot;; }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; . File &lt;tokenize&gt;:112 &lt;/script&gt; ^ IndentationError: unindent does not match any outer indentation level .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/11/17/.binarycalc.html",
            "relUrl": "/2022/11/17/.binarycalc.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Binary Logic and Abstraction",
            "content": "Binary, Data, Data Structures, Data Abstraction (ASCII, Unicode, Color Codes), . Algorithms, Data and Data Structures go together. It is required to have a data topic as you venture into Algorithms and Lessons. This blog is a collection of binary, data and data structures that should be your data topic!!! Use a data topic as you learn algorithms and programming. . Explore that topic in Computer Science manner (research, jupyter notebooks, frontend / backend coding) | Build a lesson that is more interesting, by explaining an algorithm and logic using a data topic. | Teach with examples… Segment from CS50 and go to minute 13:15. | Tour the Code. Use Binary Frontend Code to get you started. Better clone APCSP project drag and drop _posts/2022-07-07-PBL-binary.md to your project and Debug | This Tech Talk will finish by reviewing hacks, the remainder of this blog and Binary Frontend Code is part of your research. | . Math in Binary . Learn binary by bitwise operators and more. Shifting bits is a common computer operation and does wonderful things in math like multiply and divide. Last bit always determines odd or even. Look for shift on w3schools . Logic of Shift . Explore right and left shifts with binary numbers. . In an arithmetic shift, the bits that are shifted out of either end are discarded. | In a left arithmetic shift, zeros are shifted in on the right. | . Understand binary Numbers by elaboration of Shift (2^^0, 2^^1, 2^^2) . How does the Power of 2 work? What is a binary number? What is Base2, Base10, Base16. . This example uses an 8-bit register. Math can be represented in much in many more bits, 32 bits or 2 bytes is common for integer in modern computer languages. | Most Significant Bit (MSB), least (LSB) | This example shows negative and positive numbers, using technique called Twos Complement. | In the first case, the leftmost digit was shifted past the end of the register, and a new 0 was shifted into the rightmost position. Positive Multiply. | In the second case, the rightmost 1 was shifted out, and a new 1 was copied into the leftmost position, preserving the sign of the number. Negative Divide, this example obviously needs more study. | . UI Concept/Design . Conceptualize on a UI that will illustrate binary and decimal. In learning these concepts, it is best to code and example to illustrate what is happening. . n Right Shifts (divides by 2^n); n Left Shifts (multiplies by 2^n) | Add buttons for “«” and “ »” | . ASCII and Unicode . Computers represent more than Math. Mostly everyone is familiar with the characters on a keyboard and Emojis. These are all represented in binary, the data abstraction being the characters we visualize. 😂 . Character Data Abstraction . How are characters stored? How many bits do they take? . ASCII is 8 bits, it generally represent keys on keyboard. Look up ASCII Table. | Unicode can be UTF-8, 16 or 32, each representing bits. ASCII is preserved in Unicode. | ASCII - 7 bits, extended to 8 bits with Unicode | UTF-8 | UTF-16 | UTF-32 Sample of Unicode characters. | . UI Concept/Design . The ASCII value in picture should be change based off of the bits in evaluation you are doing. Bits displayed, label, and evaluation would be specific to evaluation type: Original ASCII . Color Codes . Pixels are little dots on Monitors and TVs that make up the display. Each pixel has an Red Green and Blue value (RGB). All pictures we see or take are composed of RGB using a density measurement. These are stored and then represented by digitally or in print. . Monitors 1280 x 1024 Super-eXtended Graphics Array (SXGA) | 1366 x 768 High Definition (HD) | 1600 x 900 High Definition Plus (HD+) | 1920 x 1080 Full High Definition (FHD) | 1920 x 1200 Wide Ultra Extended Graphics Array (WUXGA) | . | TVs 4K Ultra HD: The term 4K means the screen is about 4,000 pixels wide. … | 1080p (Full HD): This resolution is 1,920 x 1,080 pixels. … | 720p (HD Ready): This is mostly found on smaller TVs, and it has a resolution of 1,280 x 720. | . | Camera |Sensor Resolution (megapixels)|Typical Image Resolution (pixels)| |2.16|1800 x 1200| |3.9|2272 x 1704| |5.0|2592 x 1944| |7.1|3072 x 2304| |8.0|3264 x 2448| |10.0|3648 x 2736| |12.1|4000 x 3000| |14.7|4416 x 3312| |21.0|5616 x 3744| | . A Color code is a 24 bit abstraction. . There are 8 bits for Red, 8 bits for Blue, and 8 bits for Green. . Name | Hex Code | RGB Code | . Black | #000000 | rgb(0, 0, 0) | . Red | #FF0000 | rgb(255, 0, 0) | . Maroon | #800000 | rgb(128, 0, 0) | . Yellow | #FFFF00 | rgb(255, 255, 0) | . 255 * 255 * 255 combinations of R, G, B . UI Design . Here is a sample program a student used to visualize color by turning buttons on and off. by Anthony Vo 3 rows representing R, G, B Resulting color displayed in block . Logic Gates . The fundamentals of all decisions in computers is made by logic gates. These gates are visualized by permuting 1 and 0 across many different types of decisions. The result is an expression that evaluated to 1 or 0. These are called Truth Tables. . Logic Gates can be simulated with 2 bits . Look for bitwise operators on w3schools . UI Concept . Visual concept of logic gates . Establish check boxes for A / B on and off | Show result of Boolean Expression using Gate visual Logic Gates | . UI Design . Logic gate lab in JavaScript by Kylie Scharf AB checkboxes with Submit button Table with Symbol, Description, and Result . Logic of Logic Gates . A logic gate can have two inputs (a,b) and by how changing these inputs it impacts the output(c). . There are four possible inputs: 0 0 | 0 1 | 1 0 | 1 1 | . | Understanding the output enables us to understand a logical expressions. All outputs are routed in Logic Gates (similar to how a language is routed in Latin). AND is true for 1 1; NAND is true opposite of AND 0 0, 0 1, 1 0 | OR is true for 1 1, 0 1, 1 0, NOR is true opposite of OR 0 0 | XOR is true for 0 1, 1 0 | . | . Practical Application . Logic gates are used everywhere . Unsigned Addition . Here we are requesting 3 rows of bits to simulate Math. This could be done with 4, 8, or 16 bits. . Initial UI Implementation . Action buttons for +1 and -1 Additional actions for Turn On and Turn Off . Unsigned Addition . . Signed Addition . Integers in most languages are int8, int16, int32, or int64. They typically reserve left most bit for sign. . Common concept for Integer Math . Positive number . Basic concept, but not typically used . Negative number . Inverting numbers, twos complement . Two’s complement allows adding for signed and unsigned numbers . Basic concept is to invert/negate bits to produce negative. This allows numbers to be added together for expected results. » and »&gt; have been adapted to handle signed and zero filled shifting. . Technical helpers . Harvard CS50 minute 0 to minute 50 to provide background on some of the information below. . Algorithm in Jinja2 to limit Bits per row . 8 images per row by Kylie Scharf Modulo 8 algorithm add &lt;tr&gt; for every eight bits (code). . Research Helpers . CHAPTER 8 - Binary Addition and Two’s Complement Overview find by Val Wilson . Hacks . Data, Data Structures, and Algorithms work together. Data helps supply an interests/topic to an algorithm. It will be expected that you have a topic as you go through various algorithms. . Use data abstraction (ie data structures) in your lesson | Make sure you teach/learn elements from this blog as you learn algorithms | Add “Science” into your process (research, jupyter notebook, and ultimately running application) | Topics used in teaching, not listed in lesson/labs/homework need to be approved by Teacher. The topics above focus on data ideas from Unit 2 of AP Classroom. | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/1.d/2.b/3.c/c4/4/2022/11/14/AP-binary_logic.html",
            "relUrl": "/1.d/2.b/3.c/c4/4/2022/11/14/AP-binary_logic.html",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Finals Week Trimester 1",
            "content": "Overall Class Experience . This was quite an informative class that has helped me step into the world of Computer Science. I enjoyed the various projects and assignments given to us, as they helped us develop skills that we can use in the future. . Night at the Museum Experience . Night at the Museum was a very interesting and awesome experience. Some notable works I saw were a recreation of Kahoot and a Marvel comic tracker. It was really cool to see the framework and code of various other teams across the AP CSP periods. It was also very gratifying to present our team&#39;s website, which was an NBA team tracker. There were many people that were intrigued with our project and gave us compliments. One particular moment I remember was a young child that asked us to input the Trailblazers, who were his favorite team. When we showed the information, he was really interested in our app and said that it was really cool. . Missed Problems . . The code segment first adds the values of x and y, then divides the sum by x, then prints the result. The value of x must not be 0; otherwise a divide-by-zero error will occur when result is divided by x. . . . If the number of units of electricity used is 25 or less, the cost is 5 times the number of units. Otherwise, the cost is 5 times the first 25 units plus 7 times the number of units above 25. For examples, if a customer used 32 units of electricity, they should be charged $5 for the first 25 and $7 for the additional 7 units (32 – 25 = 7 units), for a total charge of $174. . . . The first three statements assign values to the variables. The fourth statement assigns the value of y (which is 50) to x. The fifth statement assigns the value of z (which is 75) to y. The sixth statement assigns the value of x (which is 50) to z. Therefore, x and z both have the value 50. . . Problems/Difficulties . There were a few problems that I had issues with. I had previously watched the College board videos to help me prepare for this quiz. I found that though I was quite prepared, there were some problems that were tricky. Another fault I found was that I went through this quiz a bit quickly, so some of these missed questions may be due to myself going over the quiz too quickly. I think that I need to practice more and look over more of the overall theory of this course. Since taking the test, I have taken a look at some online videos and read over the material on the College board website. . Links for help . https://apclassroom.collegeboard.org/103/assessments/results/48247192/performance/1519904?apd=t5x16fbkls https://apclassroom.collegeboard.org/103/assessments/results/48247192/performance/1519878?apd=8to186ayba https://apclassroom.collegeboard.org/103/assessments/results/48247192/performance/1519867?apd=n41wuewukt .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/finals/natm/collegeboard/2022/11/07/FinalsWeek.html",
            "relUrl": "/markdown/finals/natm/collegeboard/2022/11/07/FinalsWeek.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Qualcomm Career Series Notes",
            "content": ". What I learned… . The Qualcomm Career Series events helped me understand the importance of leadership and working in teams. From the presentations, I learned about how essential it is to be able to work together with a team in order to help solve problems. Furthermore, it was noted that scrum-like processes and working in groups allows us to work more efficiently - freeing up the mental capacity that we need to help innovate. Two important messages I heard in the presentations were “Whenever any doubt enters your mind, remember that you can lead from any chair.” The other message was to always ask “What is the purpose?” in regards to what we are/are trying to achieve with our team. I could relate to the first message as I am my table’s scrum master, which involves me having to take charge and lead my team, filling in any roles when necessary. The second message helped to open my mind in terms of not just following instructions, but to go above and beyond - asking questions helps us learn more. Finally, the last key thing I learned from the seminar was to never question yourself. You do not want to think that you do not deserve a certain role or job in a company, as that can affect our performance- if we question our own abilities, then we can never see our true potential. These were the key principles that I have learned from the Qualcomm Career Series presentations. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/markdown/md/qualcomm/notes/2022/10/18/qcom-notes.html",
            "relUrl": "/fastpages/markdown/md/qualcomm/notes/2022/10/18/qcom-notes.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Fixing Errors (Menu Problem)",
            "content": "import sys total = 0 menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;Burger&quot;: 3.99, &quot;Fries&quot;: 1.99, &quot;Drink&quot;: 0.99} print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) ordering = True while ordering: food = input(&quot;Please select an item from the menu. Press enter when you are done.&quot;) if food in menu: total += menu[food] print(&quot;Your total: $&quot; + &quot;{:.2f}&quot;.format(total)) else: print(&quot;Your order will be ready soon!&quot;) ordering = False . Menu burger $3.99 fries $1.99 drink $0.99 Your total: $3.99 Your total: $5.98 Your total: $6.97 Your total: $7.96 Your total: $11.95 Your order will be ready soon! .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/python/lists/iterations/menu/2022/10/10/ErrorFixing.html",
            "relUrl": "/fastpages/python/lists/iterations/menu/2022/10/10/ErrorFixing.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "API Usage",
            "content": "import requests url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;d3a3e94748msh74bb629320d5734p160ceajsn7f28f4859ea2&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;Niue&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . Country Totals country_name Niue cases 8 deaths 0 region total_recovered 7 new_deaths 0 new_cases 0 serious_critical 0 active_cases 1 total_cases_per_1m_population 4,860 deaths_per_1m_population 0 total_tests 0 tests_per_1m_population 0 . import requests url = &quot;https://car-data.p.rapidapi.com/cars&quot; querystring = {&quot;limit&quot;:&quot;50&quot;,&quot;page&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;d3a3e94748msh74bb629320d5734p160ceajsn7f28f4859ea2&quot;, &quot;X-RapidAPI-Host&quot;: &quot;car-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) output = response.json() for car in output: if car[&quot;make&quot;] == &quot;Ford&quot;: print(f&quot;{car[&#39;year&#39;]} {car[&#39;make&#39;]} {car[&#39;model&#39;]}&quot;) . 1999 Ford Taurus 2011 Ford E350 Super Duty Cargo 2003 Ford F250 Super Duty Super Cab 2017 Ford Escape . import requests url = &quot;https://yahoo-finance97.p.rapidapi.com/stock-info&quot; payload = &quot;symbol=MYOV&quot; headers = { &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;X-RapidAPI-Key&quot;: &quot;d3a3e94748msh74bb629320d5734p160ceajsn7f28f4859ea2&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-finance97.p.rapidapi.com&quot; } response = requests.request(&quot;POST&quot;, url, data=payload, headers=headers) print(response.text) . {&#34;data&#34;:{&#34;52WeekChange&#34;:0.1451236,&#34;SandP52WeekChange&#34;:-0.17819631,&#34;address1&#34;:&#34;11-12 St. James u2019s Square&#34;,&#34;address2&#34;:&#34;Suite 1, 3rd Floor&#34;,&#34;algorithm&#34;:null,&#34;annualHoldingsTurnover&#34;:null,&#34;annualReportExpenseRatio&#34;:null,&#34;ask&#34;:24.64,&#34;askSize&#34;:1200,&#34;averageDailyVolume10Day&#34;:823510,&#34;averageVolume&#34;:975060,&#34;averageVolume10days&#34;:823510,&#34;beta&#34;:2.120854,&#34;beta3Year&#34;:null,&#34;bid&#34;:24.44,&#34;bidSize&#34;:800,&#34;bookValue&#34;:-5.055,&#34;category&#34;:null,&#34;circulatingSupply&#34;:null,&#34;city&#34;:&#34;London&#34;,&#34;coinMarketCapLink&#34;:null,&#34;companyOfficers&#34;:[],&#34;country&#34;:&#34;United Kingdom&#34;,&#34;currency&#34;:&#34;USD&#34;,&#34;currentPrice&#34;:24.54,&#34;currentRatio&#34;:1.887,&#34;dateShortInterest&#34;:1664496000,&#34;dayHigh&#34;:24.755,&#34;dayLow&#34;:24.27,&#34;debtToEquity&#34;:null,&#34;dividendRate&#34;:null,&#34;dividendYield&#34;:null,&#34;earningsGrowth&#34;:null,&#34;earningsQuarterlyGrowth&#34;:null,&#34;ebitda&#34;:-137992992,&#34;ebitdaMargins&#34;:-0.45036998,&#34;enterpriseToEbitda&#34;:-17.136,&#34;enterpriseToRevenue&#34;:7.718,&#34;enterpriseValue&#34;:2364714496,&#34;exDividendDate&#34;:null,&#34;exchange&#34;:&#34;NYQ&#34;,&#34;exchangeTimezoneName&#34;:&#34;America/New_York&#34;,&#34;exchangeTimezoneShortName&#34;:&#34;EDT&#34;,&#34;expireDate&#34;:null,&#34;fiftyDayAverage&#34;:19.9926,&#34;fiftyTwoWeekHigh&#34;:25.7,&#34;fiftyTwoWeekLow&#34;:7.67,&#34;financialCurrency&#34;:&#34;USD&#34;,&#34;fiveYearAverageReturn&#34;:null,&#34;fiveYearAvgDividendYield&#34;:null,&#34;floatShares&#34;:43565801,&#34;forwardEps&#34;:-0.97,&#34;forwardPE&#34;:-25.29897,&#34;freeCashflow&#34;:-76240872,&#34;fromCurrency&#34;:null,&#34;fullTimeEmployees&#34;:579,&#34;fundFamily&#34;:null,&#34;fundInceptionDate&#34;:null,&#34;gmtOffSetMilliseconds&#34;:&#34;-14400000&#34;,&#34;grossMargins&#34;:0.44973,&#34;grossProfits&#34;:72018000,&#34;heldPercentInsiders&#34;:0.52866,&#34;heldPercentInstitutions&#34;:0.33176997,&#34;impliedSharesOutstanding&#34;:0,&#34;industry&#34;:&#34;Biotechnology&#34;,&#34;isEsgPopulated&#34;:false,&#34;lastCapGain&#34;:null,&#34;lastDividendDate&#34;:null,&#34;lastDividendValue&#34;:null,&#34;lastFiscalYearEnd&#34;:1648684800,&#34;lastMarket&#34;:null,&#34;lastSplitDate&#34;:null,&#34;lastSplitFactor&#34;:null,&#34;legalType&#34;:null,&#34;logo_url&#34;:&#34;https://logo.clearbit.com/myovant.com&#34;,&#34;longBusinessSummary&#34;:&#34;Myovant Sciences Ltd., a biopharmaceutical company, develops redefine care for women and for men. The company&#39;s lead product is relugolix, an oral, once-daily, small molecule that acts as a gonadotropin-releasing hormone receptor antagonist for the treatment of heavy menstrual bleeding related with uterine fibroids, endometriosis-associated pain, and advanced prostate cancer. It is also developing MVT-602, an oligopeptide kisspeptin agonist, which is in Phase II clinical trial for the treatment of female infertility as part of assisted reproduction. Myovant Sciences Ltd. has collaboration with Pfizer Inc. to develop and commercialize relugolix in oncology and women&#39;s health. The company was formerly known as Roivant Endocrinology Ltd. and changed its name to Myovant Sciences Ltd. in May 2016. The company was incorporated in 2016 and is based in London, the United Kingdom. Myovant Sciences Ltd. is a subsidiary of Sumitovant Biopharma Ltd.&#34;,&#34;longName&#34;:&#34;Myovant Sciences Ltd.&#34;,&#34;market&#34;:&#34;us_market&#34;,&#34;marketCap&#34;:2354078208,&#34;maxAge&#34;:1,&#34;maxSupply&#34;:null,&#34;messageBoardId&#34;:&#34;finmb_403430039&#34;,&#34;morningStarOverallRating&#34;:null,&#34;morningStarRiskRating&#34;:null,&#34;mostRecentQuarter&#34;:1656547200,&#34;navPrice&#34;:null,&#34;netIncomeToCommon&#34;:-165560000,&#34;nextFiscalYearEnd&#34;:1711843200,&#34;numberOfAnalystOpinions&#34;:3,&#34;open&#34;:24.26,&#34;openInterest&#34;:null,&#34;operatingCashflow&#34;:-231387008,&#34;operatingMargins&#34;:-0.45491,&#34;payoutRatio&#34;:0,&#34;pegRatio&#34;:null,&#34;phone&#34;:&#34;44 20 7400 3351&#34;,&#34;preMarketPrice&#34;:null,&#34;previousClose&#34;:24.31,&#34;priceHint&#34;:2,&#34;priceToBook&#34;:null,&#34;priceToSalesTrailing12Months&#34;:7.682998,&#34;profitMargins&#34;:-0.54034,&#34;quickRatio&#34;:1.71,&#34;quoteType&#34;:&#34;EQUITY&#34;,&#34;recommendationKey&#34;:&#34;strong_buy&#34;,&#34;recommendationMean&#34;:1.5,&#34;regularMarketDayHigh&#34;:24.755,&#34;regularMarketDayLow&#34;:24.27,&#34;regularMarketOpen&#34;:24.26,&#34;regularMarketPreviousClose&#34;:24.31,&#34;regularMarketPrice&#34;:24.54,&#34;regularMarketVolume&#34;:665300,&#34;returnOnAssets&#34;:-0.14667,&#34;returnOnEquity&#34;:null,&#34;revenueGrowth&#34;:1.837,&#34;revenuePerShare&#34;:3.263,&#34;revenueQuarterlyGrowth&#34;:null,&#34;sector&#34;:&#34;Healthcare&#34;,&#34;sharesOutstanding&#34;:95928200,&#34;sharesPercentSharesOut&#34;:0.038,&#34;sharesShort&#34;:3642652,&#34;sharesShortPreviousMonthDate&#34;:1661904000,&#34;sharesShortPriorMonth&#34;:3300387,&#34;shortName&#34;:&#34;Myovant Sciences Ltd.&#34;,&#34;shortPercentOfFloat&#34;:0.0797,&#34;shortRatio&#34;:4.7,&#34;startDate&#34;:null,&#34;strikePrice&#34;:null,&#34;symbol&#34;:&#34;MYOV&#34;,&#34;targetHighPrice&#34;:27,&#34;targetLowPrice&#34;:20,&#34;targetMeanPrice&#34;:23.33,&#34;targetMedianPrice&#34;:23,&#34;threeYearAverageReturn&#34;:null,&#34;toCurrency&#34;:null,&#34;totalAssets&#34;:null,&#34;totalCash&#34;:356751008,&#34;totalCashPerShare&#34;:3.719,&#34;totalDebt&#34;:367387008,&#34;totalRevenue&#34;:306400992,&#34;tradeable&#34;:false,&#34;trailingAnnualDividendRate&#34;:0,&#34;trailingAnnualDividendYield&#34;:0,&#34;trailingEps&#34;:-2.22,&#34;twoHundredDayAverage&#34;:14.30585,&#34;volume&#34;:665300,&#34;volume24Hr&#34;:null,&#34;volumeAllCurrencies&#34;:null,&#34;website&#34;:&#34;https://myovant.com&#34;,&#34;yield&#34;:null,&#34;ytdReturn&#34;:null,&#34;zip&#34;:&#34;SW1Y 4LB&#34;},&#34;message&#34;:&#34;Success&#34;,&#34;status&#34;:200} .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/python/api/2022/10/06/api-python.html",
            "relUrl": "/fastpages/python/api/2022/10/06/api-python.html",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "AP Prep Multiple Choice",
            "content": ". Week 7 Questions/Concerns/Comments . These questions were helpful in developing my understanding of units 1.1 - 1.3 | I got them all correct, so I do not have any specific questions in regards to the quizzes | . For this question, I was able to recall that messages are broken up into packets from out tech talk. Each individual packet contains data that is transmitted. There is also metadata that is used for routing and reassembling the data once it is received - allowing the packets to be received in any order while being able to be reassembled correctly. . After answering this question, I grew an interest in regards to the topic of protocols and found that protocols are agreed-upon a specific sets of rules that identifies the behavior of a given system. Protocols can be utilized on the Internet, as it can enable devices from various companies use a standardized form of communication. . This problem was quite straightforward, I used prior knowledge that the Internet is an interconnected network of many different networks. The Internet allows access to the World Wide Web (information system). .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/college%20board/quiz/2022/10/04/MCQs.html",
            "relUrl": "/markdown/college%20board/quiz/2022/10/04/MCQs.html",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "My Quiz",
            "content": "&lt;body&gt; &lt;/body&gt; .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/quiz/2022/09/30/stubbystubstub.html",
            "relUrl": "/fastpages/jupyter/quiz/2022/09/30/stubbystubstub.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Test",
            "content": "{ “cells”: [ { “cell_type”: “code”, “execution_count”: null, “metadata”: { “vscode”: { “languageId”: “javascript” } }, “outputs”: [], “source”: [ “console.log(&quot;Hello World&quot;)” ] } ], “metadata”: { “language_info”: { “name”: “python” }, “orig_nbformat”: 4 }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/09/26/test.ipynb",
            "relUrl": "/2022/09/26/test.ipynb",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Scrum Team",
            "content": "Scrum Master: Ethan Tran | DevOPs: Rohin Sood | Frontend Devs: Luna Iwazaki, Taiyo Iwazaki | Backend Dev: Parav Salaniwal | . .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/scrum/2022/09/26/scrumteam.html",
            "relUrl": "/scrum/2022/09/26/scrumteam.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Java Script Table",
            "content": "",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/javascript/table/html/2022/09/25/javascript-table.html",
            "relUrl": "/fastpages/jupyter/javascript/table/html/2022/09/25/javascript-table.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Title",
            "content": "x = input() h = input() b = input() y = input() k = input() a = input() vertices = print(h + a , k) print(vertices) . 05.65685425 -5 None .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/09/25/ellipsecalc.html",
            "relUrl": "/2022/09/25/ellipsecalc.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Scrum Team Review (Python Web Server)",
            "content": "Rohin Sood . In-depth commentary regarding the process of running the local flask and fastpages servers | Detailed python explanation ie. going in-depth on the ports and changes | Completely demonstrates commits, syncs, and changes to each local server - as well as a permanent change to his fastpages website | . Grade &amp; Final Statement . Rohin, overall your video was detailed and was easy to follow along. Despite these successes, it was still well above the time limit of around 1 minute, for that I would have to give you a 2.6. . Taiyo Iwazaki . Nice editing of the video itself | Contains all of the necessary demonstrations ie. local servers &amp; committing to GitHub | Features the Human Day Notes | . Grade &amp; Final Statement . Taiyo, great job on the video, I appreciate the use of text labels and background music. Your project has all of the necessary components but it is quite long and is above the expected duration of 1 minute. Due to that, I would have to give you a 2.6. . Luna Iwazaki . Displays all of the processes | Straight to the point and easy to follow | Edits make the video asthetically pleasing | . Grade &amp; Final Statement . Luna, nice job! Your video is straight to the point as mentioned above, and you have all of the needed processes and changes working/running. For that, I would grade you a 2.7. . Parav Jaiswal . TBD .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/scrum/python%20web%20server/local/server/2022/09/22/scrumreviewwk4.html",
            "relUrl": "/fastpages/jupyter/scrum/python%20web%20server/local/server/2022/09/22/scrumreviewwk4.html",
            "date": " • Sep 22, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Title",
            "content": "console.log(&quot;Hello World&quot;) . NameError Traceback (most recent call last) c: Users etran Documents GitHub fastpages_EthanT _notebooks 2022-09-21-js.ipynb Cell 1 in &lt;cell line: 1&gt;() -&gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/etran/Documents/GitHub/fastpages_EthanT/_notebooks/2022-09-21-js.ipynb#W0sZmlsZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; console.log(&#34;Hello World&#34;) NameError: name &#39;console&#39; is not defined .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/09/21/js.html",
            "relUrl": "/2022/09/21/js.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Human Day Notes",
            "content": "Basic Notes . Many college students across the nation report feelings of... . Stress | Anxiety | Loneliness | Overwhelming | . Key Takeaways/Insights . - You can control your happiness - Personal circumstances don’t matter that much - Real, hard work takes the moost effort - It takes daily effort and a lot of work to be happier - To help yourself, you must help others - Allow time for gratitude - Sleep - Exercise - Savor the good things in life - We are wealthy in time | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/human%20day/notes/2022/09/15/HumanDayNotes.html",
            "relUrl": "/fastpages/human%20day/notes/2022/09/15/HumanDayNotes.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "App Story-Boarding/Planning",
            "content": "PBL Prototyping (planning, purpose, and function) . Link to my scrum-board | I want to make a personality quiz | The quiz will use a points system | The quiz will also store data so people can see previously recorded results | The actual “score” will not be displayed, rather the given personality | The personality will have to be calculated using the score | For theming, I want to make the quiz to determine whether someone is a “Early Bird” or a “Night Owl” | Similar to my fastpages, the colors will mostly consist of light blue and white | . PBL Code/Code/Coding (Use data abstraction, code management, etc.) . Through a simple onClick function, I am able to create buttons | The functions allow me to add points and switch pages for the given buttons | The points system uses variables (“a” &amp; “b”), “a” is for the Early Birds, while “b” is for the Night Owls. | I found that using the createRecord block, I can store data that is saved even after the application is closed. | Through the records, I can display past results and update the records in real-time (data abstraction). | . Note: I will need time to collect data to show for the demo of the application . PBL Test . Using a test-driven development (TDD), I have now been able to complete the first rendition of my app. | The application works as it should be and is ready to be demoed | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/storyboard/planning/applab/2022/09/09/App-Plan.html",
            "relUrl": "/markdown/storyboard/planning/applab/2022/09/09/App-Plan.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Testing dictionaries, lists, and iterations",
            "content": "print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Ethan Tran&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 15 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot; , &quot;Bash&quot; , &quot;C&quot; , &quot;R&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs, } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Ethan Tran &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 15 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 100.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;C&#39;, &#39;R&#39;] &lt;class &#39;list&#39;&gt; length 6 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Ethan Tran&#39;, &#39;age&#39;: 15, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;C&#39;, &#39;R&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Ethan Tran &lt;class &#39;str&#39;&gt; . Color = &quot;Red&quot; ; &quot;Blue&quot; ; &quot;Green&quot; ; &quot;Yellow&quot; ; &quot;Purple&quot; name = &quot;Ethan&quot; ; &quot;John&quot; ; &quot;Jane&quot; age = &quot;15&quot; ; &quot;17&quot; ; &quot;20&quot; print(&quot;/&quot; , Color) print(&quot;//&quot; , name) print(&quot;///&quot; , age) Person = { &quot;Color&quot;: Color, &quot;name&quot;: name, &quot;age&quot;: age } print(Person) . / Red // Ethan /// 15 {&#39;Color&#39;: &#39;Red&#39;, &#39;name&#39;: &#39;Ethan&#39;, &#39;age&#39;: &#39;15&#39;} .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/dictionary/dictionaries/lists/iterations/2022/09/03/test-lists.html",
            "relUrl": "/fastpages/jupyter/dictionary/dictionaries/lists/iterations/2022/09/03/test-lists.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Lists, Dictionaries, & Iterations",
            "content": "Lists, Dictionaries, &amp; Iterations (input) . Using a list, I can set-up the to-be list of vocabulary | The list goes up to 6 inputs thus, the range is equates to 6 | The &quot;Word&quot; and &quot;Definition&quot; are set as inputs that can be set by the user | The &quot;Vocabulary&quot; is the final product as a result of the user&#39;s inputs | Vocabulary = {} for i in range(6): Word = input(&quot; &quot;) Definition = input(&quot; &quot;) Vocabulary[Word] = Definition print(Vocabulary) . {&#39;Sequence&#39;: &#39;Two or more lines of code&#39;, &#39;Key&#39;: &#39;A mix of fields used to take and sort rows from a given criteria&#39;, &#39;Value&#39;: &#39;Representation of an entity that can be changed by a given program&#39;, &#39;Import&#39;: &#39;A command that is used to add additional functions that have been previously developed&#39;, &#39;If&#39;: &#39;A command that is used to determine whether a response is correct or incorrect based on previously set expressions/conditions&#39;, &#39;Expression&#39;: &#39;Used in an if statement to determine whether a given command is right or wrong&#39;} . Personalized InfoDB (for + while loops &amp; recursive function) . Set InfoDB as a list | Using the &quot;.append&quot; expression, I can personalize (add) to my lists | Set up the data structure of the lists | Print the data structure to prepare it before formatting | The &quot;for_loop&quot; takes the data from &quot;InfoDB&quot; until the list is empty | Using the &quot;while_loop,&quot; the function will count through the elements of the list from zero until the end | The &quot;recursive_loop&quot; will continue to run itself within the given &quot;if&quot; statement until the end of the program | InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;Ethan&quot;, &quot;LastName&quot;: &quot;Tran&quot;, &quot;Birth_Month&quot;: &quot;May&quot;, &quot;Sports&quot;: [&quot;Basketball&quot; , &quot;Track&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Sean&quot;, &quot;LastName&quot;: &quot;Tran&quot;, &quot;Birth_Month&quot;: &quot;December&quot;, &quot;Sports&quot; : [&quot;Basketball&quot; , &quot;Track&quot; , &quot;Volleyball&quot;] }) def print_data(person): print(&quot;Name &quot; + person[&quot;FirstName&quot;] + person[&quot;LastName&quot;]) print(person[&quot;Birth_Month&quot;] + person[&quot;Sports&quot;]) print(InfoDb) def for_loop(): for person in InfoDB: print_data(person) def while_loop(): i = 0 while i &lt; len(InfoDb): print_data(InfoDb[i]) i = i + 1 def recursive(index): if index &gt;= len(InfoDb): return print_data(InfoDB[index]) return recursive(index + 1) . [{&#39;FirstName&#39;: &#39;Ethan&#39;, &#39;LastName&#39;: &#39;Tran&#39;, &#39;Birth_Month&#39;: &#39;May&#39;, &#39;Sports&#39;: [&#39;Basketball&#39;, &#39;Track&#39;]}, {&#39;FirstName&#39;: &#39;Sean&#39;, &#39;LastName&#39;: &#39;Tran&#39;, &#39;Birth_Month&#39;: &#39;December&#39;, &#39;Sports&#39;: [&#39;Basketball&#39;, &#39;Track&#39;, &#39;Volleyball&#39;]}] . Quiz using lists, dictionaries, and iterations . Uses input to allow the questions to be answered | A questions dictionary and answers dictionary are each set | A while_loop allows data to be pulled from the dictionaries (named lists for the variables) until the number of questions and answers hit zero | import getpass, sys import random # Function to layout the questions and answers def ask_question (question, answer): # Allow answers to be typed in through input &amp; print the questions and answers print(question) ans = input(question) print(ans) # Print &quot;Correct!&quot;&quot; and add 1 point (through return) per correct answer if ans == answer: print(&quot;Correct!&quot;) return 1 # Print &quot;Wrong&quot; when an answer is incorrect and return 0 points else: print(&quot;Wrong&quot;) return 0 # A list of my questions and answers using the previously added &quot;ask_question&quot; function question_list = [&quot;Who was the first emperor of Imperial China?&quot; , &quot;What is 5 x 8?&quot; , &quot;How many states are there in the United States of America?&quot; , &quot;What command is used to include other functions that were previously developed?&quot; , &quot;What command is used to evaluate correct or incorrect response in this example?&quot; , &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot; , &quot;What iterates a sequence until the code is over?&quot; , &quot;What repeats a block of code as long as the expression remains true?&quot;] answer_list = [&quot;Qin&quot;, &quot;40&quot;, &quot;50&quot; , &quot;import&quot; , &quot;if&quot; , &quot;expression&quot; , &quot;for_loop&quot; , &quot;while_loop&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 6) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Congratulations!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Not bad, keep working! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Its okay, better luck next time!&quot;) .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/dictionary/dictionaries/lists/functions/for%20loop/while%20loop/recursive/2022/09/02/dictionary.html",
            "relUrl": "/fastpages/jupyter/dictionary/dictionaries/lists/functions/for%20loop/while%20loop/recursive/2022/09/02/dictionary.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Alumni Panel Takeaways",
            "content": "Enjoyed doing CS to numerous algorithms and code. . | Set a foundation and solidified a basic understanding of CS . | Set up the course of what they wanted to do in the future. . | . Why CS classes (AP CSP, CSA, etc.) were helpful… . Taking classes such as Intro to CS and CSP helped with web design and understanding interactions, UI, interface, etc. . | AP CSA helped build skills to help with real-world problems. . Ex. COVID-19 database project. . | . | . Challenges (at the start and even after highschool)… . Starting out and trying to maintain motivation - projects and understanding certain concepts can be quite frustrating for many people. . | Dealing with egos, people trying to flex their achievements - . Trying to focus on yourself and working on our own learning curve. . | . | . Learning CS theory, structures that were not thought about before . College courses are typically structured differently than high school classes. . | . | . Persevering through the problems and hardship - finding solutions. . | Making sure to not cut corners (don’t take the easy ways out)! . | Trying to go above and beyond the standard . | Adjusting to the way tests are done and how they are not always structured in a way that is totally straight-forward. . | . Project based learning (PBLs)… . PBLs and tests are typically similar/the same. Though, PBLs are largely embedded in CS as a whole, rather than just theory. . | Group studying helps with understanding concepts especially during project based learning . Don’t be scared to ask questions. . | . | . Applying CS in non-CS majors:… . Writing scripts to make life easier (ie. programming converters for documents) . | Programming stress tests, manipulating certain code from class to help them work better, or 3D printing are things that use CS. . | Problem solving skills developed during CS courses help you to learn other concepts such as mathematics. . | Majors like statistics and cognitive science are not technically CS majors, but prior programming knowledge can be helpful. . | . Jobs/internships with a professor or teacher… . Stand out to teachers, interact with them, go above and beyond, . | Submit resumes. . | Work close to what you want to specialize in. . | Work on personal projects to show that you know what you’re doing (even 2-3 projects is sufficient) . This shows a company/interviewer that you are knowledgeable in the field of computer science. . | Sorting algorithms and path finding are some examples of things one can program. . | . | Have a resume and know when to apply for said internships/jobs . Many companies try to hire a year before, at the beginning of the school year (early September - mid November) . | Apply ahead and have a resume done by that time . | Have a LinkedIn profile . | . | Build a network of people you know and reach out - add people on LinkedIn. . This helps with referrals and overall networking . | . | . Insight/takeaways… . What I noticed nearly all of the alumni talk about is perseverance through the tough errors and to stand out by going above and beyond in and out of class. Furthermore, I see that there are many uses of computer science outside of the typical CS field. For example, one can make a quick file converter to help convert files for class, which is a great example of an everyday use of computer science. In regards to jobs and internships, I noticed that most of the alumni said to work on personal projects and sign-up early for such opportunities. To add, some of the speakers noted that resumes and a LinkedIn account are also beneficial for the field CS and working as a whole. Specifically, a LinkedIn account is important because it helps you network and connect with people in the field, and these people can in turn - submit referrals or send links to internships or job opportunities. Many of these notes I know are very useful, due to the fact that they have helped my brother Sean, who is also an alumni of our school and was in the same classes as many of the alumni who presented today. All of the topics and subjects presented during this panel were very helpful, and I will use this knowledge to help myself in the future as I pursue the field of computer science. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/08/29/Alumni-Panel-Takeaways.html",
            "relUrl": "/2022/08/29/Alumni-Panel-Takeaways.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Principles And Elements Of Design",
            "content": "Ethan Tran . Mrs. Philyaw . Honors Humanities #1 . 19 August 2022 . Principles and Elements of Design . Elements of Design . Elements of design are structural parts of a work of art, which must be used according to principles of design in order to produce satisfactory work. Design is a structure of art with the elements and principles unifying the different parts and giving the work visual order. The elements and principles are always used in combination and therefore work together to create a work of art with good design. . SPACE: is absolutely necessary to all works of art because other elements are composed and developed within it. It can extend in either two (2-D) or three (3-D) dimensions. Space has no meaning until its limits are determined and its existence used. . FORMAT: once an artist has determined the size and shape of the area in which a work of art will be created, that area is referred to as the format. . POSITIVE SPACE: the interior area of a shape, object, or form. . NEGATIVE SPACE: the area exterior to, surrounding, or between shapes, objects, or forms. . LINE: is a basic structural element of art; all works of art have linear aspects. Paul Klee said, “A line is a dot going for a walk.” Lines may express response or excitement, strength or weakness, or other conditions. Lines have five characteristics: . LENGTH: short, long, continuous. . | WIDTH: thick, thin, carrying . | ATTITUDE: vertical, horizontal, diagonal . | CURVATURE: straight, shallow, tight . | TEXTURE: hard, soft, vibrant . | SHAPE: the shape is produced by a continuous line connecting with itself; is usually regarded as a two-dimensional flat object. . FORM: usually regarded as three-dimensional objects or a shape that has the appearance of depth. . MASS: Bulk, weight, and density of three-dimensional forms, either actual or implied. . VOLUME: Any three-dimensional quantity that is bound or enclosed, whether solid or void. . COLOR: is a quality of visual sensation usually evoked by light stimulating the cones of the retina of the eye. Color has four qualities: . HUE: the generic name of a color, such as red, yellow, etc. . | INTENSITY: the brightness or dullness of a color. . | VALUE: the lightness or darkness of a color. Helps us understand two-dimensional art . | TEMPERATURE: the warm or cool quality in the appearance of a color, for example orange is a warm color, and green is a cool color. . | TEXTURE: denotes the surface tactile qualities, usually described as being rough, smooth, coarse or fine, shiny or dull. The texture is understood through the sense of light. . TRUE (actual) TEXTURE: occurs when the surface feels as it appears. Easily found in nature. . FALSE (implied) TEXTURE: occurs when the actual surface appears to be a texture other than what it is; usually found in works of art. . Principles of Design . A principle is a rule to be followed in creating a design or composition. Design in the structure of art, with the elements and principles unifying the different parts and giving the work visual order. The elements and principles are always used in combination and therefore work together to create a work of art with good design. . BALANCE: equality of visual weight achieved through the use of one or more elements or design. . SYMMETRICAL (formal) BALANCE: occurs when the elements on one side of the center are identical (but mirrored) to those of the other side. . | Asymmetrical (informal) BALANCE: occurs when the elements on one side of the center are not identical to those on the other, yet appear visually equal. . | RADIAL BALANCE: is similar to formal balance, but based on a circle with the center focal point. . | . UNITY: harmonious relationship of parts creating a single main idea, emotion, or point of view; obtained by relating elements of design to each other. . REPETITION: unity is obtained by repeating specific elements of design to produce patterns and rhythms. . | PROGRESSION (movement): elements that cause the eye to move through a composition. . | . PATTERN: pattern uses the art elements in planned or random repetitions to enhance surfaces of paintings or sculptures. Patterns often occur in nature, and artists use similar repeated motifs to create patterns in their work. Pattern increases visual excitement by enriching the surface interest. . . MOVEMENT: Artists to direct viewers through their work, often to focal areas, use visual movement. Such movement can be directed along lines, edges, shapes, and colors within works, but moves the eye most easily on the paths of equal value. . &lt;- Ex: bc lines are used to replicate movement when not moving . EMPHASIS: that part of a composition that is most important presents the main idea of the work of art. . DOMINANCE: provides a center of interest, attracts attention, or makes one part of the composition appear most important. . | . DOMINANT: the most prominent principle of the most obvious in the influence of position. . | THEME &amp; VARIATION: an idea or dominant feature that gives the artwork its character; the subject of a work of art, sometimes with a number of phases or different examples. . | SUBORDINATION (sub-dominance): those elements that are less dominating but provide interest and background into the composition. . | REST AREAS: those places within a composition that are relatively vacant, often regarded as negative shapes or spaces. . | . RHYTHM: visual movement achieved as the viewer’s eyes progress throughout a composition, moving and resting in regular or varied measures. . REPETITION: of colors, shapes, textures, lines, etc. . | . HARMONY: the appearance of visual order obtained by relating elements of design to each other to create a sense of unity. . APPROPRIATENESS: suitability of fitness of an idea, theme motif, or purpose to elements, media, or materials used in the creation of a work of art. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/08/28/Principles-and-Elements-of-Design.html",
            "relUrl": "/2022/08/28/Principles-and-Elements-of-Design.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Ap Csp Notes",
            "content": "2 or more lines of code = sequence . | print(“) = a cmd or function . | Import lets you import alr made code . | Each if contains an “else” statement as well . | HACKS: Add a “yes” &amp; “no” . | add google doc to notebook in vs code as a “.docx” file! . | Organize blog by category (classes) . | Blog about or different classes . | “Frontmatter” allows the posts/notebooks to show up on our blog . | Key (know it!) . | Value (know it!) . | Mimic frontmatter in pages . | _pages is where to put a menu . | site.base.url tells system the “base” of ur “url” . | For quiz make function for each question and randomize them . | Git Pull goes to SSD . | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/2022/08/28/AP-CSP-Notes.html",
            "relUrl": "/2022/08/28/AP-CSP-Notes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Honors Humanities Notes",
            "content": "Elements of design . are structural parts of a work of art, which must be used according to principles of design in order to produce satisfactory work. Design is a structure of art with the elements and principles unifying the different parts and giving the work visual order. The elements and principles are always used in combination and therefore work together to create a work of art with good design. . SPACE: . is absolutely necessary to all works of art because other elements are composed and developed within it. It can extend in either two (2-D) or three (3-D) dimensions. Space has no meaning until its limits are determined and its existence used. . FORMAT: . once an artist has determined the size and shape of the area in which a work of art will be created, that area is referred to as the format. . POSITIVE SPACE: . the interior area of a shape, object, or form. . NEGATIVE SPACE: . the area exterior to, surrounding, or between shapes, objects, or forms. . LINE: . is a basic structural element of art; all works of art have linear aspects. Paul Klee said, “A line is a dot going for a walk.” Lines may express response or excitement, strength or weakness, or other conditions. Lines have five characteristics: . LENGTH: . short, long, continuous. . WIDTH: . thick, thin, carrying . ATTITUDE: . vertical, horizontal, diagonal . CURVATURE: . straight, shallow, tight . TEXTURE: . hard, soft, vibrant . SHAPE: . the shape is produced by a continuous line connecting with itself; is usually regarded as a two-dimensional flat object. . FORM: . usually regarded as three-dimensional objects or a shape that has the appearance of depth. . MASS: . Bulk, weight, and density of three-dimensional forms, either actual or implied. . VOLUME: . Any three-dimensional quantity that is bound or enclosed, whether solid or void. . COLOR: . is a quality of visual sensation usually evoked by light stimulating the cones of the retina of the eye. Color has four qualities: . HUE: . the generic name of a color, such as red, yellow, etc. . INTENSITY: . the brightness or dullness of a color. . VALUE: . the lightness or darkness of a color. Helps us understand two-dimensional art . TEMPERATURE: . the warm or cool quality in the appearance of a color, for example orange is a warm color, and green is a cool color. . TEXTURE: . denotes the surface tactile qualities, usually described as being rough, smooth, coarse or fine, shiny or dull. The texture is understood through the sense of light. . TRUE (actual) TEXTURE: . occurs when the surface feels as it appears. Easily found in nature. . FALSE (implied) TEXTURE: . occurs when the actual surface appears to be a texture other than what it is; usually found in works of art. . Principles of Design . A principle is a rule to be followed in creating a design or composition. Design in the structure of art, with the elements and principles unifying the different parts and giving the work visual order. The elements and principles are always used in combination and therefore work together to create a work of art with good design. . BALANCE: . equality of visual weight achieved through the use of one or more elements or design. . SYMMETRICAL: . (formal) BALANCE: occurs when the elements on one side of the center are identical (but mirrored) to those of the other side. . Asymmetrical: . (informal) BALANCE: occurs when the elements on one side of the center are not identical to those on the other, yet appear visually equal. . RADIAL BALANCE: . is similar to formal balance, but based on a circle with the center focal point. . UNITY: . harmonious relationship of parts creating a single main idea, emotion, or point of view; obtained by relating elements of design to each other. . REPETITION: . unity is obtained by repeating specific elements of design to produce patterns and rhythms. . PROGRESSION . (movement): elements that cause the eye to move through a composition. . PATTERN: . pattern uses the art elements in planned or random repetitions to enhance surfaces of paintings or sculptures. Patterns often occur in nature, and artists use similar repeated motifs to create patterns in their work. Pattern increases visual excitement by enriching the surface interest. . MOVEMENT: . Artists to direct viewers through their work, often to focal areas, use visual movement. Such movement can be directed along lines, edges, shapes, and colors within works, but moves the eye most easily on the paths of equal value. . Ex: bc lines are used to replicate movement when not moving | . EMPHASIS: . that part of a composition that is most important presents the main idea of the work of art. . DOMINANCE: . provides a center of interest, attracts attention, or makes one part of the composition appear most important. . DOMINANT: . the most prominent principle of the most obvious in the influence of position. . THEME &amp; VARIATION: . an idea or dominant feature that gives the artwork its character; the subject of a work of art, sometimes with a number of phases or different examples. . SUBORDINATION: . (sub-dominance): those elements that are less dominating but provide interest and background into the composition. . REST AREAS: . those places within a composition that are relatively vacant, often regarded as negative shapes or spaces. . RHYTHM: . visual movement achieved as the viewer’s eyes progress throughout a composition, moving and resting in regular or varied measures. . REPETITION: . of colors, shapes, textures, lines, etc. . HARMONY: . the appearance of visual order obtained by relating elements of design to each other to create a sense of unity. . APPROPRIATENESS: . suitability of fitness of an idea, theme motif, or purpose to elements, media, or materials used in the creation of a work of art. .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/2022/08/27/HonHum.html",
            "relUrl": "/markdown/2022/08/27/HonHum.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "AP Biology Notes",
            "content": "AP Biology . Chapter and Section . Evolution Figures #1 (7.1) . Evolution . A pattern and process | Evolution is NOT goal oriented | Individual organisms do not evolve. Populations evolve | Hardy Weinberg Equilibrium allows us to mathematically calculate allele frequency | Evolution is pressured and driven by environment | . Variation . Traits are heritable | Some organisms (i.e. spores &amp; humans) overproduce purposely | Overproduction is done as when there are low-resources, not all offspring survive - overproduction ensures that at least some organisms survive. | Three types of selection 1) Directionaly 2) Stationary 3) Disruptive | . Microevolution . Evolution of a group or species occurring over a small period of time | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/2022/08/27/APBio.html",
            "relUrl": "/markdown/2022/08/27/APBio.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "My Quiz",
            "content": "import getpass, sys import random # Function to layout the questions and answers def ask_question (question, answer): # Allow answers to be typed in through input &amp; print the questions and answers print(question) ans = input(question) print(ans) # Print &quot;Correct!&quot;&quot; and add 1 point (through return) per correct answer if ans == answer: print(&quot;Correct!&quot;) return 1 # Print &quot;Wrong&quot; when an answer is incorrect and return 0 points else: print(&quot;Wrong&quot;) return 0 # A list of my questions and answers using the previously added &quot;ask_question&quot; function question_list = [&quot;Who was the first emperor of Imperial China?&quot; , &quot;What is 5 x 8?&quot; , &quot;How many states are there in the United States of America?&quot; , &quot;What command is used to include other functions that were previously developed?&quot; , &quot;What command is used to evaluate correct or incorrect response in this example?&quot; , &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;] answer_list = [&quot;Qin&quot;, &quot;40&quot;, &quot;50&quot; , &quot;import&quot; , &quot;if&quot; , &quot;expression&quot;] # Set points to 0 at the start of the quiz points = 0 # If the length of the quiz is greater than 0, then random questions will be chosen from the &quot;question_list&quot; set while len(question_list) &gt; 0: index = random.randint(0, len(question_list) - 1) # The points system where a point is rewarded for each correct answer points = points + ask_question(question_list[index], answer_list[index]) # If a question or answer has already been used, then it shall be deleted del question_list[index] del answer_list[index] # Calculating score using the points system and dividing it by the total number of questions (6) score = (points / 6) # Calculating the percentage of correct answers by multiplying the score by 100 percent = (score * 100) # Printing the percentage, and formatting the percentage in a way where two decimals can be shown (through &quot;{:.2f}&quot;) print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Adding final remarks based upon the users given scores if points &gt;= 5: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Congratulations!&quot;) elif points == 4: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Not bad, keep working! &quot; ) else: print(&quot;Your total score is: &quot;, points, &quot;out of 6. Its okay, better luck next time!&quot;) . What command is used to evaluate correct or incorrect response in this example? Wrong Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? Wrong What is 5 x 8? Wrong Who was the first emperor of Imperial China? Wrong What command is used to include other functions that were previously developed? Wrong How many states are there in the United States of America? Wrong 0.00% Your total score is: 0 out of 6. Its okay, better luck next time! .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/quiz/2022/08/26/quiz.html",
            "relUrl": "/fastpages/jupyter/quiz/2022/08/26/quiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "First Markdown Post",
            "content": "Why Computer Science classes were enjoyable… . Enjoyed doing CS to numerous algorithms and code. | Set a foundation and solidified a basic understanding of CS | Set up the course of what they wanted to do in the future. Why CS classes (AP CSP, CSA, etc.) were helpful… . | Taking classes such as Intro to CS and CSP helped with web design and understanding interactions, UI, interface, etc. | AP CSA helped build skills to help with real-world problems. Ex. COVID-19 database project. Challenges (at the start and even after highschool)… . | Starting out and trying to maintain motivation - projects and understanding certain concepts can be quite frustrating for many people. | Dealing with egos, people trying to flex their achievements - | Trying to focus on yourself and working on our own learning curve. | Learning CS theory, structures that were not thought about before | College courses are typically structured differently than high school classes. | Persevering through the problems and hardship - finding solutions. | Making sure to not cut corners (don’t take the easy ways out)! | Trying to go above and beyond the standard Adjusting to the way tests are done and how they are not always structured in a way that is totally straight-forward. Project based learning (PBLs)… . | PBLs and tests are typically similar/the same. Though, PBLs are largely embedded in CS as a whole, rather than just theory. | Group studying helps with understanding concepts especially during project based learning | Don’t be scared to ask questions. Applying CS in non-CS majors:… . Writing scripts to make life easier (ie. programming converters for documents) Programming stress tests, manipulating certain code from class to help them work better, or 3D printing are things that use CS. Problem solving skills developed during CS courses help you to learn other concepts such as mathematics. Majors like statistics and cognitive science are not technically CS majors, but prior programming knowledge can be helpful. . Jobs/internships with a professor or teacher… . | Stand out to teachers, interact with them, go above and beyond, | Submit resumes. | Work close to what you want to specialize in. | Work on personal projects to show that you know what you’re doing (even 2-3 projects is sufficient) | This shows a company/interviewer that you are knowledgeable in the field of computer science. | Sorting algorithms and path finding are some examples of things one can program. | Have a resume and know when to apply for said internships/jobs | Many companies try to hire a year before, at the beginning of the school year (early September - mid November) | Apply ahead and have a resume done by that time | Have a LinkedIn profile | Build a network of people you know and reach out - add people on LinkedIn. | This helps with referrals and overall networking | .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/2022/08/26/APCSP.html",
            "relUrl": "/markdown/2022/08/26/APCSP.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Installation Checks (Bash)",
            "content": "Check for the necessary AP CSP tools (ie. JavaScript, Python3, and Bash) . python2 --version python3 --version . Python 2.7.18 Python 3.8.10 . conda activate jupyter --version jupyter kernelspec list conda list conda deactivate . (base) Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 (base) Available kernels: javascript /root/.local/share/jupyter/kernels/javascript python3 /root/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash (base) # packages in environment at /root/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.14.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 (base) . View Each fastpages post . echo &quot;Search for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # Posts within fastpages pwd # present working directory ls -l # lists all posts on fastpages . Search for posts bash: cd: /_posts: No such file or directory /mnt/c/Users/etran/OneDrive/Documents/GitHub/fastpages_EthanT/_notebooks total 3112 -rwxrwxrwx 1 root root 3162470 Aug 19 18:35 2020-02-20-test -rwxrwxrwx 1 root root 2866 Aug 27 18:00 2022-08-19-first-notebook.ipynb -rwxrwxrwx 1 root root 784 Aug 27 18:00 2022-08-20-READ-ME.md -rwxrwxrwx 1 root root 2192 Aug 28 19:08 2022-08-25-bash.ipynb -rwxrwxrwx 1 root root 4152 Aug 28 18:50 2022-08-26-quiz.ipynb drwxrwxrwx 1 root root 4096 Aug 19 18:31 ghtop_images drwxrwxrwx 1 root root 4096 Aug 19 18:31 my_icons .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/bash/installation/checks/2022/08/25/bash.html",
            "relUrl": "/fastpages/jupyter/bash/installation/checks/2022/08/25/bash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "First Markdown Post",
            "content": "Hello, my name is Ethan Tran and this is my first markdown post. . . About Me Click this! ↑ . . Closing statement . I hope to improve my skills with Python and get adjusted to IDEs such as Visual Studio. Cheers! .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/markdown/2022/08/19/first-post.html",
            "relUrl": "/markdown/2022/08/19/first-post.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Ethan's First Notebook",
            "content": "Printing &quot;Hello&quot; . print(&quot;Hello&quot;) . Hello . Time value of money after one year calculator! . With this calculator that I made, you can insert any initial amount of money and any interest rate. In this demo, I started with $1000 and used an interest rate of 0.1563. . print(&quot;Lets calculate your time value of money after one year!&quot;) print(&quot;How much money are you investing?&quot;) # Input the initial amount of money Money = float(input(&quot;Amount of money: &quot;)) print(&quot;$&quot; + &quot;{:.2f}&quot;.format(Money)) # Input interest rate print(&quot;What is the interest rate of your investment?&quot;) r = float(input(&quot;Interest rate: &quot;)) percent = (r * 100) # Interest rate shown as a percentage print(&quot;{:.2f}&quot;.format(percent) + &quot;%&quot;) # Calculation of the final amount of money final_amount = (Money * (1 + r)) print(&#39;This will be your amount of money after one year.&#39;) print(&quot;$&quot; + &quot;{:.2f}&quot;.format(final_amount)) . Lets calculate your time value of money after one year! How much money are you investing? $50.00 What is the interest rate of your investment? 15.00% This will be your amount of money after one year. $57.50 .",
            "url": "https://muddydog25.github.io/fastpages_EthanT/fastpages/jupyter/first/2022/08/19/first-notebook.html",
            "relUrl": "/fastpages/jupyter/first/2022/08/19/first-notebook.html",
            "date": " • Aug 19, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Work in progress… .",
          "url": "https://muddydog25.github.io/fastpages_EthanT/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Class Notes",
          "content": "My Classes . AP Biology | . Honors Humanities | &lt;/td&gt; &lt;/tr&gt; AP Computer Science Principles | &lt;/td&gt;",
          "url": "https://muddydog25.github.io/fastpages_EthanT/classes/",
          "relUrl": "/classes/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Vocabulary",
          "content": "Word Definition . Sequence | Two or more lines of code | . Key | A mix of fields used to take and sort rows from a given criteria | . Value | Representation of an entity that can be changed by a given program | . Import | A command that is used to add additional functions that have been previously developed | . If | A command that is used to determine whether a response is correct or incorrect based on previously set expressions/conditions | . Expression | Used in an if statement to determine whether a given command is right or wrong | .",
          "url": "https://muddydog25.github.io/fastpages_EthanT/vocabulary/",
          "relUrl": "/vocabulary/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Periods",
          "content": "Source of the key/value: &quot;class_periods&quot; in &quot;_config.yml&quot; . Period Class . 0 | N/A | . 1 | AP Biology | . 2 | Honors Humanities | . 3 | Spanish | . 4 | AP CSP | . 5 | Math | .",
          "url": "https://muddydog25.github.io/fastpages_EthanT/class-periods/",
          "relUrl": "/class-periods/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "JavaScript",
          "content": "JavaScript Jupyter Notebook | JavaScript Post | .",
          "url": "https://muddydog25.github.io/fastpages_EthanT/javascript/",
          "relUrl": "/javascript/",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "JavaScript",
          "content": "",
          "url": "https://muddydog25.github.io/fastpages_EthanT/javascript/",
          "relUrl": "/javascript/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://muddydog25.github.io/fastpages_EthanT/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}